
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800e658  0800e658  0001e658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec44  0800ec44  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec4c  0800ec4c  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec4c  0800ec4c  0001ec4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800ec54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  200002b8  0800ef0c  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  0800ef0c  00021570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d5a4  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000621a  00000000  00000000  0004d8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00053af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001602  00000000  00000000  000556e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027507  00000000  00000000  00056ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026892  00000000  00000000  0007e1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddcb1  00000000  00000000  000a4a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b44  00000000  00000000  0018272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e640 	.word	0x0800e640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800e640 	.word	0x0800e640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfb      	ldrb	r3, [r7, #15]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
 80005a4:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	2301      	movs	r3, #1
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	2304      	movs	r3, #4
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <OD_getIndex+0x14>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	e000      	b.n	80005ec <OD_getIndex+0x16>
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <OD_extension_init+0x14>
 8000608:	2305      	movs	r3, #5
 800060a:	e003      	b.n	8000614 <OD_extension_init+0x1c>
    entry->extension = extension;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	607a      	str	r2, [r7, #4]
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	460b      	mov	r3, r1
 800062e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000630:	7af9      	ldrb	r1, [r7, #11]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f001 fb56 	bl	8001cec <OD_get_value>
 8000640:	4603      	mov	r3, r0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00c      	beq.n	8000678 <OD_read_1014_default+0x2e>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	7c5b      	ldrb	r3, [r3, #17]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <OD_read_1014_default+0x2e>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d005      	beq.n	8000678 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d902      	bls.n	8000678 <OD_read_1014_default+0x2e>
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000678:	2309      	movs	r3, #9
 800067a:	e01b      	b.n	80006b4 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <OD_read_1014_default+0x44>
 800068a:	2300      	movs	r3, #0
 800068c:	e001      	b.n	8000692 <OD_read_1014_default+0x48>
 800068e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000692:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800069a:	3380      	adds	r3, #128	; 0x80
 800069c:	461a      	mov	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80006a4:	6939      	ldr	r1, [r7, #16]
 80006a6:	68b8      	ldr	r0, [r7, #8]
 80006a8:	f7ff ff86 	bl	80005b8 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2204      	movs	r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00f      	beq.n	80006f0 <OD_read_1003+0x34>
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <OD_read_1003+0x34>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d009      	beq.n	80006f0 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d803      	bhi.n	80006ea <OD_read_1003+0x2e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7c5b      	ldrb	r3, [r3, #17]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <OD_read_1003+0x34>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 80006f0:	2309      	movs	r3, #9
 80006f2:	e04d      	b.n	8000790 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	7f1b      	ldrb	r3, [r3, #28]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d801      	bhi.n	8000706 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000702:	2309      	movs	r3, #9
 8000704:	e044      	b.n	8000790 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	7c5b      	ldrb	r3, [r3, #17]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10b      	bne.n	8000726 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000714:	4619      	mov	r1, r3
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f7ff ff3e 	bl	8000598 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e034      	b.n	8000790 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	7c5a      	ldrb	r2, [r3, #17]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000730:	429a      	cmp	r2, r3
 8000732:	d82c      	bhi.n	800078e <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	7f5b      	ldrb	r3, [r3, #29]
 8000738:	b29a      	uxth	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	7c5b      	ldrb	r3, [r3, #17]
 800073e:	b29b      	uxth	r3, r3
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b29b      	uxth	r3, r3
 8000744:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000746:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800074a:	2b00      	cmp	r3, #0
 800074c:	da07      	bge.n	800075e <OD_read_1003+0xa2>
            index += em->fifoSize;
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	7f1b      	ldrb	r3, [r3, #28]
 8000752:	b29a      	uxth	r2, r3
 8000754:	8afb      	ldrh	r3, [r7, #22]
 8000756:	4413      	add	r3, r2
 8000758:	b29b      	uxth	r3, r3
 800075a:	82fb      	strh	r3, [r7, #22]
 800075c:	e007      	b.n	800076e <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 800075e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	7f12      	ldrb	r2, [r2, #28]
 8000766:	4293      	cmp	r3, r2
 8000768:	db01      	blt.n	800076e <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800076a:	2309      	movs	r3, #9
 800076c:	e010      	b.n	8000790 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	68b8      	ldr	r0, [r7, #8]
 8000780:	f7ff ff1a 	bl	80005b8 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2204      	movs	r2, #4
 8000788:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 800078e:	2319      	movs	r3, #25
    }
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00c      	beq.n	80007c6 <OD_write_1003+0x2e>
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <OD_write_1003+0x2e>
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <OD_write_1003+0x2e>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d102      	bne.n	80007c6 <OD_write_1003+0x2e>
        || countWritten == NULL)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80007c6:	2309      	movs	r3, #9
 80007c8:	e012      	b.n	80007f0 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f7ff fed6 	bl	800057c <CO_getUint8>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80007d6:	230f      	movs	r3, #15
 80007d8:	e00a      	b.n	80007f0 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000806:	2300      	movs	r3, #0
 8000808:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d01a      	beq.n	8000846 <CO_EM_init+0x4e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d017      	beq.n	8000846 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <CO_EM_init+0x2c>
 800081c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d810      	bhi.n	8000846 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00d      	beq.n	8000846 <CO_EM_init+0x4e>
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00a      	beq.n	8000846 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000830:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000834:	2b00      	cmp	r3, #0
 8000836:	d006      	beq.n	8000846 <CO_EM_init+0x4e>
 8000838:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 800083c:	2b00      	cmp	r3, #0
 800083e:	db02      	blt.n	8000846 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	2b00      	cmp	r3, #0
 8000844:	d102      	bne.n	800084c <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e0a7      	b.n	800099c <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 800084c:	2250      	movs	r2, #80	; 0x50
 800084e:	2100      	movs	r1, #0
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f00d fa61 	bl	800dd18 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	2100      	movs	r1, #0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f001 faa9 	bl	8001dba <OD_getPtr>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10c      	bne.n	8000890 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 8000876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000878:	2b00      	cmp	r3, #0
 800087a:	d006      	beq.n	800088a <CO_EM_init+0x92>
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff feaa 	bl	80005d6 <OD_getIndex>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800088a:	f06f 030b 	mvn.w	r3, #11
 800088e:	e085      	b.n	800099c <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008a4:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	2301      	movs	r3, #1
 80008ac:	2100      	movs	r1, #0
 80008ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008b0:	f7ff feb6 	bl	8000620 <OD_get_u32>
 80008b4:	4603      	mov	r3, r0
 80008b6:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80008b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <CO_EM_init+0xd2>
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <CO_EM_init+0x1ac>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d010      	beq.n	80008ec <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80008ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <CO_EM_init+0xe6>
 80008d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008d2:	f7ff fe80 	bl	80005d6 <OD_getIndex>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008dc:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 80008de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80008e6:	f06f 030b 	mvn.w	r3, #11
 80008ea:	e057      	b.n	800099c <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 80008ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3380      	adds	r3, #128	; 0x80
 80008f4:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	0fdb      	lsrs	r3, r3, #31
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <CO_EM_init+0x1b0>)
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a26      	ldr	r2, [pc, #152]	; (80009ac <CO_EM_init+0x1b4>)
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3330      	adds	r3, #48	; 0x30
 800091a:	4619      	mov	r1, r3
 800091c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800091e:	f7ff fe6b 	bl	80005f8 <OD_extension_init>
 8000922:	4603      	mov	r3, r0
 8000924:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000926:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00c      	beq.n	8000948 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <CO_EM_init+0x14a>
 8000934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000936:	f7ff fe4e 	bl	80005d6 <OD_getIndex>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000942:	f06f 030b 	mvn.w	r3, #11
 8000946:	e029      	b.n	800099c <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800094e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000952:	8aba      	ldrh	r2, [r7, #20]
 8000954:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000956:	2300      	movs	r3, #0
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2308      	movs	r3, #8
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f006 fd27 	bl	80073b4 <CO_CANtxBufferInit>
 8000966:	4602      	mov	r2, r0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	e010      	b.n	800099c <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <CO_EM_init+0x1b8>)
 8000984:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <CO_EM_init+0x1bc>)
 800098a:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3340      	adds	r3, #64	; 0x40
 8000990:	4619      	mov	r1, r3
 8000992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000994:	f7ff fe30 	bl	80005f8 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000998:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	7ffff800 	.word	0x7ffff800
 80009a8:	0800064b 	.word	0x0800064b
 80009ac:	08001921 	.word	0x08001921
 80009b0:	080006bd 	.word	0x080006bd
 80009b4:	08000799 	.word	0x08000799

080009b8 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af02      	add	r7, sp, #8
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	8a5b      	ldrh	r3, [r3, #18]
 80009cc:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	8a1b      	ldrh	r3, [r3, #16]
 80009d2:	8aba      	ldrh	r2, [r7, #20]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f000 80a2 	beq.w	8000b1e <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	8a1a      	ldrh	r2, [r3, #16]
 80009de:	8abb      	ldrh	r3, [r7, #20]
 80009e0:	4053      	eors	r3, r2
 80009e2:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	8aba      	ldrh	r2, [r7, #20]
 80009e8:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 80009ea:	8a7a      	ldrh	r2, [r7, #18]
 80009ec:	f240 1301 	movw	r3, #257	; 0x101
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d010      	beq.n	8000a18 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 80009f6:	8aba      	ldrh	r2, [r7, #20]
 80009f8:	f240 1301 	movw	r3, #257	; 0x101
 80009fc:	4013      	ands	r3, r2
            CO_error(em,
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2201      	movs	r2, #1
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f91a 	bl	8000c4c <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8000a18:	8a7b      	ldrh	r3, [r7, #18]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d010      	beq.n	8000a44 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a22:	8abb      	ldrh	r3, [r7, #20]
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	f248 1320 	movw	r3, #33056	; 0x8120
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f904 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000a44:	8a7b      	ldrh	r3, [r7, #18]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d010      	beq.n	8000a70 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000a4e:	8abb      	ldrh	r3, [r7, #20]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	f248 1340 	movw	r3, #33088	; 0x8140
 8000a68:	2212      	movs	r2, #18
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f8ee 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 8000a70:	8a7b      	ldrh	r3, [r7, #18]
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d010      	beq.n	8000a9c <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000a7a:	8abb      	ldrh	r3, [r7, #20]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	f248 1310 	movw	r3, #33040	; 0x8110
 8000a94:	2214      	movs	r2, #20
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f000 f8d8 	bl	8000c4c <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8000a9c:	8a7b      	ldrh	r3, [r7, #18]
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d010      	beq.n	8000ac8 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf14      	ite	ne
 8000ab0:	2301      	movne	r3, #1
 8000ab2:	2300      	moveq	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ac0:	2215      	movs	r2, #21
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f000 f8c2 	bl	8000c4c <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8000ac8:	8a7b      	ldrh	r3, [r7, #18]
 8000aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d010      	beq.n	8000af4 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000ad2:	8abb      	ldrh	r3, [r7, #20]
 8000ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	f248 1320 	movw	r3, #33056	; 0x8120
 8000aec:	2206      	movs	r2, #6
 8000aee:	68f8      	ldr	r0, [r7, #12]
 8000af0:	f000 f8ac 	bl	8000c4c <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000af4:	8a7b      	ldrh	r3, [r7, #18]
 8000af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00f      	beq.n	8000b1e <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2313      	movs	r3, #19
 8000b16:	2213      	movs	r2, #19
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f897 	bl	8000c4c <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b2a:	7dfb      	ldrb	r3, [r7, #23]
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <CO_EM_process+0x18a>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <CO_EM_process+0x1a2>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b60:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	7dfa      	ldrb	r2, [r7, #23]
 8000b68:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d067      	beq.n	8000c40 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	7f1b      	ldrb	r3, [r3, #28]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d965      	bls.n	8000c44 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	7f9b      	ldrb	r3, [r3, #30]
 8000b7c:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	7f5b      	ldrb	r3, [r3, #29]
 8000b82:	7c7a      	ldrb	r2, [r7, #17]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d05d      	beq.n	8000c44 <CO_EM_process+0x28c>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d158      	bne.n	8000c44 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	699a      	ldr	r2, [r3, #24]
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	041a      	lsls	r2, r3, #16
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6998      	ldr	r0, [r3, #24]
 8000ba6:	7c7b      	ldrb	r3, [r7, #17]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4403      	add	r3, r0
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	1d58      	adds	r0, r3, #5
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	7c7b      	ldrb	r3, [r7, #17]
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00d f989 	bl	800deda <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	f006 fc68 	bl	80074a8 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000bd8:	7c7b      	ldrb	r3, [r7, #17]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	747b      	strb	r3, [r7, #17]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	7f1b      	ldrb	r3, [r3, #28]
 8000be2:	7c7a      	ldrb	r2, [r7, #17]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d201      	bcs.n	8000bec <CO_EM_process+0x234>
 8000be8:	7c7a      	ldrb	r2, [r7, #17]
 8000bea:	e000      	b.n	8000bee <CO_EM_process+0x236>
 8000bec:	2200      	movs	r2, #0
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	7fdb      	ldrb	r3, [r3, #31]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10c      	bne.n	8000c14 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f000 f81d 	bl	8000c4c <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c12:	e017      	b.n	8000c44 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	7fdb      	ldrb	r3, [r3, #31]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d113      	bne.n	8000c44 <CO_EM_process+0x28c>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	7f9a      	ldrb	r2, [r3, #30]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	7f5b      	ldrb	r3, [r3, #29]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d10d      	bne.n	8000c44 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	2220      	movs	r2, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f807 	bl	8000c4c <CO_error>
    return;
 8000c3e:	e001      	b.n	8000c44 <CO_EM_process+0x28c>
        return;
 8000c40:	bf00      	nop
 8000c42:	e000      	b.n	8000c46 <CO_EM_process+0x28e>
    return;
 8000c44:	bf00      	nop
}
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08d      	sub	sp, #52	; 0x34
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80a6 	beq.w	8000db6 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d90a      	bls.n	8000ca0 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000c96:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000c9a:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <CO_error+0x88>
            return;
 8000cc6:	e079      	b.n	8000dbc <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d074      	beq.n	8000dba <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	061a      	lsls	r2, r3, #24
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce0:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ce6:	f3ef 8210 	mrs	r2, PRIMASK
 8000cea:	617a      	str	r2, [r7, #20]
  return(result);
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <CO_error+0xc0>
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e00b      	b.n	8000d24 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000d16:	43db      	mvns	r3, r3
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	7f1b      	ldrb	r3, [r3, #28]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d93c      	bls.n	8000da6 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7f5b      	ldrb	r3, [r3, #29]
 8000d30:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000d32:	7efb      	ldrb	r3, [r7, #27]
 8000d34:	3301      	adds	r3, #1
 8000d36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	7f1b      	ldrb	r3, [r3, #28]
 8000d3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d302      	bcc.n	8000d4c <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	7f9b      	ldrb	r3, [r3, #30]
 8000d50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d103      	bne.n	8000d60 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	77da      	strb	r2, [r3, #31]
 8000d5e:	e022      	b.n	8000da6 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	7efb      	ldrb	r3, [r7, #27]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	6a3a      	ldr	r2, [r7, #32]
 8000d6c:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	7efb      	ldrb	r3, [r7, #27]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000d82:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	7f1b      	ldrb	r3, [r3, #28]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da07      	bge.n	8000da6 <CO_error+0x15a>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f383 8810 	msr	PRIMASK, r3
}
 8000db4:	e002      	b.n	8000dbc <CO_error+0x170>
    if (em == NULL) return;
 8000db6:	bf00      	nop
 8000db8:	e000      	b.n	8000dbc <CO_error+0x170>
            return;
 8000dba:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000dbc:	3734      	adds	r7, #52	; 0x34
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <OD_getIndex+0x14>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	e000      	b.n	8000df8 <OD_getIndex+0x16>
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <OD_extension_init>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <OD_extension_init+0x14>
 8000e14:	2305      	movs	r3, #5
 8000e16:	e003      	b.n	8000e20 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <OD_get_u32>:
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e3c:	7af9      	ldrb	r1, [r7, #11]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2304      	movs	r3, #4
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f000 ff50 	bl	8001cec <OD_get_value>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000e56:	b480      	push	{r7}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3305      	adds	r3, #5
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d107      	bne.n	8000e86 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2201      	movs	r2, #1
 8000e84:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000e86:	bf00      	nop
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b088      	sub	sp, #32
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d012      	beq.n	8000ed2 <OD_write_1016+0x40>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00f      	beq.n	8000ed2 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	7c5b      	ldrb	r3, [r3, #17]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	7c5a      	ldrb	r2, [r3, #17]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	7a1b      	ldrb	r3, [r3, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d805      	bhi.n	8000ed2 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d102      	bne.n	8000ed2 <OD_write_1016+0x40>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	e020      	b.n	8000f18 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f7ff ff75 	bl	8000dc6 <CO_getUint32>
 8000edc:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	7c5b      	ldrb	r3, [r3, #17]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	8abb      	ldrh	r3, [r7, #20]
 8000ef2:	7dfa      	ldrb	r2, [r7, #23]
 8000ef4:	69f8      	ldr	r0, [r7, #28]
 8000ef6:	f000 f8bf 	bl	8001078 <CO_HBconsumer_initEntry>
 8000efa:	4603      	mov	r3, r0
 8000efc:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000efe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f06:	2308      	movs	r3, #8
 8000f08:	e006      	b.n	8000f18 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 fd05 	bl	8001920 <OD_writeOriginal>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d008      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <CO_HBconsumer_init+0x2c>
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e08a      	b.n	8001068 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f00c fede 	bl	800dd18 <memset>
    HBcons->em = em;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f72:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d304      	bcc.n	8000f88 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e000      	b.n	8000f8a <CO_HBconsumer_init+0x6a>
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	77fb      	strb	r3, [r7, #31]
 8000f92:	e041      	b.n	8001018 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	f107 0214 	add.w	r2, r7, #20
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa2:	f7ff ff43 	bl	8000e2c <OD_get_u32>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000faa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00c      	beq.n	8000fcc <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <CO_HBconsumer_init+0xa6>
 8000fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fba:	f7ff ff12 	bl	8000de2 <OD_getIndex>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000fc6:	f06f 030b 	mvn.w	r3, #11
 8000fca:	e04d      	b.n	8001068 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	7f7a      	ldrb	r2, [r7, #29]
 8000fda:	7ff9      	ldrb	r1, [r7, #31]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f84b 	bl	8001078 <CO_HBconsumer_initEntry>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000fe6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d011      	beq.n	8001012 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <CO_HBconsumer_init+0xe2>
 8000ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ff6:	f7ff fef4 	bl	8000de2 <OD_getIndex>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001002:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001006:	f113 0f0c 	cmn.w	r3, #12
 800100a:	d002      	beq.n	8001012 <CO_HBconsumer_init+0xf2>
                return ret;
 800100c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001010:	e02a      	b.n	8001068 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001012:	7ffb      	ldrb	r3, [r7, #31]
 8001014:	3301      	adds	r3, #1
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a1b      	ldrb	r3, [r3, #8]
 800101c:	7ffa      	ldrb	r2, [r7, #31]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3b8      	bcc.n	8000f94 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <CO_HBconsumer_init+0x150>)
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <CO_HBconsumer_init+0x154>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3320      	adds	r3, #32
 8001038:	4619      	mov	r1, r3
 800103a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800103c:	f7ff fee2 	bl	8000e04 <OD_extension_init>
 8001040:	4603      	mov	r3, r0
 8001042:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001044:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <CO_HBconsumer_init+0x140>
 8001052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001054:	f7ff fec5 	bl	8000de2 <OD_getIndex>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001060:	f06f 030b 	mvn.w	r3, #11
 8001064:	e000      	b.n	8001068 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08001871 	.word	0x08001871
 8001074:	08000e93 	.word	0x08000e93

08001078 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08d      	sub	sp, #52	; 0x34
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	4608      	mov	r0, r1
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	4603      	mov	r3, r0
 8001088:	70fb      	strb	r3, [r7, #3]
 800108a:	460b      	mov	r3, r1
 800108c:	70bb      	strb	r3, [r7, #2]
 800108e:	4613      	mov	r3, r2
 8001090:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001092:	2300      	movs	r3, #0
 8001094:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <CO_HBconsumer_initEntry+0x2e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d302      	bcc.n	80010ac <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e077      	b.n	800119c <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 80010ac:	883b      	ldrh	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d024      	beq.n	80010fc <CO_HBconsumer_initEntry+0x84>
 80010b2:	78bb      	ldrb	r3, [r7, #2]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	77bb      	strb	r3, [r7, #30]
 80010bc:	e019      	b.n	80010f2 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	7fbb      	ldrb	r3, [r7, #30]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	f107 0408 	add.w	r4, r7, #8
 80010cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	7fbb      	ldrb	r3, [r7, #30]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d008      	beq.n	80010ec <CO_HBconsumer_initEntry+0x74>
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <CO_HBconsumer_initEntry+0x74>
 80010e0:	7a3b      	ldrb	r3, [r7, #8]
 80010e2:	78ba      	ldrb	r2, [r7, #2]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d101      	bne.n	80010ec <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80010e8:	23f4      	movs	r3, #244	; 0xf4
 80010ea:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80010ec:	7fbb      	ldrb	r3, [r7, #30]
 80010ee:	3301      	adds	r3, #1
 80010f0:	77bb      	strb	r3, [r7, #30]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7a1b      	ldrb	r3, [r3, #8]
 80010f6:	7fba      	ldrb	r2, [r7, #30]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3e0      	bcc.n	80010be <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80010fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d149      	bne.n	8001198 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	78ba      	ldrb	r2, [r7, #2]
 8001114:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	461a      	mov	r2, r3
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00d      	beq.n	8001156 <CO_HBconsumer_initEntry+0xde>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800114c:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2201      	movs	r2, #1
 8001152:	709a      	strb	r2, [r3, #2]
 8001154:	e007      	b.n	8001166 <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2200      	movs	r2, #0
 8001164:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001180:	8bba      	ldrh	r2, [r7, #28]
 8001182:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <CO_HBconsumer_initEntry+0x12c>)
 8001184:	9402      	str	r4, [sp, #8]
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2300      	movs	r3, #0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001190:	f006 f8b2 	bl	80072f8 <CO_CANrxBufferInit>
 8001194:	4603      	mov	r3, r0
 8001196:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001198:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	08000e57 	.word	0x08000e57

080011a8 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	; 0x38
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d077      	beq.n	80012b4 <CO_HBconsumer_process+0x10c>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d073      	beq.n	80012b4 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011d2:	e068      	b.n	80012a6 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	789b      	ldrb	r3, [r3, #2]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d055      	beq.n	800129a <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d022      	beq.n	800123c <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d10a      	bne.n	800121e <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	f248 1330 	movw	r3, #33072	; 0x8130
 8001216:	221c      	movs	r2, #28
 8001218:	2101      	movs	r1, #1
 800121a:	f7ff fd17 	bl	8000c4c <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2201      	movs	r2, #1
 8001222:	709a      	strb	r2, [r3, #2]
 8001224:	e007      	b.n	8001236 <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2202      	movs	r2, #2
 800122a:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d11c      	bne.n	800127e <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	441a      	add	r2, r3
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	429a      	cmp	r2, r3
 800125a:	d310      	bcc.n	800127e <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	f248 1330 	movw	r3, #33072	; 0x8130
 800126a:	221b      	movs	r2, #27
 800126c:	2101      	movs	r1, #1
 800126e:	f7ff fced 	bl	8000c4c <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	22ff      	movs	r2, #255	; 0xff
 8001276:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2203      	movs	r2, #3
 800127c:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d001      	beq.n	800128a <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d003      	beq.n	800129c <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
 8001298:	e000      	b.n	800129c <CO_HBconsumer_process+0xf4>
                continue;
 800129a:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	3301      	adds	r3, #1
 80012a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	7a1b      	ldrb	r3, [r3, #8]
 80012aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d390      	bcc.n	80011d4 <CO_HBconsumer_process+0x2c>
 80012b2:	e028      	b.n	8001306 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <CO_HBconsumer_process+0x11a>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d021      	beq.n	8001306 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	77fb      	strb	r3, [r7, #31]
 80012c6:	e015      	b.n	80012f4 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	22ff      	movs	r2, #255	; 0xff
 80012d8:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	3301      	adds	r3, #1
 80012f2:	77fb      	strb	r3, [r7, #31]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7a1b      	ldrb	r3, [r3, #8]
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e4      	bcc.n	80012c8 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d114      	bne.n	8001338 <CO_HBconsumer_process+0x190>
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d011      	beq.n	8001338 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	221b      	movs	r2, #27
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fc93 	bl	8000c4c <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	221c      	movs	r2, #28
 8001332:	2100      	movs	r1, #0
 8001334:	f7ff fc8a 	bl	8000c4c <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133c:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001342:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	615a      	str	r2, [r3, #20]
}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001360:	81fb      	strh	r3, [r7, #14]
 8001362:	89fb      	ldrh	r3, [r7, #14]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <OD_getIndex+0x14>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	e000      	b.n	8001386 <OD_getIndex+0x16>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <OD_extension_init>:
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <OD_extension_init+0x14>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e003      	b.n	80013ae <OD_extension_init+0x1c>
    entry->extension = extension;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <OD_get_u16>:
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af02      	add	r7, sp, #8
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	460b      	mov	r3, r1
 80013c8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2302      	movs	r3, #2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fc89 	bl	8001cec <OD_get_value>
 80013da:	4603      	mov	r3, r0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b09      	cmp	r3, #9
 800140e:	d807      	bhi.n	8001420 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	5cd2      	ldrb	r2, [r2, r3]
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	4013      	ands	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <CO_isError+0x40>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <CO_isError+0x42>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <CO_getErrorRegister+0x1e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <CO_getErrorRegister+0x1e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	e000      	b.n	8001452 <CO_getErrorRegister+0x20>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 800145e:	b480      	push	{r7}
 8001460:	b087      	sub	sp, #28
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3305      	adds	r3, #5
 8001472:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	785b      	ldrb	r3, [r3, #1]
 800147e:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d10a      	bne.n	80014a0 <CO_NMT_receive+0x42>
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <CO_NMT_receive+0x3c>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	78db      	ldrb	r3, [r3, #3]
 8001494:	7bba      	ldrb	r2, [r7, #14]
 8001496:	429a      	cmp	r2, r3
 8001498:	d102      	bne.n	80014a0 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <OD_write_1017+0x2e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	7c5b      	ldrb	r3, [r3, #17]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d108      	bne.n	80014da <OD_write_1017+0x2e>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d102      	bne.n	80014da <OD_write_1017+0x2e>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80014da:	2309      	movs	r3, #9
 80014dc:	e017      	b.n	800150e <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f7ff ff34 	bl	8001352 <CO_getUint16>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa0a 	bl	8001920 <OD_writeOriginal>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af04      	add	r7, sp, #16
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <CO_NMT_init+0x30>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <CO_NMT_init+0x30>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <CO_NMT_init+0x30>
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	e098      	b.n	8001680 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 800154e:	222c      	movs	r2, #44	; 0x2c
 8001550:	2100      	movs	r1, #0
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f00c fbe0 	bl	800dd18 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8c3a      	ldrh	r2, [r7, #32]
 800156e:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001586:	f107 0214 	add.w	r2, r7, #20
 800158a:	2301      	movs	r3, #1
 800158c:	2100      	movs	r1, #0
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f7ff ff13 	bl	80013ba <OD_get_u16>
 8001594:	4603      	mov	r3, r0
 8001596:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001598:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <CO_NMT_init+0x9c>
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff fee2 	bl	8001370 <OD_getIndex>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b2:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80015b4:	f06f 030b 	mvn.w	r3, #11
 80015b8:	e062      	b.n	8001680 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	461a      	mov	r2, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <CO_NMT_init+0x170>)
 80015d4:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <CO_NMT_init+0x174>)
 80015da:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3310      	adds	r3, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7ff fed5 	bl	8001392 <OD_extension_init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80015ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00c      	beq.n	800160e <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80015f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <CO_NMT_init+0xf0>
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f7ff feb8 	bl	8001370 <OD_getIndex>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001606:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001608:	f06f 030b 	mvn.w	r3, #11
 800160c:	e038      	b.n	8001680 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	429a      	cmp	r2, r3
 8001618:	d903      	bls.n	8001622 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001622:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001624:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <CO_NMT_init+0x178>)
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001638:	f005 fe5e 	bl	80072f8 <CO_CANrxBufferInit>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <CO_NMT_init+0x136>
        return ret;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164c:	e018      	b.n	8001680 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001654:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001656:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2301      	movs	r3, #1
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2300      	movs	r3, #0
 8001662:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001664:	f005 fea6 	bl	80073b4 <CO_CANtxBufferInit>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e001      	b.n	8001680 <CO_NMT_init+0x168>
    }

    return ret;
 800167c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08001871 	.word	0x08001871
 800168c:	080014ad 	.word	0x080014ad
 8001690:	0800145f 	.word	0x0800145f

08001694 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80016ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d204      	bcs.n	80016d0 <CO_NMT_process+0x3c>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	e000      	b.n	80016d2 <CO_NMT_process+0x3e>
 80016d0:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10e      	bne.n	80016fa <CO_NMT_process+0x66>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d029      	beq.n	8001738 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80016f2:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d01e      	beq.n	8001738 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	7ffa      	ldrb	r2, [r7, #31]
 8001700:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f005 fecb 	bl	80074a8 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001712:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	889b      	ldrh	r3, [r3, #4]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <CO_NMT_process+0x96>
 8001726:	2305      	movs	r3, #5
 8001728:	e000      	b.n	800172c <CO_NMT_process+0x98>
 800172a:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800172c:	77fb      	strb	r3, [r7, #31]
 800172e:	e003      	b.n	8001738 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	7ffa      	ldrb	r2, [r7, #31]
 800173c:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	789b      	ldrb	r3, [r3, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	2b82      	cmp	r3, #130	; 0x82
 800174c:	d01a      	beq.n	8001784 <CO_NMT_process+0xf0>
 800174e:	2b82      	cmp	r3, #130	; 0x82
 8001750:	dc1b      	bgt.n	800178a <CO_NMT_process+0xf6>
 8001752:	2b81      	cmp	r3, #129	; 0x81
 8001754:	d013      	beq.n	800177e <CO_NMT_process+0xea>
 8001756:	2b81      	cmp	r3, #129	; 0x81
 8001758:	dc17      	bgt.n	800178a <CO_NMT_process+0xf6>
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	d00c      	beq.n	8001778 <CO_NMT_process+0xe4>
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	dc13      	bgt.n	800178a <CO_NMT_process+0xf6>
 8001762:	2b01      	cmp	r3, #1
 8001764:	d002      	beq.n	800176c <CO_NMT_process+0xd8>
 8001766:	2b02      	cmp	r3, #2
 8001768:	d003      	beq.n	8001772 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800176a:	e00e      	b.n	800178a <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 800176c:	2305      	movs	r3, #5
 800176e:	77fb      	strb	r3, [r7, #31]
                break;
 8001770:	e00c      	b.n	800178c <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 8001772:	2304      	movs	r3, #4
 8001774:	77fb      	strb	r3, [r7, #31]
                break;
 8001776:	e009      	b.n	800178c <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001778:	237f      	movs	r3, #127	; 0x7f
 800177a:	77fb      	strb	r3, [r7, #31]
                break;
 800177c:	e006      	b.n	800178c <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 800177e:	2302      	movs	r3, #2
 8001780:	77bb      	strb	r3, [r7, #30]
                break;
 8001782:	e003      	b.n	800178c <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8001784:	2301      	movs	r3, #1
 8001786:	77bb      	strb	r3, [r7, #30]
                break;
 8001788:	e000      	b.n	800178c <CO_NMT_process+0xf8>
                break;
 800178a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 800179a:	2b00      	cmp	r3, #0
 800179c:	d01c      	beq.n	80017d8 <CO_NMT_process+0x144>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2112      	movs	r1, #18
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe1d 	bl	80013e4 <CO_isError>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	211b      	movs	r1, #27
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe14 	bl	80013e4 <CO_isError>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	211c      	movs	r1, #28
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe0b 	bl	80013e4 <CO_isError>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <CO_NMT_process+0x146>
 80017d8:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80017da:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <CO_NMT_process+0x170>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fe20 	bl	8001432 <CO_getErrorRegister>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	889b      	ldrh	r3, [r3, #4]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <CO_NMT_process+0x170>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <CO_NMT_process+0x172>
 8001804:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001806:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001808:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d110      	bne.n	8001832 <CO_NMT_process+0x19e>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <CO_NMT_process+0x188>
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00a      	beq.n	8001832 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <CO_NMT_process+0x198>
 8001828:	2304      	movs	r3, #4
 800182a:	e000      	b.n	800182e <CO_NMT_process+0x19a>
 800182c:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800182e:	77fb      	strb	r3, [r7, #31]
 8001830:	e010      	b.n	8001854 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	b21b      	sxth	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	da0b      	bge.n	8001854 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 800183c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001840:	2b7f      	cmp	r3, #127	; 0x7f
 8001842:	d107      	bne.n	8001854 <CO_NMT_process+0x1c0>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <CO_NMT_process+0x1c0>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001850:	2305      	movs	r3, #5
 8001852:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	7ffa      	ldrb	r2, [r7, #31]
 8001858:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <CO_NMT_process+0x1d2>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	7ffa      	ldrb	r2, [r7, #31]
 8001864:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8001866:	7fbb      	ldrb	r3, [r7, #30]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <OD_readOriginal+0x20>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <OD_readOriginal+0x20>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001890:	2309      	movs	r3, #9
 8001892:	e041      	b.n	8001918 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80018a6:	230e      	movs	r3, #14
 80018a8:	e036      	b.n	8001918 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d103      	bne.n	80018be <OD_readOriginal+0x4e>
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d922      	bls.n	8001904 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d801      	bhi.n	80018cc <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80018c8:	2309      	movs	r3, #9
 80018ca:	e025      	b.n	8001918 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4413      	add	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d90a      	bls.n	80018fe <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	441a      	add	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80018f8:	23ff      	movs	r3, #255	; 0xff
 80018fa:	75fb      	strb	r3, [r7, #23]
 80018fc:	e002      	b.n	8001904 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f00c fae6 	bl	800deda <memcpy>

    *countRead = dataLenToCopy;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <OD_writeOriginal+0x20>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <OD_writeOriginal+0x20>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001940:	2309      	movs	r3, #9
 8001942:	e047      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001956:	230e      	movs	r3, #14
 8001958:	e03c      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <OD_writeOriginal+0x4e>
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d922      	bls.n	80019b4 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	d801      	bhi.n	800197c <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001978:	2309      	movs	r3, #9
 800197a:	e02b      	b.n	80019d4 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4413      	add	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	d90a      	bls.n	80019ae <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	441a      	add	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	75fb      	strb	r3, [r7, #23]
 80019ac:	e002      	b.n	80019b4 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d201      	bcs.n	80019c0 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80019bc:	230c      	movs	r3, #12
 80019be:	e009      	b.n	80019d4 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	69b8      	ldr	r0, [r7, #24]
 80019c6:	f00c fa88 	bl	800deda <memcpy>

    *countWritten = dataLenToCopy;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	601a      	str	r2, [r3, #0]
    return returnCode;
 80019d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 80019ea:	2302      	movs	r3, #2
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001a06:	2302      	movs	r3, #2
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <OD_find+0x1a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <OD_find+0x1e>
        return NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e046      	b.n	8001ac0 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001a3e:	e026      	b.n	8001a8e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001a40:	8afa      	ldrh	r2, [r7, #22]
 8001a42:	8abb      	ldrh	r3, [r7, #20]
 8001a44:	4413      	add	r3, r2
 8001a46:	105b      	asrs	r3, r3, #1
 8001a48:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	89fa      	ldrh	r2, [r7, #14]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d101      	bne.n	8001a6a <OD_find+0x56>
            return entry;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	e02a      	b.n	8001ac0 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d209      	bcs.n	8001a88 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <OD_find+0x6e>
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	e000      	b.n	8001a84 <OD_find+0x70>
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	82bb      	strh	r3, [r7, #20]
 8001a86:	e002      	b.n	8001a8e <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001a8e:	8afa      	ldrh	r2, [r7, #22]
 8001a90:	8abb      	ldrh	r3, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3d4      	bcc.n	8001a40 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001a96:	8afa      	ldrh	r2, [r7, #22]
 8001a98:	8abb      	ldrh	r3, [r7, #20]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10f      	bne.n	8001abe <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	8afa      	ldrh	r2, [r7, #22]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <OD_find+0xaa>
            return entry;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	e000      	b.n	8001ac0 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08d      	sub	sp, #52	; 0x34
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <OD_getSub+0x1e>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <OD_getSub+0x22>
 8001aea:	2305      	movs	r3, #5
 8001aec:	e0d2      	b.n	8001c94 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <OD_getSub+0x2c>
 8001af4:	2309      	movs	r3, #9
 8001af6:	e0cd      	b.n	8001c94 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d050      	beq.n	8001baa <OD_getSub+0xde>
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	f300 808c 	bgt.w	8001c26 <OD_getSub+0x15a>
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d002      	beq.n	8001b18 <OD_getSub+0x4c>
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d015      	beq.n	8001b42 <OD_getSub+0x76>
 8001b16:	e086      	b.n	8001c26 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <OD_getSub+0x56>
 8001b1e:	230e      	movs	r3, #14
 8001b20:	e0b8      	b.n	8001c94 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	791a      	ldrb	r2, [r3, #4]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	609a      	str	r2, [r3, #8]
        break;
 8001b40:	e073      	b.n	8001c2a <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	7afa      	ldrb	r2, [r7, #11]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d301      	bcc.n	8001b50 <OD_getSub+0x84>
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	e0a1      	b.n	8001c94 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	7a1a      	ldrb	r2, [r3, #8]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	2201      	movs	r2, #1
 8001b70:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001b72:	e05a      	b.n	8001c2a <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	7a5a      	ldrb	r2, [r3, #9]
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	7afa      	ldrb	r2, [r7, #11]
 8001b8e:	3a01      	subs	r2, #1
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4413      	add	r3, r2
 8001b98:	e000      	b.n	8001b9c <OD_getSub+0xd0>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	609a      	str	r2, [r3, #8]
        break;
 8001ba8:	e03f      	b.n	8001c2a <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bba:	e01c      	b.n	8001bf6 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001bbc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	4413      	add	r3, r2
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	7afa      	ldrb	r2, [r7, #11]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d10a      	bne.n	8001bec <OD_getSub+0x120>
                odo = &odoArr[i];
 8001bd6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	4413      	add	r3, r2
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001bea:	e00a      	b.n	8001c02 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3dc      	bcc.n	8001bbc <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <OD_getSub+0x140>
 8001c08:	230e      	movs	r3, #14
 8001c0a:	e043      	b.n	8001c94 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	795a      	ldrb	r2, [r3, #5]
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	609a      	str	r2, [r3, #8]
        break;
 8001c24:	e001      	b.n	8001c2a <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001c26:	2309      	movs	r3, #9
 8001c28:	e034      	b.n	8001c94 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <OD_getSub+0x16c>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <OD_getSub+0x1d4>)
 8001c3c:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <OD_getSub+0x1d8>)
 8001c42:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	e01c      	b.n	8001c86 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <OD_getSub+0x192>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	e000      	b.n	8001c60 <OD_getSub+0x194>
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <OD_getSub+0x1aa>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	e000      	b.n	8001c78 <OD_getSub+0x1ac>
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	7afa      	ldrb	r2, [r7, #11]
 8001c90:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3734      	adds	r7, #52	; 0x34
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	08001871 	.word	0x08001871
 8001ca4:	08001921 	.word	0x08001921
 8001ca8:	080019dd 	.word	0x080019dd
 8001cac:	080019f9 	.word	0x080019f9

08001cb0 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db03      	blt.n	8001cca <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b19      	cmp	r3, #25
 8001cc8:	dd02      	ble.n	8001cd0 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <OD_getSDOabCode+0x38>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	e004      	b.n	8001cda <OD_getSDOabCode+0x2a>
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <OD_getSDOabCode+0x38>)
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	0800e878 	.word	0x0800e878

08001cec <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b08f      	sub	sp, #60	; 0x3c
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <OD_get_value+0x1a>
 8001d02:	2309      	movs	r3, #9
 8001d04:	e024      	b.n	8001d50 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d10:	f107 0214 	add.w	r2, r7, #20
 8001d14:	7af9      	ldrb	r1, [r7, #11]
 8001d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fed7 	bl	8001acc <OD_getSub>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001d24:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <OD_get_value+0x46>
 8001d2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d30:	e00e      	b.n	8001d50 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <OD_get_value+0x54>
 8001d3c:	230b      	movs	r3, #11
 8001d3e:	e007      	b.n	8001d50 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001d40:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d4c:	47a0      	blx	r4
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	373c      	adds	r7, #60	; 0x3c
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}

08001d58 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08f      	sub	sp, #60	; 0x3c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	460b      	mov	r3, r1
 8001d66:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001d72:	f107 0214 	add.w	r2, r7, #20
 8001d76:	7af9      	ldrb	r1, [r7, #11]
 8001d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fea6 	bl	8001acc <OD_getSub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001d86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <OD_set_value+0x3c>
 8001d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d92:	e00e      	b.n	8001db2 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <OD_set_value+0x4a>
 8001d9e:	230b      	movs	r3, #11
 8001da0:	e007      	b.n	8001db2 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001da2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dae:	47a0      	blx	r4
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	373c      	adds	r7, #60	; 0x3c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}

08001dba <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08e      	sub	sp, #56	; 0x38
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001dd0:	f107 0214 	add.w	r2, r7, #20
 8001dd4:	7af9      	ldrb	r1, [r7, #11]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe77 	bl	8001acc <OD_getSub>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001de4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d116      	bne.n	8001e1a <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <OD_getPtr+0x42>
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001dfc:	2309      	movs	r3, #9
 8001dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e02:	e00a      	b.n	8001e1a <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <OD_getPtr+0x60>
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d002      	beq.n	8001e1a <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001e14:	230b      	movs	r3, #11
 8001e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <OD_getPtr+0x6e>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e26:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001e28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <OD_getPtr+0x7c>
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e000      	b.n	8001e38 <OD_getPtr+0x7e>
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3738      	adds	r7, #56	; 0x38
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e6a:	81fb      	strh	r3, [r7, #14]
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	2304      	movs	r3, #4
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <OD_getIndex+0x14>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	e000      	b.n	8001eca <OD_getIndex+0x16>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <OD_extension_init>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <OD_extension_init+0x14>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e003      	b.n	8001ef2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <OD_get_u8>:
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f0e:	7af9      	ldrb	r1, [r7, #11]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff fee7 	bl	8001cec <OD_get_value>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <OD_get_u16>:
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f38:	7af9      	ldrb	r1, [r7, #11]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fed2 	bl	8001cec <OD_get_value>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <OD_get_u32>:
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001f62:	7af9      	ldrb	r1, [r7, #11]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2304      	movs	r3, #4
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff febd 	bl	8001cec <OD_get_value>
 8001f72:	4603      	mov	r3, r0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <OD_write_dummy+0x1a>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <OD_read_dummy+0x20>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <OD_read_dummy+0x20>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001fc4:	2309      	movs	r3, #9
 8001fc6:	e010      	b.n	8001fea <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d902      	bls.n	8001fd8 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f00b fe9b 	bl	800dd18 <memset>

    *countRead = count;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b092      	sub	sp, #72	; 0x48
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 800201a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3310      	adds	r3, #16
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800203a:	2b08      	cmp	r3, #8
 800203c:	d901      	bls.n	8002042 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800203e:	2307      	movs	r3, #7
 8002040:	e090      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002046:	2b1f      	cmp	r3, #31
 8002048:	d81a      	bhi.n	8002080 <PDOconfigMap+0x8c>
 800204a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002056:	2214      	movs	r2, #20
 8002058:	2100      	movs	r1, #0
 800205a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800205c:	f00b fe5c 	bl	800dd18 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002060:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	4a3e      	ldr	r2, [pc, #248]	; (800216c <PDOconfigMap+0x178>)
 8002074:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <PDOconfigMap+0x17c>)
 800207a:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e071      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002084:	4619      	mov	r1, r3
 8002086:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002088:	f7ff fcc4 	bl	8001a14 <OD_find>
 800208c:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800208e:	f107 0214 	add.w	r2, r7, #20
 8002092:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002096:	2300      	movs	r3, #0
 8002098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800209a:	f7ff fd17 	bl	8001acc <OD_getSub>
 800209e:	4603      	mov	r3, r0
 80020a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 80020a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <PDOconfigMap+0xbe>
        return odRet;
 80020ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020b0:	e058      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <PDOconfigMap+0xc8>
 80020b8:	2308      	movs	r3, #8
 80020ba:	e000      	b.n	80020be <PDOconfigMap+0xca>
 80020bc:	2304      	movs	r3, #4
 80020be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 80020c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020ca:	4013      	ands	r3, r2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 80020d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d201      	bcs.n	80020ec <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80020e8:	2306      	movs	r3, #6
 80020ea:	e03b      	b.n	8002164 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80020ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ee:	461d      	mov	r5, r3
 80020f0:	f107 0414 	add.w	r4, r7, #20
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002100:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002106:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d129      	bne.n	8002162 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 800210e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002112:	2b1f      	cmp	r3, #31
 8002114:	d81f      	bhi.n	8002156 <PDOconfigMap+0x162>
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01b      	beq.n	8002156 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002120:	6899      	ldr	r1, [r3, #8]
 8002122:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 800212a:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 800212c:	3308      	adds	r3, #8
 800212e:	440b      	add	r3, r1
 8002130:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	323c      	adds	r2, #60	; 0x3c
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800213a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b2d1      	uxtb	r1, r2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	460a      	mov	r2, r1
 8002150:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002154:	e005      	b.n	8002162 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	323c      	adds	r2, #60	; 0x3c
 800215c:	2100      	movs	r1, #0
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3748      	adds	r7, #72	; 0x48
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}
 800216c:	08001fa5 	.word	0x08001fa5
 8002170:	08001f7d 	.word	0x08001f7d

08002174 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800218a:	f107 021b 	add.w	r2, r7, #27
 800218e:	2301      	movs	r3, #1
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff feb3 	bl	8001efe <OD_get_u8>
 8002198:	4603      	mov	r3, r0
 800219a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800219e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fe81 	bl	8001eb4 <OD_getIndex>
 80021b2:	4603      	mov	r3, r0
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80021ba:	f06f 030b 	mvn.w	r3, #11
 80021be:	e082      	b.n	80022c6 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021c6:	e05e      	b.n	8002286 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80021c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	3310      	adds	r3, #16
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80021e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2d9      	uxtb	r1, r3
 80021e8:	f107 0214 	add.w	r2, r7, #20
 80021ec:	2301      	movs	r3, #1
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff feaf 	bl	8001f52 <OD_get_u32>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80021fa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80021fe:	2b0e      	cmp	r3, #14
 8002200:	d03b      	beq.n	800227a <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8002202:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00f      	beq.n	800222a <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe4f 	bl	8001eb4 <OD_getIndex>
 8002216:	4603      	mov	r3, r0
 8002218:	021a      	lsls	r2, r3, #8
 800221a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800221e:	431a      	orrs	r2, r3
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002224:	f06f 030b 	mvn.w	r3, #11
 8002228:	e04d      	b.n	80022c6 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fedc 	bl	8001ff4 <PDOconfigMap>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002242:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	22ff      	movs	r2, #255	; 0xff
 8002254:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <PDO_initMapping+0xf0>
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002264:	7efb      	ldrb	r3, [r7, #27]
 8002266:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800226a:	429a      	cmp	r2, r3
 800226c:	d206      	bcs.n	800227c <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	4413      	add	r3, r2
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
 8002278:	e000      	b.n	800227c <PDO_initMapping+0x108>
            continue;
 800227a:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800227c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002280:	3301      	adds	r3, #1
 8002282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800228a:	2b07      	cmp	r3, #7
 800228c:	d99c      	bls.n	80021c8 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b08      	cmp	r3, #8
 8002292:	d805      	bhi.n	80022a0 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <PDO_initMapping+0x13a>
 800229a:	7efb      	ldrb	r3, [r7, #27]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <PDO_initMapping+0x13a>
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80022be:	7efa      	ldrb	r2, [r7, #27]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b08e      	sub	sp, #56	; 0x38
 80022d2:	af02      	add	r7, sp, #8
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	7c5b      	ldrb	r3, [r3, #17]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d901      	bls.n	80022fa <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 80022f6:	2309      	movs	r3, #9
 80022f8:	e086      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <OD_write_PDO_mapping+0x4a>
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	7b5b      	ldrb	r3, [r3, #13]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <OD_write_PDO_mapping+0x4e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	7c5b      	ldrb	r3, [r3, #17]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002318:	2302      	movs	r3, #2
 800231a:	e075      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	7c5b      	ldrb	r3, [r3, #17]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d14d      	bne.n	80023c0 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f7ff fd8b 	bl	8001e40 <CO_getUint8>
 800232a:	4603      	mov	r3, r0
 800232c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002338:	2b08      	cmp	r3, #8
 800233a:	d901      	bls.n	8002340 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 800233c:	2307      	movs	r3, #7
 800233e:	e063      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002346:	e01e      	b.n	8002386 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002348:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	3310      	adds	r3, #16
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	4413      	add	r3, r2
 800235a:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d901      	bls.n	8002374 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002370:	2306      	movs	r3, #6
 8002372:	e049      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4413      	add	r3, r2
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800237c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002380:	3301      	adds	r3, #1
 8002382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002386:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800238a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800238e:	429a      	cmp	r2, r3
 8002390:	d3da      	bcc.n	8002348 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2b08      	cmp	r3, #8
 8002396:	d901      	bls.n	800239c <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002398:	2307      	movs	r3, #7
 800239a:	e035      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <OD_write_PDO_mapping+0xe0>
 80023a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 80023aa:	230f      	movs	r3, #15
 80023ac:	e02c      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80023bc:	735a      	strb	r2, [r3, #13]
 80023be:	e01c      	b.n	80023fa <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 80023c0:	68b8      	ldr	r0, [r7, #8]
 80023c2:	f7ff fd5a 	bl	8001e7a <CO_getUint32>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	7c5b      	ldrb	r3, [r3, #17]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	4601      	mov	r1, r0
 80023e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e2:	f7ff fe07 	bl	8001ff4 <PDOconfigMap>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 80023ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <OD_write_PDO_mapping+0x12c>
            return odRet;
 80023f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80023f8:	e006      	b.n	8002408 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fa8d 	bl	8001920 <OD_writeOriginal>
 8002406:	4603      	mov	r3, r0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3730      	adds	r7, #48	; 0x30
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fa23 	bl	8001870 <OD_readOriginal>
 800242a:	4603      	mov	r3, r0
 800242c:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 800242e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d134      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	7c5b      	ldrb	r3, [r3, #17]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d130      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b04      	cmp	r3, #4
 8002444:	d12c      	bne.n	80024a0 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800244c:	68b8      	ldr	r0, [r7, #8]
 800244e:	f7ff fd14 	bl	8001e7a <CO_getUint32>
 8002452:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245c:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 800245e:	8a7b      	ldrh	r3, [r7, #18]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d011      	beq.n	8002488 <OD_read_PDO_commParam+0x78>
 8002464:	8a7a      	ldrh	r2, [r7, #18]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800246c:	4619      	mov	r1, r3
 800246e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002472:	400b      	ands	r3, r1
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002484:	4313      	orrs	r3, r2
 8002486:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <OD_read_PDO_commParam+0x88>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002496:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002498:	69f9      	ldr	r1, [r7, #28]
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	f7ff fcfb 	bl	8001e96 <CO_setUint32>
    }

    return returnCode;
 80024a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3305      	adds	r3, #5
 80024c8:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80024d0:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03e      	beq.n	8002558 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	7b1b      	ldrb	r3, [r3, #12]
 80024de:	7cfa      	ldrb	r2, [r7, #19]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d334      	bcc.n	800254e <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	7b1b      	ldrb	r3, [r3, #12]
 80024e8:	7cfa      	ldrb	r2, [r7, #19]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d105      	bne.n	80024fa <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <CO_PDO_receive+0x58>
 80024f4:	230b      	movs	r3, #11
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e004      	b.n	8002504 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <CO_PDO_receive+0x58>
 8002500:	230d      	movs	r3, #13
 8002502:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <CO_PDO_receive+0x80>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002528:	2301      	movs	r3, #1
 800252a:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 800252c:	7fbb      	ldrb	r3, [r7, #30]
 800252e:	332a      	adds	r3, #42	; 0x2a
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	2208      	movs	r2, #8
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f00b fccd 	bl	800deda <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002540:	7fba      	ldrb	r2, [r7, #30]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3252      	adds	r2, #82	; 0x52
 8002546:	2101      	movs	r1, #1
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800254c:	e004      	b.n	8002558 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800254e:	7ffb      	ldrb	r3, [r7, #31]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002554:	230c      	movs	r3, #12
 8002556:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	7ffa      	ldrb	r2, [r7, #31]
 800255c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b092      	sub	sp, #72	; 0x48
 800256c:	af04      	add	r7, sp, #16
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <OD_write_14xx+0x26>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <OD_write_14xx+0x26>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <OD_write_14xx+0x26>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d901      	bls.n	8002592 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800258e:	2309      	movs	r3, #9
 8002590:	e0ff      	b.n	8002792 <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00b fc98 	bl	800deda <memcpy>

    switch (stream->subIndex) {
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	7c5b      	ldrb	r3, [r3, #17]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	f000 80d4 	beq.w	800275c <OD_write_14xx+0x1f4>
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	f300 80e4 	bgt.w	8002782 <OD_write_14xx+0x21a>
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d003      	beq.n	80025c6 <OD_write_14xx+0x5e>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f000 80a5 	beq.w	800270e <OD_write_14xx+0x1a6>
 80025c4:	e0dd      	b.n	8002782 <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 80025c6:	68b8      	ldr	r0, [r7, #8]
 80025c8:	f7ff fc57 	bl	8001e7a <CO_getUint32>
 80025cc:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	43db      	mvns	r3, r3
 80025dc:	0fdb      	lsrs	r3, r3, #31
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	4b6d      	ldr	r3, [pc, #436]	; (800279c <OD_write_14xx+0x234>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13d      	bne.n	8002668 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <OD_write_14xx+0x9e>
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <OD_write_14xx+0x9e>
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002600:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002602:	429a      	cmp	r2, r3
 8002604:	d130      	bne.n	8002668 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d026      	beq.n	800265a <OD_write_14xx+0xf2>
 800260c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800260e:	2b7f      	cmp	r3, #127	; 0x7f
 8002610:	d92a      	bls.n	8002668 <OD_write_14xx+0x100>
 8002612:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002618:	d903      	bls.n	8002622 <OD_write_14xx+0xba>
 800261a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002620:	d922      	bls.n	8002668 <OD_write_14xx+0x100>
 8002622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002624:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002628:	d903      	bls.n	8002632 <OD_write_14xx+0xca>
 800262a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800262c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002630:	d31a      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002632:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002634:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002638:	d903      	bls.n	8002642 <OD_write_14xx+0xda>
 800263a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800263c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002640:	d312      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002644:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002648:	d303      	bcc.n	8002652 <OD_write_14xx+0xea>
 800264a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800264c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002650:	d30a      	bcc.n	8002668 <OD_write_14xx+0x100>
 8002652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002658:	d806      	bhi.n	8002668 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <OD_write_14xx+0x104>
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	7b5b      	ldrb	r3, [r3, #13]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002668:	230f      	movs	r3, #15
 800266a:	e092      	b.n	8002792 <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d105      	bne.n	8002682 <OD_write_14xx+0x11a>
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800267c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800267e:	429a      	cmp	r2, r3
 8002680:	d07e      	beq.n	8002780 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002688:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800268a:	429a      	cmp	r2, r3
 800268c:	d108      	bne.n	80026a0 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbfb 	bl	8001e96 <CO_setUint32>
            }
            if (!valid) {
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <OD_write_14xx+0x142>
                CAN_ID = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	6858      	ldr	r0, [r3, #4]
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 80026b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026b6:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <OD_write_14xx+0x238>)
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80026c6:	f004 fe17 	bl	80072f8 <CO_CANrxBufferInit>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <OD_write_14xx+0x184>
 80026d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <OD_write_14xx+0x184>
                PDO->valid = true;
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2201      	movs	r2, #1
 80026e0:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 80026ea:	e049      	b.n	8002780 <OD_write_14xx+0x218>
                PDO->valid = false;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 8002702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03a      	beq.n	8002780 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 800270a:	2309      	movs	r3, #9
 800270c:	e041      	b.n	8002792 <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800270e:	68b8      	ldr	r0, [r7, #8]
 8002710:	f7ff fb96 	bl	8001e40 <CO_getUint8>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800271a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271e:	2bf0      	cmp	r3, #240	; 0xf0
 8002720:	d905      	bls.n	800272e <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002726:	2bfd      	cmp	r3, #253	; 0xfd
 8002728:	d801      	bhi.n	800272e <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 800272a:	230f      	movs	r3, #15
 800272c:	e031      	b.n	8002792 <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800272e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002732:	2bf0      	cmp	r3, #240	; 0xf0
 8002734:	bf94      	ite	ls
 8002736:	2301      	movls	r3, #1
 8002738:	2300      	movhi	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d003      	beq.n	8002752 <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 800275a:	e012      	b.n	8002782 <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f7ff fb7d 	bl	8001e5c <CO_getUint16>
 8002762:	4603      	mov	r3, r0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800276c:	fb03 f202 	mul.w	r2, r3, r2
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 800277e:	e000      	b.n	8002782 <OD_write_14xx+0x21a>
        break;
 8002780:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002782:	f107 0110 	add.w	r1, r7, #16
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff f8c8 	bl	8001920 <OD_writeOriginal>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3738      	adds	r7, #56	; 0x38
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	3ffff800 	.word	0x3ffff800
 80027a0:	080024ad 	.word	0x080024ad

080027a4 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b090      	sub	sp, #64	; 0x40
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <CO_RPDO_init+0x36>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <CO_RPDO_init+0x36>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <CO_RPDO_init+0x36>
 80027c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <CO_RPDO_init+0x36>
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	e118      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 80027e0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80027e4:	2100      	movs	r1, #0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f00b fa96 	bl	800dd18 <memset>

    /* Configure object variables */
    PDO->em = em;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f6:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7ff fcb1 	bl	8002174 <PDO_initMapping>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002818:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <CO_RPDO_init+0x82>
        return ret;
 8002820:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002824:	e0f5      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 800282a:	f107 0218 	add.w	r2, r7, #24
 800282e:	2301      	movs	r3, #1
 8002830:	2101      	movs	r1, #1
 8002832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002834:	f7ff fb8d 	bl	8001f52 <OD_get_u32>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800283e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 800284c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800284e:	f7ff fb31 	bl	8001eb4 <OD_getIndex>
 8002852:	4603      	mov	r3, r0
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800285e:	f06f 030b 	mvn.w	r3, #11
 8002862:	e0d6      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	43db      	mvns	r3, r3
 8002868:	0fdb      	lsrs	r3, r3, #31
 800286a:	b2db      	uxtb	r3, r3
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002876:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <CO_RPDO_init+0xf6>
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	7b5b      	ldrb	r3, [r3, #13]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <CO_RPDO_init+0xe8>
 8002886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <CO_RPDO_init+0xf6>
        valid = false;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <CO_RPDO_init+0xf6>
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <CO_RPDO_init+0x10a>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	e000      	b.n	80028b0 <CO_RPDO_init+0x10c>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80028b6:	221a      	movs	r2, #26
 80028b8:	2101      	movs	r1, #1
 80028ba:	f7fe f9c7 	bl	8000c4c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80028c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <CO_RPDO_init+0x13c>
 80028ce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028d0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80028d2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028d6:	400b      	ands	r3, r1
 80028d8:	429a      	cmp	r2, r3
 80028da:	d101      	bne.n	80028e0 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 80028dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028de:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 80028e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028e2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <CO_RPDO_init+0x278>)
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80028f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028f8:	f004 fcfe 	bl	80072f8 <CO_CANrxBufferInit>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002902:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <CO_RPDO_init+0x16c>
        return ret;
 800290a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800290e:	e080      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002916:	23fe      	movs	r3, #254	; 0xfe
 8002918:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 800291a:	f107 0217 	add.w	r2, r7, #23
 800291e:	2301      	movs	r3, #1
 8002920:	2102      	movs	r1, #2
 8002922:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002924:	f7ff faeb 	bl	8001efe <OD_get_u8>
 8002928:	4603      	mov	r3, r0
 800292a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800292e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 800293c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800293e:	f7ff fab9 	bl	8001eb4 <OD_getIndex>
 8002942:	4603      	mov	r3, r0
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800294e:	f06f 030b 	mvn.w	r3, #11
 8002952:	e05e      	b.n	8002a12 <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2bf0      	cmp	r3, #240	; 0xf0
 8002960:	bf94      	ite	ls
 8002962:	2301      	movls	r3, #1
 8002964:	2300      	movhi	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002974:	f107 0214 	add.w	r2, r7, #20
 8002978:	2301      	movs	r3, #1
 800297a:	2105      	movs	r1, #5
 800297c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800297e:	f7ff fad3 	bl	8001f28 <OD_get_u16>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002988:	8abb      	ldrh	r3, [r7, #20]
 800298a:	461a      	mov	r2, r3
 800298c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002990:	fb03 f202 	mul.w	r2, r3, r2
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	2201      	movs	r2, #1
 800299e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029b0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80029b8:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80029c0:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <CO_RPDO_init+0x27c>)
 80029d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <CO_RPDO_init+0x280>)
 80029d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <CO_RPDO_init+0x284>)
 80029e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <CO_RPDO_init+0x288>)
 80029f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029fa:	4619      	mov	r1, r3
 80029fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029fe:	f7ff fa6a 	bl	8001ed6 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a0c:	f7ff fa63 	bl	8001ed6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	080024ad 	.word	0x080024ad
 8002a20:	08002411 	.word	0x08002411
 8002a24:	08002569 	.word	0x08002569
 8002a28:	08001871 	.word	0x08001871
 8002a2c:	080022cf 	.word	0x080022cf

08002a30 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b097      	sub	sp, #92	; 0x5c
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 810c 	beq.w	8002c64 <CO_RPDO_process+0x234>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8108 	beq.w	8002c64 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <CO_RPDO_process+0x36>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80ff 	bne.w	8002c64 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a6c:	2b0a      	cmp	r3, #10
 8002a6e:	d928      	bls.n	8002ac2 <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a76:	2b0b      	cmp	r3, #11
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d102      	bne.n	8002a92 <CO_RPDO_process+0x62>
 8002a8c:	f248 2310 	movw	r3, #33296	; 0x8210
 8002a90:	e001      	b.n	8002a96 <CO_RPDO_process+0x66>
 8002a92:	f248 2320 	movw	r3, #33312	; 0x8220
 8002a96:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aa4:	9200      	str	r2, [sp, #0]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aaa:	f7fe f8cf 	bl	8000c4c <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <CO_RPDO_process+0xbe>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <CO_RPDO_process+0xbe>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <CO_RPDO_process+0xbe>
            bufNo = 1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002af2:	e065      	b.n	8002bc0 <CO_RPDO_process+0x190>
            rpdoReceived = true;
 8002af4:	2301      	movs	r3, #1
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002af8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002afc:	332a      	adds	r3, #42	; 0x2a
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002b06:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3252      	adds	r2, #82	; 0x52
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002b1a:	e04b      	b.n	8002bb4 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002b1c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3310      	adds	r3, #16
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	4413      	add	r3, r2
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	330c      	adds	r3, #12
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8002b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d901      	bls.n	8002b4e <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d912      	bls.n	8002b7e <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00b f8d9 	bl	800dd18 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002b66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002b70:	4618      	mov	r0, r3
 8002b72:	f00b f9b2 	bl	800deda <memcpy>
                    dataOD = buf;
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	e001      	b.n	8002b82 <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	699c      	ldr	r4, [r3, #24]
 8002b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b96:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002b98:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba6:	4413      	add	r3, r2
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	7b5b      	ldrb	r3, [r3, #13]
 8002bb8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d3ad      	bcc.n	8002b1c <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002bc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3252      	adds	r2, #82	; 0x52
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d191      	bne.n	8002af4 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d058      	beq.n	8002c8c <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8002bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d017      	beq.n	8002c10 <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d90a      	bls.n	8002c06 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2217      	movs	r2, #23
 8002c00:	2100      	movs	r1, #0
 8002c02:	f7fe f823 	bl	8000c4c <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 8002c0e:	e03d      	b.n	8002c8c <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d038      	beq.n	8002c8c <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d230      	bcs.n	8002c8c <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	441a      	add	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d920      	bls.n	8002c8c <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f248 2350 	movw	r3, #33360	; 0x8250
 8002c5a:	2217      	movs	r2, #23
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	f7fd fff5 	bl	8000c4c <CO_error>
    ) {
 8002c62:	e013      	b.n	8002c8c <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <CO_RPDO_process+0x242>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002c8a:	e000      	b.n	8002c8e <CO_RPDO_process+0x25e>
    ) {
 8002c8c:	bf00      	nop
}
 8002c8e:	bf00      	nop
 8002c90:	3754      	adds	r7, #84	; 0x54
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}
	...

08002c98 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b093      	sub	sp, #76	; 0x4c
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <OD_write_18xx+0x26>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d901      	bls.n	8002cc2 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	e136      	b.n	8002f30 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00b f900 	bl	800deda <memcpy>

    switch (stream->subIndex) {
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	7c5b      	ldrb	r3, [r3, #17]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	f200 811d 	bhi.w	8002f20 <OD_write_18xx+0x288>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <OD_write_18xx+0x54>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002e3b 	.word	0x08002e3b
 8002cf4:	08002ea1 	.word	0x08002ea1
 8002cf8:	08002f21 	.word	0x08002f21
 8002cfc:	08002ecf 	.word	0x08002ecf
 8002d00:	08002ef3 	.word	0x08002ef3
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	f7ff f8b8 	bl	8001e7a <CO_getUint32>
 8002d0a:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	0fdb      	lsrs	r3, r3, #31
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002d20:	6a3a      	ldr	r2, [r7, #32]
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <OD_write_18xx+0x2a0>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13d      	bne.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <OD_write_18xx+0xac>
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <OD_write_18xx+0xac>
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002d3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d130      	bne.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d026      	beq.n	8002d98 <OD_write_18xx+0x100>
 8002d4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4e:	d92a      	bls.n	8002da6 <OD_write_18xx+0x10e>
 8002d50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d903      	bls.n	8002d60 <OD_write_18xx+0xc8>
 8002d58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002d5e:	d922      	bls.n	8002da6 <OD_write_18xx+0x10e>
 8002d60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d62:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002d66:	d903      	bls.n	8002d70 <OD_write_18xx+0xd8>
 8002d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d6e:	d31a      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d76:	d903      	bls.n	8002d80 <OD_write_18xx+0xe8>
 8002d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d7a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002d7e:	d312      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d82:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002d86:	d303      	bcc.n	8002d90 <OD_write_18xx+0xf8>
 8002d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d8e:	d30a      	bcc.n	8002da6 <OD_write_18xx+0x10e>
 8002d90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002d92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d96:	d806      	bhi.n	8002da6 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <OD_write_18xx+0x112>
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	7b5b      	ldrb	r3, [r3, #13]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002da6:	230f      	movs	r3, #15
 8002da8:	e0c2      	b.n	8002f30 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <OD_write_18xx+0x12a>
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002dba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f000 80ae 	beq.w	8002f1e <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002dc8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d108      	bne.n	8002de0 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f85b 	bl	8001e96 <CO_setUint32>
            }
            if (!valid) {
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	6858      	ldr	r0, [r3, #4]
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002dfe:	2af0      	cmp	r2, #240	; 0xf0
 8002e00:	bf94      	ite	ls
 8002e02:	2201      	movls	r2, #1
 8002e04:	2200      	movhi	r2, #0
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4614      	mov	r4, r2
 8002e0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002e0c:	9401      	str	r4, [sp, #4]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	f004 facf 	bl	80073b4 <CO_CANtxBufferInit>
 8002e16:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e086      	b.n	8002f30 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002e34:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 8002e38:	e071      	b.n	8002f1e <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002e3a:	68b8      	ldr	r0, [r7, #8]
 8002e3c:	f7ff f800 	bl	8001e40 <CO_getUint8>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4a:	2bf0      	cmp	r3, #240	; 0xf0
 8002e4c:	d905      	bls.n	8002e5a <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e52:	2bfd      	cmp	r3, #253	; 0xfd
 8002e54:	d801      	bhi.n	8002e5a <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002e56:	230f      	movs	r3, #15
 8002e58:	e06a      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5e:	2bf0      	cmp	r3, #240	; 0xf0
 8002e60:	bf94      	ite	ls
 8002e62:	2301      	movls	r3, #1
 8002e64:	2300      	movhi	r3, #0
 8002e66:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002e6e:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	22ff      	movs	r2, #255	; 0xff
 8002e74:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e7e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2201      	movs	r2, #1
 8002e86:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8002e9e:	e03f      	b.n	8002f20 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	e041      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002eac:	68b8      	ldr	r0, [r7, #8]
 8002eae:	f7fe ffd5 	bl	8001e5c <CO_getUint16>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	2264      	movs	r2, #100	; 0x64
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8002ecc:	e028      	b.n	8002f20 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7fe ffc4 	bl	8001e5c <CO_getUint16>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ede:	fb03 f202 	mul.w	r2, r3, r2
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8002ef0:	e016      	b.n	8002f20 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f7fe ffa4 	bl	8001e40 <CO_getUint8>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <OD_write_18xx+0x276>
 8002f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f0a:	2bf0      	cmp	r3, #240	; 0xf0
 8002f0c:	d901      	bls.n	8002f12 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	e00e      	b.n	8002f30 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002f18:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8002f1c:	e000      	b.n	8002f20 <OD_write_18xx+0x288>
        break;
 8002f1e:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002f20:	f107 0114 	add.w	r1, r7, #20
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7fe fcf9 	bl	8001920 <OD_writeOriginal>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3744      	adds	r7, #68	; 0x44
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	3ffff800 	.word	0x3ffff800

08002f3c <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	; 0x38
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <CO_TPDO_init+0x36>
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	e14f      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002f78:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f00a feca 	bl	800dd18 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002f94:	f107 031c 	add.w	r3, r7, #28
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa6:	f7ff f8e5 	bl	8002174 <PDO_initMapping>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002fb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <CO_TPDO_init+0x82>
        return ret;
 8002fb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002fbc:	e12c      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002fbe:	23fe      	movs	r3, #254	; 0xfe
 8002fc0:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002fc2:	f107 021b 	add.w	r2, r7, #27
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2102      	movs	r1, #2
 8002fca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fcc:	f7fe ff97 	bl	8001efe <OD_get_u8>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002fd6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002fe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fe6:	f7fe ff65 	bl	8001eb4 <OD_getIndex>
 8002fea:	4603      	mov	r3, r0
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002ff6:	f06f 030b 	mvn.w	r3, #11
 8002ffa:	e10d      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002ffc:	7efb      	ldrb	r3, [r7, #27]
 8002ffe:	2bfd      	cmp	r3, #253	; 0xfd
 8003000:	d804      	bhi.n	800300c <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003002:	7efb      	ldrb	r3, [r7, #27]
 8003004:	2bf0      	cmp	r3, #240	; 0xf0
 8003006:	d901      	bls.n	800300c <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003008:	23fe      	movs	r3, #254	; 0xfe
 800300a:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 800300c:	7efa      	ldrb	r2, [r7, #27]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003020:	f107 0214 	add.w	r2, r7, #20
 8003024:	2301      	movs	r3, #1
 8003026:	2101      	movs	r1, #1
 8003028:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800302a:	f7fe ff92 	bl	8001f52 <OD_get_u32>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003034:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003044:	f7fe ff36 	bl	8001eb4 <OD_getIndex>
 8003048:	4603      	mov	r3, r0
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003054:	f06f 030b 	mvn.w	r3, #11
 8003058:	e0de      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43db      	mvns	r3, r3
 800305e:	0fdb      	lsrs	r3, r3, #31
 8003060:	b2db      	uxtb	r3, r3
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800306c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00d      	beq.n	8003090 <CO_TPDO_init+0x154>
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	7b5b      	ldrb	r3, [r3, #13]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <CO_TPDO_init+0x146>
 800307c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <CO_TPDO_init+0x154>
        valid = false;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <CO_TPDO_init+0x154>
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <CO_TPDO_init+0x168>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	e000      	b.n	80030a6 <CO_TPDO_init+0x16a>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80030ac:	221a      	movs	r2, #26
 80030ae:	2101      	movs	r1, #1
 80030b0:	f7fd fdcc 	bl	8000c4c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80030be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <CO_TPDO_init+0x19a>
 80030c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030c6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80030c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80030cc:	400b      	ands	r3, r1
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d101      	bne.n	80030d6 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80030d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030d4:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80030e0:	2af0      	cmp	r2, #240	; 0xf0
 80030e2:	bf94      	ite	ls
 80030e4:	2201      	movls	r2, #1
 80030e6:	2200      	movhi	r2, #0
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4610      	mov	r0, r2
 80030ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030ee:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80030f2:	9001      	str	r0, [sp, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80030fa:	f004 f95b 	bl	80073b4 <CO_CANtxBufferInit>
 80030fe:	4602      	mov	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003110:	f04f 33ff 	mov.w	r3, #4294967295
 8003114:	e080      	b.n	8003218 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311a:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003124:	f107 0212 	add.w	r2, r7, #18
 8003128:	2301      	movs	r3, #1
 800312a:	2103      	movs	r1, #3
 800312c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800312e:	f7fe fefb 	bl	8001f28 <OD_get_u16>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003138:	f107 0210 	add.w	r2, r7, #16
 800313c:	2301      	movs	r3, #1
 800313e:	2105      	movs	r1, #5
 8003140:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003142:	f7fe fef1 	bl	8001f28 <OD_get_u16>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 800314c:	8a7b      	ldrh	r3, [r7, #18]
 800314e:	461a      	mov	r2, r3
 8003150:	2364      	movs	r3, #100	; 0x64
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 800315e:	8a3b      	ldrh	r3, [r7, #16]
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003180:	2301      	movs	r3, #1
 8003182:	2106      	movs	r1, #6
 8003184:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003186:	f7fe feba 	bl	8001efe <OD_get_u8>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80031b6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80031be:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031c6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	4a12      	ldr	r2, [pc, #72]	; (8003220 <CO_TPDO_init+0x2e4>)
 80031d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <CO_TPDO_init+0x2e8>)
 80031de:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <CO_TPDO_init+0x2ec>)
 80031ee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <CO_TPDO_init+0x2f0>)
 80031f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003200:	4619      	mov	r1, r3
 8003202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003204:	f7fe fe67 	bl	8001ed6 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800320e:	4619      	mov	r1, r3
 8003210:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003212:	f7fe fe60 	bl	8001ed6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3730      	adds	r7, #48	; 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	08002411 	.word	0x08002411
 8003224:	08002c99 	.word	0x08002c99
 8003228:	08001871 	.word	0x08001871
 800322c:	080022cf 	.word	0x080022cf

08003230 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b091      	sub	sp, #68	; 0x44
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003242:	3305      	adds	r3, #5
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <CO_TPDOsend+0x2a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003256:	2bfd      	cmp	r3, #253	; 0xfd
 8003258:	d901      	bls.n	800325e <CO_TPDOsend+0x2e>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <CO_TPDOsend+0x30>
 800325e:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003262:	2300      	movs	r3, #0
 8003264:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003268:	e062      	b.n	8003330 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800326a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3310      	adds	r3, #16
 8003278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327a:	4413      	add	r3, r2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	2b08      	cmp	r3, #8
 8003292:	d901      	bls.n	8003298 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003294:	2308      	movs	r3, #8
 8003296:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329c:	429a      	cmp	r2, r3
 800329e:	d90a      	bls.n	80032b6 <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	2208      	movs	r2, #8
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00a fd35 	bl	800dd18 <memset>
            dataTPDOCopy = buf;
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
 80032b4:	e001      	b.n	80032ba <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	695c      	ldr	r4, [r3, #20]
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032cc:	6a38      	ldr	r0, [r7, #32]
 80032ce:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80032d0:	7ffa      	ldrb	r2, [r7, #31]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80032d6:	7ffb      	ldrb	r3, [r7, #31]
 80032d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032da:	429a      	cmp	r2, r3
 80032dc:	d906      	bls.n	80032ec <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 80032de:	7ffa      	ldrb	r2, [r7, #31]
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4619      	mov	r1, r3
 80032e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032e8:	f00a fdf7 	bl	800deda <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80032ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	323c      	adds	r2, #60	; 0x3c
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <CO_TPDOsend+0xee>
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800330e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003310:	440b      	add	r3, r1
 8003312:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003316:	4313      	orrs	r3, r2
 8003318:	b2da      	uxtb	r2, r3
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003322:	4413      	add	r3, r2
 8003324:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800332a:	3301      	adds	r3, #1
 800332c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	7b5b      	ldrb	r3, [r3, #13]
 8003334:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003338:	429a      	cmp	r2, r3
 800333a:	d396      	bcc.n	800326a <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f004 f89d 	bl	80074a8 <CO_CANsend>
 800336e:	4603      	mov	r3, r0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3744      	adds	r7, #68	; 0x44
 8003374:	46bd      	mov	sp, r7
 8003376:	bd90      	pop	{r4, r7, pc}

08003378 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80dc 	beq.w	800354c <CO_TPDO_process+0x1d4>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80d8 	beq.w	800354c <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80033ac:	2bfd      	cmp	r3, #253	; 0xfd
 80033ae:	d946      	bls.n	800343e <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d018      	beq.n	80033ec <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d205      	bcs.n	80033d2 <CO_TPDO_process+0x5a>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	e000      	b.n	80033d4 <CO_TPDO_process+0x5c>
 80033d2:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d123      	bne.n	800343e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e01b      	b.n	8003434 <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80033fc:	7ffa      	ldrb	r2, [r7, #31]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	323c      	adds	r2, #60	; 0x3c
 8003402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003406:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00f      	beq.n	800342e <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	440b      	add	r3, r1
 8003418:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800341c:	4013      	ands	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 800342c:	e007      	b.n	800343e <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800342e:	7ffb      	ldrb	r3, [r7, #31]
 8003430:	3301      	adds	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	7b5b      	ldrb	r3, [r3, #13]
 8003438:	7ffa      	ldrb	r2, [r7, #31]
 800343a:	429a      	cmp	r2, r3
 800343c:	d3de      	bcc.n	80033fc <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003444:	2bfd      	cmp	r3, #253	; 0xfd
 8003446:	d91d      	bls.n	8003484 <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d205      	bcs.n	8003460 <CO_TPDO_process+0xe8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	e000      	b.n	8003462 <CO_TPDO_process+0xea>
 8003460:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800346e:	2b00      	cmp	r3, #0
 8003470:	d07f      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003478:	2b00      	cmp	r3, #0
 800347a:	d17a      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fed7 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003482:	e076      	b.n	8003572 <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800348a:	2b00      	cmp	r3, #0
 800348c:	d071      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d06e      	beq.n	8003572 <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d064      	beq.n	8003572 <CO_TPDO_process+0x1fa>
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7ff fec1 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80034ae:	e060      	b.n	8003572 <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d119      	bne.n	80034ee <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034c0:	7c5b      	ldrb	r3, [r3, #17]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22fe      	movs	r2, #254	; 0xfe
 80034d4:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80034d8:	e009      	b.n	80034ee <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80034f4:	2bfe      	cmp	r3, #254	; 0xfe
 80034f6:	d112      	bne.n	800351e <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80034fe:	7c9a      	ldrb	r2, [r3, #18]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003506:	429a      	cmp	r2, r3
 8003508:	d133      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe8a 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800351c:	e029      	b.n	8003572 <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003524:	3b01      	subs	r3, #1
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11c      	bne.n	8003572 <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fe73 	bl	8003230 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800354a:	e012      	b.n	8003572 <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	22ff      	movs	r2, #255	; 0xff
 800356c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8003570:	e000      	b.n	8003574 <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003572:	bf00      	nop
}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <OD_getIndex+0x14>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	e000      	b.n	80035ca <OD_getIndex+0x16>
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <OD_mappable+0x1e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7c1b      	ldrb	r3, [r3, #16]
 80035e8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <OD_mappable+0x1e>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <OD_mappable+0x20>
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <OD_extension_init>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <OD_extension_init+0x14>
 8003612:	2305      	movs	r3, #5
 8003614:	e003      	b.n	800361e <OD_extension_init+0x1c>
    entry->extension = extension;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <OD_get_u8>:
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af02      	add	r7, sp, #8
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	460b      	mov	r3, r1
 8003638:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800363a:	7af9      	ldrb	r1, [r7, #11]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2301      	movs	r3, #1
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fe fb51 	bl	8001cec <OD_get_value>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <OD_get_u32>:
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003664:	7af9      	ldrb	r1, [r7, #11]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2304      	movs	r3, #4
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7fe fb3c 	bl	8001cec <OD_get_value>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af02      	add	r7, sp, #8
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	460b      	mov	r3, r1
 800368c:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800368e:	1d3a      	adds	r2, r7, #4
 8003690:	7af9      	ldrb	r1, [r7, #11]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2304      	movs	r3, #4
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7fe fb5d 	bl	8001d58 <OD_set_value>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3305      	adds	r3, #5
 80036c0:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d115      	bne.n	80036f4 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d103      	bne.n	80036d8 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80036d6:	e00d      	b.n	80036f4 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	7cfa      	ldrb	r2, [r7, #19]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f00a fbf6 	bl	800deda <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2201      	movs	r2, #1
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	80fb      	strh	r3, [r7, #6]
 800370e:	4613      	mov	r3, r2
 8003710:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	429a      	cmp	r2, r3
 800371a:	d106      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003722:	429a      	cmp	r2, r3
 8003724:	d101      	bne.n	800372a <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003726:	2300      	movs	r3, #0
 8003728:	e04e      	b.n	80037c8 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a3a      	ldr	r2, [r7, #32]
 800372e:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db02      	blt.n	8003742 <CO_SDOserver_init_canRxTx+0x46>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	b29b      	uxth	r3, r3
 8003740:	e000      	b.n	8003744 <CO_SDOserver_init_canRxTx+0x48>
 8003742:	2300      	movs	r3, #0
 8003744:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	db02      	blt.n	8003752 <CO_SDOserver_init_canRxTx+0x56>
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	b29b      	uxth	r3, r3
 8003750:	e000      	b.n	8003754 <CO_SDOserver_init_canRxTx+0x58>
 8003752:	2300      	movs	r3, #0
 8003754:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003756:	8afb      	ldrh	r3, [r7, #22]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
 800375c:	8abb      	ldrh	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	611a      	str	r2, [r3, #16]
 8003768:	e006      	b.n	8003778 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003778:	8afa      	ldrh	r2, [r7, #22]
 800377a:	88f9      	ldrh	r1, [r7, #6]
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <CO_SDOserver_init_canRxTx+0xd4>)
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800378c:	68b8      	ldr	r0, [r7, #8]
 800378e:	f003 fdb3 	bl	80072f8 <CO_CANrxBufferInit>
 8003792:	4603      	mov	r3, r0
 8003794:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	8aba      	ldrh	r2, [r7, #20]
 800379c:	88b9      	ldrh	r1, [r7, #4]
 800379e:	2300      	movs	r3, #0
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2308      	movs	r3, #8
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2300      	movs	r3, #0
 80037a8:	f003 fe04 	bl	80073b4 <CO_CANtxBufferInit>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80037ba:	23ff      	movs	r3, #255	; 0xff
 80037bc:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
    }

    return ret;
 80037c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	080036a9 	.word	0x080036a9

080037d4 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b08f      	sub	sp, #60	; 0x3c
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <OD_write_1201_additional+0x20>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80037f4:	2309      	movs	r3, #9
 80037f6:	e0f9      	b.n	80039ec <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	7c5b      	ldrb	r3, [r3, #17]
 8003802:	2b03      	cmp	r3, #3
 8003804:	f200 80e8 	bhi.w	80039d8 <OD_write_1201_additional+0x204>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <OD_write_1201_additional+0x3c>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003821 	.word	0x08003821
 8003814:	08003825 	.word	0x08003825
 8003818:	080038e9 	.word	0x080038e9
 800381c:	080039af 	.word	0x080039af
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003820:	2304      	movs	r3, #4
 8003822:	e0e3      	b.n	80039ec <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003824:	68b8      	ldr	r0, [r7, #8]
 8003826:	f7ff feb7 	bl	8003598 <CO_getUint32>
 800382a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	0fdb      	lsrs	r3, r3, #31
 8003848:	b2db      	uxtb	r3, r3
 800384a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <OD_write_1201_additional+0x220>)
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d134      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <OD_write_1201_additional+0x98>
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <OD_write_1201_additional+0x98>
 8003864:	8afa      	ldrh	r2, [r7, #22]
 8003866:	8abb      	ldrh	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	d129      	bne.n	80038c0 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d028      	beq.n	80038c4 <OD_write_1201_additional+0xf0>
 8003872:	8afb      	ldrh	r3, [r7, #22]
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d923      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003878:	8afb      	ldrh	r3, [r7, #22]
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d903      	bls.n	8003888 <OD_write_1201_additional+0xb4>
 8003880:	8afb      	ldrh	r3, [r7, #22]
 8003882:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003886:	d91b      	bls.n	80038c0 <OD_write_1201_additional+0xec>
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800388e:	d903      	bls.n	8003898 <OD_write_1201_additional+0xc4>
 8003890:	8afb      	ldrh	r3, [r7, #22]
 8003892:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003896:	d313      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800389e:	d903      	bls.n	80038a8 <OD_write_1201_additional+0xd4>
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80038a6:	d30b      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80038ae:	d303      	bcc.n	80038b8 <OD_write_1201_additional+0xe4>
 80038b0:	8afb      	ldrh	r3, [r7, #22]
 80038b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b6:	d303      	bcc.n	80038c0 <OD_write_1201_additional+0xec>
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038be:	d901      	bls.n	80038c4 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80038c0:	230f      	movs	r3, #15
 80038c2:	e093      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4603      	mov	r3, r0
 80038e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038e2:	f7ff ff0b 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80038e6:	e07a      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80038e8:	68b8      	ldr	r0, [r7, #8]
 80038ea:	f7ff fe55 	bl	8003598 <CO_getUint32>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f8:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003904:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	43db      	mvns	r3, r3
 800390a:	0fdb      	lsrs	r3, r3, #31
 800390c:	b2db      	uxtb	r3, r3
 800390e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <OD_write_1201_additional+0x220>)
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d134      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <OD_write_1201_additional+0x15c>
 8003928:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800392a:	8c3b      	ldrh	r3, [r7, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d129      	bne.n	8003984 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d028      	beq.n	8003988 <OD_write_1201_additional+0x1b4>
 8003936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003938:	2b7f      	cmp	r3, #127	; 0x7f
 800393a:	d923      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800393c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	d903      	bls.n	800394c <OD_write_1201_additional+0x178>
 8003944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003946:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800394a:	d91b      	bls.n	8003984 <OD_write_1201_additional+0x1b0>
 800394c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800394e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003952:	d903      	bls.n	800395c <OD_write_1201_additional+0x188>
 8003954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003956:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800395a:	d313      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800395c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800395e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003962:	d903      	bls.n	800396c <OD_write_1201_additional+0x198>
 8003964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003966:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800396a:	d30b      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800396c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800396e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003972:	d303      	bcc.n	800397c <OD_write_1201_additional+0x1a8>
 8003974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800397a:	d303      	bcc.n	8003984 <OD_write_1201_additional+0x1b0>
 800397c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800397e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003982:	d901      	bls.n	8003988 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003984:	230f      	movs	r3, #15
 8003986:	e031      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4623      	mov	r3, r4
 80039a4:	4602      	mov	r2, r0
 80039a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039a8:	f7ff fea8 	bl	80036fc <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 80039ac:	e017      	b.n	80039de <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80039b4:	230b      	movs	r3, #11
 80039b6:	e019      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80039b8:	68b8      	ldr	r0, [r7, #8]
 80039ba:	f7ff fddf 	bl	800357c <CO_getUint8>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 80039c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <OD_write_1201_additional+0x200>
 80039cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da03      	bge.n	80039dc <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80039d4:	230f      	movs	r3, #15
 80039d6:	e009      	b.n	80039ec <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80039d8:	230e      	movs	r3, #14
 80039da:	e007      	b.n	80039ec <OD_write_1201_additional+0x218>
            break;
 80039dc:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7fd ff9b 	bl	8001920 <OD_writeOriginal>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3734      	adds	r7, #52	; 0x34
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	3ffff800 	.word	0x3ffff800

080039f8 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <CO_SDOserver_init+0x26>
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e0f5      	b.n	8003c10 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003a30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d117      	bne.n	8003a7a <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <CO_SDOserver_init+0x60>
 8003a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da02      	bge.n	8003a5e <CO_SDOserver_init+0x66>
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e0d8      	b.n	8003c10 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003a66:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003a70:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	611a      	str	r2, [r3, #16]
 8003a78:	e0a4      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fd9a 	bl	80035b4 <OD_getIndex>
 8003a80:	4603      	mov	r3, r0
 8003a82:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8003a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a86:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003a8a:	d123      	bne.n	8003ad4 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <CO_SDOserver_init+0xa2>
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da02      	bge.n	8003aa0 <CO_SDOserver_init+0xa8>
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e0b7      	b.n	8003c10 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003abc:	2301      	movs	r3, #1
 8003abe:	2101      	movs	r1, #1
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff fddc 	bl	800367e <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003ac6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac8:	2301      	movs	r3, #1
 8003aca:	2102      	movs	r1, #2
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fdd6 	bl	800367e <OD_set_u32>
 8003ad2:	e077      	b.n	8003bc4 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8003ad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ad6:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003ada:	d96f      	bls.n	8003bbc <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8003adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ade:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003ae2:	d26b      	bcs.n	8003bbc <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003ae4:	f107 021d 	add.w	r2, r7, #29
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2100      	movs	r1, #0
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fd9c 	bl	800362a <OD_get_u8>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8003af8:	f107 0218 	add.w	r2, r7, #24
 8003afc:	2301      	movs	r3, #1
 8003afe:	2101      	movs	r1, #1
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fda7 	bl	8003654 <OD_get_u32>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8003b0c:	f107 0214 	add.w	r2, r7, #20
 8003b10:	2301      	movs	r3, #1
 8003b12:	2102      	movs	r1, #2
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fd9d 	bl	8003654 <OD_get_u32>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8003b1e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b26:	7f7b      	ldrb	r3, [r7, #29]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d002      	beq.n	8003b32 <CO_SDOserver_init+0x13a>
 8003b2c:	7f7b      	ldrb	r3, [r7, #29]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8003b32:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <CO_SDOserver_init+0x14a>
 8003b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <CO_SDOserver_init+0x156>
 8003b48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003b4e:	f06f 030b 	mvn.w	r3, #11
 8003b52:	e05d      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db05      	blt.n	8003b66 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8003b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	e000      	b.n	8003b68 <CO_SDOserver_init+0x170>
 8003b66:	2300      	movs	r3, #0
 8003b68:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db05      	blt.n	8003b7c <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8003b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	e000      	b.n	8003b7e <CO_SDOserver_init+0x186>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <CO_SDOserver_init+0x220>)
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <CO_SDOserver_init+0x224>)
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3354      	adds	r3, #84	; 0x54
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fd32 	bl	8003602 <OD_extension_init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8003ba2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8003baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <CO_SDOserver_init+0x1be>
 8003bb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8003bb6:	f06f 030b 	mvn.w	r3, #11
 8003bba:	e029      	b.n	8003c10 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	e026      	b.n	8003c10 <CO_SDOserver_init+0x218>
        ) {
 8003bc2:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003bd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003bde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf2:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8003bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf8:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003bfc:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003bfe:	9201      	str	r2, [sp, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4603      	mov	r3, r0
 8003c04:	460a      	mov	r2, r1
 8003c06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd77 	bl	80036fc <CO_SDOserver_init_canRxTx>
 8003c0e:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08001871 	.word	0x08001871
 8003c1c:	080037d5 	.word	0x080037d5

08003c20 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b08d      	sub	sp, #52	; 0x34
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	460b      	mov	r3, r1
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07b      	beq.n	8003d3e <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00f      	beq.n	8003c7a <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d901      	bls.n	8003c6a <validateAndWriteToOD+0x4a>
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003c68:	e000      	b.n	8003c6c <validateAndWriteToOD+0x4c>
 8003c6a:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	751a      	strb	r2, [r3, #20]
            return false;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e0df      	b.n	8003e3a <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da3c      	bge.n	8003d06 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <validateAndWriteToOD+0x7c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d934      	bls.n	8003d06 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d82e      	bhi.n	8003d06 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <validateAndWriteToOD+0xba>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	621a      	str	r2, [r3, #32]
 8003d04:	e02d      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	621a      	str	r2, [r3, #32]
 8003d14:	e025      	b.n	8003d62 <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d020      	beq.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d201      	bcs.n	8003d2e <validateAndWriteToOD+0x10e>
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003d2c:	e000      	b.n	8003d30 <validateAndWriteToOD+0x110>
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	751a      	strb	r2, [r3, #20]
            return false;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e07d      	b.n	8003e3a <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <validateAndWriteToOD+0x142>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d907      	bls.n	8003d62 <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003d56:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	751a      	strb	r2, [r3, #20]
            return false;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e06b      	b.n	8003e3a <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3318      	adds	r3, #24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fc33 	bl	80035d6 <OD_mappable>
 8003d70:	6278      	str	r0, [r7, #36]	; 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <validateAndWriteToOD+0x16a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7c:	f3ef 8210 	mrs	r2, PRIMASK
 8003d80:	61fa      	str	r2, [r7, #28]
  return(result);
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003d86:	b672      	cpsid	i
}
 8003d88:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0018 	add.w	r0, r3, #24
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	47a0      	blx	r4
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <validateAndWriteToOD+0x1a2>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003dca:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d011      	beq.n	8003df6 <validateAndWriteToOD+0x1d6>
 8003dd2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d00c      	beq.n	8003df6 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003ddc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd ff65 	bl	8001cb0 <OD_getSDOabCode>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	751a      	strb	r2, [r3, #20]
        return false;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e021      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <validateAndWriteToOD+0x1f8>
 8003dfe:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d107      	bne.n	8003e18 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a0f      	ldr	r2, [pc, #60]	; (8003e48 <validateAndWriteToOD+0x228>)
 8003e0c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	751a      	strb	r2, [r3, #20]
        return false;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e010      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <validateAndWriteToOD+0x218>
 8003e20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <validateAndWriteToOD+0x224>)
 8003e2c:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	751a      	strb	r2, [r3, #20]
        return false;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <validateAndWriteToOD+0x21a>
    }

    return true;
 8003e38:	2301      	movs	r3, #1
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3734      	adds	r7, #52	; 0x34
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd90      	pop	{r4, r7, pc}
 8003e42:	bf00      	nop
 8003e44:	06070012 	.word	0x06070012
 8003e48:	06070013 	.word	0x06070013

08003e4c <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b08f      	sub	sp, #60	; 0x3c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80b1 	bne.w	8003fd6 <readFromOd+0x18a>
 8003e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f080 80ac 	bcs.w	8003fd6 <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e90:	4413      	add	r3, r2
 8003e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e94:	4619      	mov	r1, r3
 8003e96:	f009 ff25 	bl	800dce4 <memmove>
        SDO->bufOffsetRd = 0;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	f1c3 0320 	rsb	r3, r3, #32
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	4413      	add	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3318      	adds	r3, #24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fb85 	bl	80035d6 <OD_mappable>
 8003ecc:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <readFromOd+0x9a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed8:	f3ef 8210 	mrs	r2, PRIMASK
 8003edc:	61fa      	str	r2, [r7, #28]
  return(result);
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee2:	b672      	cpsid	i
}
 8003ee4:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f103 0018 	add.w	r0, r3, #24
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ef8:	47a0      	blx	r4
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <readFromOd+0xca>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8003f16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d011      	beq.n	8003f42 <readFromOd+0xf6>
 8003f1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d00c      	beq.n	8003f42 <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003f28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd febf 	bl	8001cb0 <OD_getSDOabCode>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	751a      	strb	r2, [r3, #20]
            return false;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e04a      	b.n	8003fd8 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d022      	beq.n	8003f8e <readFromOd+0x142>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	da1c      	bge.n	8003f8e <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8003f5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f60:	f7fc f936 	bl	80001d0 <strlen>
 8003f64:	6338      	str	r0, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <readFromOd+0x124>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d20a      	bcs.n	8003f8e <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <readFromOd+0x162>
 8003fa4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d110      	bne.n	8003fd0 <readFromOd+0x184>
            SDO->finished = false;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d90a      	bls.n	8003fd6 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <readFromOd+0x194>)
 8003fc4:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	751a      	strb	r2, [r3, #20]
                return false;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e003      	b.n	8003fd8 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	373c      	adds	r7, #60	; 0x3c
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	06040047 	.word	0x06040047

08003fe4 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b09b      	sub	sp, #108	; 0x6c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d103      	bne.n	8004000 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003ff8:	f06f 0301 	mvn.w	r3, #1
 8003ffc:	f000 bcfa 	b.w	80049f4 <CO_SDOserver_process+0xa10>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <CO_SDOserver_process+0x56>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	7d1b      	ldrb	r3, [r3, #20]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <CO_SDOserver_process+0x56>
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004038:	e2d1      	b.n	80045de <CO_SDOserver_process+0x5fa>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <CO_SDOserver_process+0x64>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800405a:	e2c0      	b.n	80045de <CO_SDOserver_process+0x5fa>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 82bd 	beq.w	80045de <CO_SDOserver_process+0x5fa>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	7d1b      	ldrb	r3, [r3, #20]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	f040 80ce 	bne.w	800420c <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004070:	2300      	movs	r3, #0
 8004072:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	2b20      	cmp	r3, #32
 8004080:	d103      	bne.n	800408a <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2211      	movs	r2, #17
 8004086:	751a      	strb	r2, [r3, #20]
 8004088:	e00f      	b.n	80040aa <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d105      	bne.n	80040a0 <CO_SDOserver_process+0xbc>
                upload = true;
 8004094:	2301      	movs	r3, #1
 8004096:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2221      	movs	r2, #33	; 0x21
 800409c:	751a      	strb	r2, [r3, #20]
 800409e:	e004      	b.n	80040aa <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 80040a0:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <CO_SDOserver_process+0x354>)
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d162      	bne.n	8004176 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b21b      	sxth	r3, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7fd fc96 	bl	8001a14 <OD_find>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f103 0218 	add.w	r2, r3, #24
 80040f4:	2300      	movs	r3, #0
 80040f6:	f7fd fce9 	bl	8001acc <OD_getSub>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004100:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004108:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800410c:	4618      	mov	r0, r3
 800410e:	f7fd fdcf 	bl	8001cb0 <OD_getSDOabCode>
 8004112:	4603      	mov	r3, r0
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	751a      	strb	r2, [r3, #20]
 800411c:	e02b      	b.n	8004176 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 800412c:	4b83      	ldr	r3, [pc, #524]	; (800433c <CO_SDOserver_process+0x358>)
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	751a      	strb	r2, [r3, #20]
 8004136:	e01e      	b.n	8004176 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 800414c:	4b7c      	ldr	r3, [pc, #496]	; (8004340 <CO_SDOserver_process+0x35c>)
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	751a      	strb	r2, [r3, #20]
 8004156:	e00e      	b.n	8004176 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 800416c:	4b75      	ldr	r3, [pc, #468]	; (8004344 <CO_SDOserver_process+0x360>)
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004178:	2b00      	cmp	r3, #0
 800417a:	d047      	beq.n	800420c <CO_SDOserver_process+0x228>
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d144      	bne.n	800420c <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 80041a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041a6:	2300      	movs	r3, #0
 80041a8:	2207      	movs	r2, #7
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff fe4e 	bl	8003e4c <readFromOd>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02a      	beq.n	800420c <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1a      	ldr	r2, [r3, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	665a      	str	r2, [r3, #100]	; 0x64
 80041d8:	e018      	b.n	800420c <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d011      	beq.n	800420c <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80041e8:	4b57      	ldr	r3, [pc, #348]	; (8004348 <CO_SDOserver_process+0x364>)
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	751a      	strb	r2, [r3, #20]
 80041f2:	e00b      	b.n	800420c <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fa:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db02      	blt.n	8004206 <CO_SDOserver_process+0x222>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	e000      	b.n	8004208 <CO_SDOserver_process+0x224>
 8004206:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	7d1b      	ldrb	r3, [r3, #20]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 81db 	beq.w	80045ce <CO_SDOserver_process+0x5ea>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	7d1b      	ldrb	r3, [r3, #20]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	f000 81d5 	beq.w	80045ce <CO_SDOserver_process+0x5ea>
        switch (SDO->state) {
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	7d1b      	ldrb	r3, [r3, #20]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	3b11      	subs	r3, #17
 800422c:	2b12      	cmp	r3, #18
 800422e:	f200 81be 	bhi.w	80045ae <CO_SDOserver_process+0x5ca>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <CO_SDOserver_process+0x254>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004285 	.word	0x08004285
 800423c:	080045af 	.word	0x080045af
 8004240:	08004467 	.word	0x08004467
 8004244:	080045af 	.word	0x080045af
 8004248:	080045af 	.word	0x080045af
 800424c:	080045af 	.word	0x080045af
 8004250:	080045af 	.word	0x080045af
 8004254:	080045af 	.word	0x080045af
 8004258:	080045af 	.word	0x080045af
 800425c:	080045af 	.word	0x080045af
 8004260:	080045af 	.word	0x080045af
 8004264:	080045af 	.word	0x080045af
 8004268:	080045af 	.word	0x080045af
 800426c:	080045af 	.word	0x080045af
 8004270:	080045af 	.word	0x080045af
 8004274:	080045af 	.word	0x080045af
 8004278:	0800455d 	.word	0x0800455d
 800427c:	080045af 	.word	0x080045af
 8004280:	08004565 	.word	0x08004565
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80af 	beq.w	80043f2 <CO_SDOserver_process+0x40e>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 800429a:	2304      	movs	r3, #4
 800429c:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b2:	089b      	lsrs	r3, r3, #2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	e007      	b.n	80042d2 <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 80042c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <CO_SDOserver_process+0x2ee>
 80042c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d801      	bhi.n	80042d2 <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 80042ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	2300      	movs	r3, #0
 80042d8:	84bb      	strh	r3, [r7, #36]	; 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80042e0:	f107 0320 	add.w	r3, r7, #32
 80042e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f009 fdf7 	bl	800deda <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	da17      	bge.n	8004328 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <CO_SDOserver_process+0x322>
 80042fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	429a      	cmp	r2, r3
 8004304:	d210      	bcs.n	8004328 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <CO_SDOserver_process+0x334>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <CO_SDOserver_process+0x336>
 8004318:	2302      	movs	r3, #2
 800431a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800431c:	4413      	add	r3, r2
 800431e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004324:	621a      	str	r2, [r3, #32]
                ) {
 8004326:	e021      	b.n	800436c <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10e      	bne.n	800434c <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004332:	621a      	str	r2, [r3, #32]
 8004334:	e01a      	b.n	800436c <CO_SDOserver_process+0x388>
 8004336:	bf00      	nop
 8004338:	05040001 	.word	0x05040001
 800433c:	06010000 	.word	0x06010000
 8004340:	06010001 	.word	0x06010001
 8004344:	06010002 	.word	0x06010002
 8004348:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 800434c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	429a      	cmp	r2, r3
 8004352:	d00b      	beq.n	800436c <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004358:	429a      	cmp	r2, r3
 800435a:	d901      	bls.n	8004360 <CO_SDOserver_process+0x37c>
 800435c:	4b97      	ldr	r3, [pc, #604]	; (80045bc <CO_SDOserver_process+0x5d8>)
 800435e:	e000      	b.n	8004362 <CO_SDOserver_process+0x37e>
 8004360:	4b97      	ldr	r3, [pc, #604]	; (80045c0 <CO_SDOserver_process+0x5dc>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	751a      	strb	r2, [r3, #20]
                    break;
 800436a:	e130      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3318      	adds	r3, #24
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f92e 	bl	80035d6 <OD_mappable>
 800437a:	63f8      	str	r0, [r7, #60]	; 0x3c

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <CO_SDOserver_process+0x3b0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004386:	f3ef 8210 	mrs	r2, PRIMASK
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004390:	b672      	cpsid	i
}
 8004392:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f103 0018 	add.w	r0, r3, #24
 800439e:	f107 031c 	add.w	r3, r7, #28
 80043a2:	f107 0120 	add.w	r1, r7, #32
 80043a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a8:	47a0      	blx	r4
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <CO_SDOserver_process+0x3e2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	bf00      	nop

                if (odRet != ODR_OK) {
 80043c6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <CO_SDOserver_process+0x400>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80043ce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc6c 	bl	8001cb0 <OD_getSDOabCode>
 80043d8:	4603      	mov	r3, r0
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	751a      	strb	r2, [r3, #20]
                    break;
 80043e2:	e0f4      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2212      	movs	r2, #18
 80043e8:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 80043f0:	e0ed      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                if (SDO->CANrxData[0] & 0x01) {
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d028      	beq.n	8004452 <CO_SDOserver_process+0x46e>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3340      	adds	r3, #64	; 0x40
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01e      	beq.n	8004458 <CO_SDOserver_process+0x474>
                        if (SDO->sizeInd > sizeInOd) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004420:	429a      	cmp	r2, r3
 8004422:	d205      	bcs.n	8004430 <CO_SDOserver_process+0x44c>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <CO_SDOserver_process+0x5d8>)
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	751a      	strb	r2, [r3, #20]
                            break;
 800442e:	e0ce      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                        else if (SDO->sizeInd < sizeInOd
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004436:	429a      	cmp	r2, r3
 8004438:	d90e      	bls.n	8004458 <CO_SDOserver_process+0x474>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004440:	b25b      	sxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	db08      	blt.n	8004458 <CO_SDOserver_process+0x474>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004446:	4b5e      	ldr	r3, [pc, #376]	; (80045c0 <CO_SDOserver_process+0x5dc>)
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	751a      	strb	r2, [r3, #20]
                            break;
 8004450:	e0bd      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                    SDO->sizeInd = 0;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2212      	movs	r2, #18
 800445c:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004464:	e0b3      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d16d      	bne.n	8004550 <CO_SDOserver_process+0x56c>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80044a2:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d005      	beq.n	80044b6 <CO_SDOserver_process+0x4d2>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 80044aa:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <CO_SDOserver_process+0x5e0>)
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	751a      	strb	r2, [r3, #20]
                    break;
 80044b4:	e08b      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044d4:	18d0      	adds	r0, r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	333d      	adds	r3, #61	; 0x3d
 80044da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044dc:	4619      	mov	r1, r3
 80044de:	f009 fcfc 	bl	800deda <memcpy>
                SDO->bufOffsetWr += count;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	441a      	add	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <CO_SDOserver_process+0x53a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	429a      	cmp	r2, r3
 8004510:	d905      	bls.n	800451e <CO_SDOserver_process+0x53a>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <CO_SDOserver_process+0x5d8>)
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	751a      	strb	r2, [r3, #20]
                    break;
 800451c:	e057      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <CO_SDOserver_process+0x550>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800452c:	f1c3 0320 	rsb	r3, r3, #32
 8004530:	2b08      	cmp	r3, #8
 8004532:	d809      	bhi.n	8004548 <CO_SDOserver_process+0x564>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004534:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fb6f 	bl	8003c20 <validateAndWriteToOD>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d041      	beq.n	80045cc <CO_SDOserver_process+0x5e8>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2214      	movs	r2, #20
 800454c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 800454e:	e03e      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	751a      	strb	r2, [r3, #20]
            break;
 800455a:	e038      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	; 0x22
 8004560:	751a      	strb	r2, [r3, #20]
            break;
 8004562:	e034      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800456e:	2b60      	cmp	r3, #96	; 0x60
 8004570:	d117      	bne.n	80045a2 <CO_SDOserver_process+0x5be>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004586:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800458a:	429a      	cmp	r2, r3
 800458c:	d005      	beq.n	800459a <CO_SDOserver_process+0x5b6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <CO_SDOserver_process+0x5e0>)
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	751a      	strb	r2, [r3, #20]
                    break;
 8004598:	e019      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2224      	movs	r2, #36	; 0x24
 800459e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80045a0:	e015      	b.n	80045ce <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	751a      	strb	r2, [r3, #20]
            break;
 80045ac:	e00f      	b.n	80045ce <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <CO_SDOserver_process+0x5e4>)
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	751a      	strb	r2, [r3, #20]
 80045b8:	e009      	b.n	80045ce <CO_SDOserver_process+0x5ea>
 80045ba:	bf00      	nop
 80045bc:	06070012 	.word	0x06070012
 80045c0:	06070013 	.word	0x06070013
 80045c4:	05030000 	.word	0x05030000
 80045c8:	05040001 	.word	0x05040001
                        break;
 80045cc:	bf00      	nop
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 80045de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d11e      	bne.n	8004624 <CO_SDOserver_process+0x640>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d205      	bcs.n	80045fe <CO_SDOserver_process+0x61a>
            SDO->timeoutTimer += timeDifference_us;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	441a      	add	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004606:	429a      	cmp	r2, r3
 8004608:	d304      	bcc.n	8004614 <CO_SDOserver_process+0x630>
            abortCode = CO_SDO_AB_TIMEOUT;
 800460a:	4b9c      	ldr	r3, [pc, #624]	; (800487c <CO_SDOserver_process+0x898>)
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <CO_SDOserver_process+0x640>
            ret = CO_SDO_RT_transmittBufferFull;
 800461e:	2304      	movs	r3, #4
 8004620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004624:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004628:	2b01      	cmp	r3, #1
 800462a:	f040 81ab 	bne.w	8004984 <CO_SDOserver_process+0x9a0>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	3305      	adds	r3, #5
 8004634:	2208      	movs	r2, #8
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f009 fb6d 	bl	800dd18 <memset>

        switch (SDO->state) {
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	7d1b      	ldrb	r3, [r3, #20]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	3b12      	subs	r3, #18
 8004646:	2b12      	cmp	r3, #18
 8004648:	f200 8199 	bhi.w	800497e <CO_SDOserver_process+0x99a>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <CO_SDOserver_process+0x670>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	080046a1 	.word	0x080046a1
 8004658:	0800497f 	.word	0x0800497f
 800465c:	08004723 	.word	0x08004723
 8004660:	0800497f 	.word	0x0800497f
 8004664:	0800497f 	.word	0x0800497f
 8004668:	0800497f 	.word	0x0800497f
 800466c:	0800497f 	.word	0x0800497f
 8004670:	0800497f 	.word	0x0800497f
 8004674:	0800497f 	.word	0x0800497f
 8004678:	0800497f 	.word	0x0800497f
 800467c:	0800497f 	.word	0x0800497f
 8004680:	0800497f 	.word	0x0800497f
 8004684:	0800497f 	.word	0x0800497f
 8004688:	0800497f 	.word	0x0800497f
 800468c:	0800497f 	.word	0x0800497f
 8004690:	0800497f 	.word	0x0800497f
 8004694:	0800477f 	.word	0x0800477f
 8004698:	0800497f 	.word	0x0800497f
 800469c:	0800484d 	.word	0x0800484d
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2260      	movs	r2, #96	; 0x60
 80046a6:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80046ce:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f002 fee1 	bl	80074a8 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <CO_SDOserver_process+0x718>
                SDO->state = CO_SDO_ST_IDLE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 80046fa:	e143      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                SDO->toggle = 0x00;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2213      	movs	r2, #19
 800471e:	751a      	strb	r2, [r3, #20]
            break;
 8004720:	e130      	b.n	8004984 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f042 0220 	orr.w	r2, r2, #32
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <CO_SDOserver_process+0x75e>
 800473e:	2210      	movs	r2, #16
 8004740:	e000      	b.n	8004744 <CO_SDOserver_process+0x760>
 8004742:	2200      	movs	r2, #0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f002 fea4 	bl	80074a8 <CO_CANsend>
            if (SDO->finished) {
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <CO_SDOserver_process+0x792>
                SDO->state = CO_SDO_ST_IDLE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800476e:	2300      	movs	r3, #0
 8004770:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8004774:	e106      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2213      	movs	r2, #19
 800477a:	751a      	strb	r2, [r3, #20]
            break;
 800477c:	e102      	b.n	8004984 <CO_SDOserver_process+0x9a0>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004782:	2b00      	cmp	r3, #0
 8004784:	d024      	beq.n	80047d0 <CO_SDOserver_process+0x7ec>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478a:	2b04      	cmp	r3, #4
 800478c:	d820      	bhi.n	80047d0 <CO_SDOserver_process+0x7ec>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f1c3 0304 	rsb	r3, r3, #4
 8004798:	b2db      	uxtb	r3, r3
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f103 0009 	add.w	r0, r3, #9
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047bc:	461a      	mov	r2, r3
 80047be:	f009 fb8c 	bl	800deda <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047ce:	e020      	b.n	8004812 <CO_SDOserver_process+0x82e>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <CO_SDOserver_process+0x812>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2241      	movs	r2, #65	; 0x41
 80047e8:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	3309      	adds	r3, #9
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	e003      	b.n	80047fe <CO_SDOserver_process+0x81a>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2223      	movs	r2, #35	; 0x23
 8004810:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004838:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f002 fe2f 	bl	80074a8 <CO_CANsend>
            break;
 800484a:	e09b      	b.n	8004984 <CO_SDOserver_process+0x9a0>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 800484c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004850:	2300      	movs	r3, #0
 8004852:	2207      	movs	r2, #7
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff faf9 	bl	8003e4c <readFromOd>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8090 	beq.w	8004982 <CO_SDOserver_process+0x99e>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800486c:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <CO_SDOserver_process+0x89c>
 8004878:	2210      	movs	r2, #16
 800487a:	e002      	b.n	8004882 <CO_SDOserver_process+0x89e>
 800487c:	05040000 	.word	0x05040000
 8004880:	2200      	movs	r2, #0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8004898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489a:	2b06      	cmp	r3, #6
 800489c:	d906      	bls.n	80048ac <CO_SDOserver_process+0x8c8>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01b      	beq.n	80048de <CO_SDOserver_process+0x8fa>
 80048a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d118      	bne.n	80048de <CO_SDOserver_process+0x8fa>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	795a      	ldrb	r2, [r3, #5]
 80048b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f1c3 0307 	rsb	r3, r3, #7
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80048dc:	e007      	b.n	80048ee <CO_SDOserver_process+0x90a>
            }
            else {
                SDO->timeoutTimer = 0;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2223      	movs	r2, #35	; 0x23
 80048e8:	751a      	strb	r2, [r3, #20]
                count = 7;
 80048ea:	2307      	movs	r3, #7
 80048ec:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	1d98      	adds	r0, r3, #6
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004900:	4413      	add	r3, r2
 8004902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004904:	4619      	mov	r1, r3
 8004906:	f009 fae8 	bl	800deda <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004912:	441a      	add	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01e      	beq.n	800496c <CO_SDOserver_process+0x988>
                if (SDO->sizeTran > SDO->sizeInd) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004936:	429a      	cmp	r2, r3
 8004938:	d905      	bls.n	8004946 <CO_SDOserver_process+0x962>
                    abortCode = CO_SDO_AB_DATA_LONG;
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <CO_SDOserver_process+0xa18>)
 800493c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	751a      	strb	r2, [r3, #20]
                    break;
 8004944:	e01e      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8004946:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <CO_SDOserver_process+0x988>
                         && SDO->sizeTran < SDO->sizeInd
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004956:	429a      	cmp	r2, r3
 8004958:	d208      	bcs.n	800496c <CO_SDOserver_process+0x988>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <CO_SDOserver_process+0xa1c>)
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	751a      	strb	r2, [r3, #20]
                    break;
 800496a:	e00b      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f002 fd96 	bl	80074a8 <CO_CANsend>
            break;
 800497c:	e002      	b.n	8004984 <CO_SDOserver_process+0x9a0>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <CO_SDOserver_process+0x9a0>
                break;
 8004982:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004984:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004988:	2b01      	cmp	r3, #1
 800498a:	d131      	bne.n	80049f0 <CO_SDOserver_process+0xa0c>
        if (SDO->state == CO_SDO_ST_ABORT) {
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	7d1b      	ldrb	r3, [r3, #20]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12c      	bne.n	80049f0 <CO_SDOserver_process+0xa0c>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80049c8:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	3309      	adds	r3, #9
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f002 fd62 	bl	80074a8 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 80049ea:	23f6      	movs	r3, #246	; 0xf6
 80049ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80049f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	376c      	adds	r7, #108	; 0x6c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	06070012 	.word	0x06070012
 8004a00:	06070013 	.word	0x06070013

08004a04 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <OD_getIndex+0x14>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	e000      	b.n	8004a52 <OD_getIndex+0x16>
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <OD_extension_init>:
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <OD_extension_init+0x14>
 8004a6e:	2305      	movs	r3, #5
 8004a70:	e003      	b.n	8004a7a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <OD_get_u8>:
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af02      	add	r7, sp, #8
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	460b      	mov	r3, r1
 8004a94:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004a96:	7af9      	ldrb	r1, [r7, #11]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7fd f923 	bl	8001cec <OD_get_value>
 8004aa6:	4603      	mov	r3, r0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <OD_get_u32>:
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	460b      	mov	r3, r1
 8004abe:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004ac0:	7af9      	ldrb	r1, [r7, #11]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fd f90e 	bl	8001cec <OD_get_value>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7c9b      	ldrb	r3, [r3, #18]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	749a      	strb	r2, [r3, #18]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7c9a      	ldrb	r2, [r3, #18]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7c5b      	ldrb	r3, [r3, #17]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d902      	bls.n	8004b00 <CO_SYNCsend+0x26>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	7c92      	ldrb	r2, [r2, #18]
 8004b22:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f002 fcba 	bl	80074a8 <CO_CANsend>
 8004b34:	4603      	mov	r3, r0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8004b3e:	b480      	push	{r7}
 8004b40:	b087      	sub	sp, #28
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	7c5b      	ldrb	r3, [r3, #17]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004b64:	2301      	movs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e019      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	721a      	strb	r2, [r3, #8]
 8004b76:	e012      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d109      	bne.n	8004b92 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3305      	adds	r3, #5
 8004b82:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e005      	b.n	8004b9e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b08f      	sub	sp, #60	; 0x3c
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <OD_write_1005+0x2e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	7c5b      	ldrb	r3, [r3, #17]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <OD_write_1005+0x2e>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d102      	bne.n	8004bfa <OD_write_1005+0x2e>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004bfa:	2309      	movs	r3, #9
 8004bfc:	e0a3      	b.n	8004d46 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004c04:	68b8      	ldr	r0, [r7, #8]
 8004c06:	f7ff ff0b 	bl	8004a20 <CO_getUint32>
 8004c0a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c14:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <OD_write_1005+0x184>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d133      	bne.n	8004c9a <OD_write_1005+0xce>
 8004c32:	8bfb      	ldrh	r3, [r7, #30]
 8004c34:	2b7f      	cmp	r3, #127	; 0x7f
 8004c36:	d930      	bls.n	8004c9a <OD_write_1005+0xce>
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3e:	d903      	bls.n	8004c48 <OD_write_1005+0x7c>
 8004c40:	8bfb      	ldrh	r3, [r7, #30]
 8004c42:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004c46:	d928      	bls.n	8004c9a <OD_write_1005+0xce>
 8004c48:	8bfb      	ldrh	r3, [r7, #30]
 8004c4a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004c4e:	d903      	bls.n	8004c58 <OD_write_1005+0x8c>
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c56:	d320      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c58:	8bfb      	ldrh	r3, [r7, #30]
 8004c5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c5e:	d903      	bls.n	8004c68 <OD_write_1005+0x9c>
 8004c60:	8bfb      	ldrh	r3, [r7, #30]
 8004c62:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004c66:	d318      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c68:	8bfb      	ldrh	r3, [r7, #30]
 8004c6a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004c6e:	d303      	bcc.n	8004c78 <OD_write_1005+0xac>
 8004c70:	8bfb      	ldrh	r3, [r7, #30]
 8004c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c76:	d310      	bcc.n	8004c9a <OD_write_1005+0xce>
 8004c78:	8bfb      	ldrh	r3, [r7, #30]
 8004c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7e:	d80c      	bhi.n	8004c9a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <OD_write_1005+0xd2>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <OD_write_1005+0xd2>
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c94:	8bfa      	ldrh	r2, [r7, #30]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d001      	beq.n	8004c9e <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	e053      	b.n	8004d46 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca4:	8bfa      	ldrh	r2, [r7, #30]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d03a      	beq.n	8004d20 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8004cb2:	8bfa      	ldrh	r2, [r7, #30]
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <OD_write_1005+0x188>)
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004cc4:	f002 fb18 	bl	80072f8 <CO_CANrxBufferInit>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8004ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004cd4:	2309      	movs	r3, #9
 8004cd6:	e036      	b.n	8004d46 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461c      	mov	r4, r3
 8004cf2:	8bfa      	ldrh	r2, [r7, #30]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	9400      	str	r4, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f002 fb5a 	bl	80073b4 <CO_CANtxBufferInit>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2200      	movs	r2, #0
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8004d14:	2309      	movs	r3, #9
 8004d16:	e016      	b.n	8004d46 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	8bfa      	ldrh	r2, [r7, #30]
 8004d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	2200      	movs	r2, #0
 8004d30:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2200      	movs	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fc fdee 	bl	8001920 <OD_writeOriginal>
 8004d44:	4603      	mov	r3, r0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	372c      	adds	r7, #44	; 0x2c
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	bffff800 	.word	0xbffff800
 8004d54:	08004b3f 	.word	0x08004b3f

08004d58 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b089      	sub	sp, #36	; 0x24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <OD_write_1019+0x2e>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	7c5b      	ldrb	r3, [r3, #17]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <OD_write_1019+0x2e>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <OD_write_1019+0x2e>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8004d86:	2309      	movs	r3, #9
 8004d88:	e041      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f7ff fe37 	bl	8004a04 <CO_getUint8>
 8004d96:	4603      	mov	r3, r0
 8004d98:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d002      	beq.n	8004da6 <OD_write_1019+0x4e>
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2bf0      	cmp	r3, #240	; 0xf0
 8004da4:	d901      	bls.n	8004daa <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004da6:	230f      	movs	r3, #15
 8004da8:	e031      	b.n	8004e0e <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004db4:	2317      	movs	r3, #23
 8004db6:	e02a      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461c      	mov	r4, r3
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	9400      	str	r4, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f002 fae9 	bl	80073b4 <CO_CANtxBufferInit>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8004df6:	2309      	movs	r3, #9
 8004df8:	e009      	b.n	8004e0e <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	7cfa      	ldrb	r2, [r7, #19]
 8004dfe:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7fc fd8a 	bl	8001920 <OD_writeOriginal>
 8004e0c:	4603      	mov	r3, r0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd90      	pop	{r4, r7, pc}
	...

08004e18 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <CO_SYNC_init+0x32>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	e0fe      	b.n	800504e <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004e50:	2260      	movs	r2, #96	; 0x60
 8004e52:	2100      	movs	r1, #0
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f008 ff5f 	bl	800dd18 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004e5e:	f107 0218 	add.w	r2, r7, #24
 8004e62:	2301      	movs	r3, #1
 8004e64:	2100      	movs	r1, #0
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe22 	bl	8004ab0 <OD_get_u32>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <CO_SYNC_init+0x74>
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fddc 	bl	8004a3c <OD_getIndex>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004e8c:	f06f 030b 	mvn.w	r3, #11
 8004e90:	e0dd      	b.n	800504e <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a6f      	ldr	r2, [pc, #444]	; (8005058 <CO_SYNC_init+0x240>)
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	; (800505c <CO_SYNC_init+0x244>)
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3334      	adds	r3, #52	; 0x34
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fdd7 	bl	8004a5e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6838      	ldr	r0, [r7, #0]
 8004eb8:	f7fc ff7f 	bl	8001dba <OD_getPtr>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <CO_SYNC_init+0xc6>
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7ff fdb3 	bl	8004a3c <OD_getIndex>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004edc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004ede:	f06f 030b 	mvn.w	r3, #11
 8004ee2:	e0b4      	b.n	800504e <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eec:	f7fc ff65 	bl	8001dba <OD_getPtr>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <CO_SYNC_init+0x106>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10c      	bne.n	8004f1e <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <CO_SYNC_init+0x100>
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0c:	f7ff fd96 	bl	8004a3c <OD_getIndex>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004f18:	f06f 030b 	mvn.w	r3, #11
 8004f1c:	e097      	b.n	800504e <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d033      	beq.n	8004f90 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 8004f28:	f107 0217 	add.w	r2, r7, #23
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2100      	movs	r1, #0
 8004f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f32:	f7ff fda8 	bl	8004a86 <OD_get_u8>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8004f3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <CO_SYNC_init+0x13e>
 8004f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f4a:	f7ff fd77 	bl	8004a3c <OD_getIndex>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004f56:	f06f 030b 	mvn.w	r3, #11
 8004f5a:	e078      	b.n	800504e <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <CO_SYNC_init+0x150>
 8004f62:	2302      	movs	r3, #2
 8004f64:	75fb      	strb	r3, [r7, #23]
 8004f66:	e004      	b.n	8004f72 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2bf0      	cmp	r3, #240	; 0xf0
 8004f6c:	d901      	bls.n	8004f72 <CO_SYNC_init+0x15a>
 8004f6e:	23f0      	movs	r3, #240	; 0xf0
 8004f70:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a37      	ldr	r2, [pc, #220]	; (8005058 <CO_SYNC_init+0x240>)
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a37      	ldr	r2, [pc, #220]	; (8005060 <CO_SYNC_init+0x248>)
 8004f82:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3350      	adds	r3, #80	; 0x50
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f8c:	f7ff fd67 	bl	8004a5e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004f90:	7dfa      	ldrb	r2, [r7, #23]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fcc:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd2:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004fd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8004fe8:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <CO_SYNC_init+0x24c>)
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ffa:	f002 f97d 	bl	80072f8 <CO_CANrxBufferInit>
 8004ffe:	4603      	mov	r3, r0
 8005000:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8005002:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <CO_SYNC_init+0x1f8>
        return ret;
 800500a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800500e:	e01e      	b.n	800504e <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005018:	b29a      	uxth	r2, r3
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	4618      	mov	r0, r3
 8005028:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800502a:	2300      	movs	r3, #0
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	9000      	str	r0, [sp, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005034:	f002 f9be 	bl	80073b4 <CO_CANtxBufferInit>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e000      	b.n	800504e <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	08001871 	.word	0x08001871
 800505c:	08004bcd 	.word	0x08004bcd
 8005060:	08004d59 	.word	0x08004d59
 8005064:	08004b3f 	.word	0x08004b3f

08005068 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005076:	2300      	movs	r3, #0
 8005078:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8088 	beq.w	8005192 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d902      	bls.n	800509c <CO_SYNC_process+0x34>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 80050aa:	2301      	movs	r3, #1
 80050ac:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <CO_SYNC_process+0x5c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	e000      	b.n	80050c6 <CO_SYNC_process+0x5e>
 80050c4:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80050c6:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d031      	beq.n	8005132 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d828      	bhi.n	8005132 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fcf8 	bl	8004ada <CO_SYNCsend>
 80050ea:	e022      	b.n	8005132 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	7c1b      	ldrb	r3, [r3, #16]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d11e      	bne.n	8005132 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d202      	bcs.n	800510c <CO_SYNC_process+0xa4>
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d20d      	bcs.n	8005132 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005124:	2218      	movs	r2, #24
 8005126:	2101      	movs	r1, #1
 8005128:	f7fb fd90 	bl	8000c4c <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2202      	movs	r2, #2
 8005130:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d015      	beq.n	8005166 <CO_SYNC_process+0xfe>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d909      	bls.n	8005166 <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800515a:	2302      	movs	r3, #2
 800515c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	615a      	str	r2, [r3, #20]
 8005164:	e002      	b.n	800516c <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	7a1b      	ldrb	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01a      	beq.n	80051aa <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	7a1b      	ldrb	r3, [r3, #8]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	f248 2340 	movw	r3, #33344	; 0x8240
 8005182:	2219      	movs	r2, #25
 8005184:	2101      	movs	r1, #1
 8005186:	f7fb fd61 	bl	8000c4c <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	721a      	strb	r2, [r3, #8]
 8005190:	e00b      	b.n	80051aa <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	7c1b      	ldrb	r3, [r3, #16]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d108      	bne.n	80051ca <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	2218      	movs	r2, #24
 80051c4:	2100      	movs	r1, #0
 80051c6:	f7fb fd41 	bl	8000c4c <CO_error>
        }
        SYNC->timeoutError = 1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80051e8:	81fb      	strh	r3, [r7, #14]
 80051ea:	89fb      	ldrh	r3, [r7, #14]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <OD_getIndex+0x14>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	e000      	b.n	800522a <OD_getIndex+0x16>
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <OD_extension_init>:
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <OD_extension_init+0x14>
 8005246:	2305      	movs	r3, #5
 8005248:	e003      	b.n	8005252 <OD_extension_init+0x1c>
    entry->extension = extension;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <OD_get_u32>:
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	460b      	mov	r3, r1
 800526c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800526e:	7af9      	ldrb	r1, [r7, #11]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2304      	movs	r3, #4
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7fc fd37 	bl	8001cec <OD_get_value>
 800527e:	4603      	mov	r3, r0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	791b      	ldrb	r3, [r3, #4]
 800529a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3305      	adds	r3, #5
 80052a0:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d108      	bne.n	80052ba <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2206      	movs	r2, #6
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f008 fe13 	bl	800deda <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2201      	movs	r2, #1
 80052b8:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00c      	beq.n	80052f2 <OD_write_1012+0x2e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	7c5b      	ldrb	r3, [r3, #17]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <OD_write_1012+0x2e>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d102      	bne.n	80052f2 <OD_write_1012+0x2e>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80052f2:	2309      	movs	r3, #9
 80052f4:	e051      	b.n	800539a <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80052fc:	68b8      	ldr	r0, [r7, #8]
 80052fe:	f7ff ff7b 	bl	80051f8 <CO_getUint32>
 8005302:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800530c:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <OD_write_1012+0xe0>)
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d126      	bne.n	8005366 <OD_write_1012+0xa2>
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d923      	bls.n	8005366 <OD_write_1012+0xa2>
 800531e:	8afb      	ldrh	r3, [r7, #22]
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d903      	bls.n	800532e <OD_write_1012+0x6a>
 8005326:	8afb      	ldrh	r3, [r7, #22]
 8005328:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800532c:	d91b      	bls.n	8005366 <OD_write_1012+0xa2>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005334:	d903      	bls.n	800533e <OD_write_1012+0x7a>
 8005336:	8afb      	ldrh	r3, [r7, #22]
 8005338:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800533c:	d313      	bcc.n	8005366 <OD_write_1012+0xa2>
 800533e:	8afb      	ldrh	r3, [r7, #22]
 8005340:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005344:	d903      	bls.n	800534e <OD_write_1012+0x8a>
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800534c:	d30b      	bcc.n	8005366 <OD_write_1012+0xa2>
 800534e:	8afb      	ldrh	r3, [r7, #22]
 8005350:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005354:	d303      	bcc.n	800535e <OD_write_1012+0x9a>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535c:	d303      	bcc.n	8005366 <OD_write_1012+0xa2>
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005364:	d901      	bls.n	800536a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005366:	230f      	movs	r3, #15
 8005368:	e017      	b.n	800539a <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	0fdb      	lsrs	r3, r3, #31
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7fc fac4 	bl	8001920 <OD_writeOriginal>
 8005398:	4603      	mov	r3, r0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	3ffff800 	.word	0x3ffff800

080053a8 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af04      	add	r7, sp, #16
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <CO_TIME_init+0x20>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <CO_TIME_init+0x20>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	e061      	b.n	8005492 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 80053ce:	222c      	movs	r2, #44	; 0x2c
 80053d0:	2100      	movs	r1, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f008 fca0 	bl	800dd18 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80053d8:	f107 0214 	add.w	r2, r7, #20
 80053dc:	2301      	movs	r3, #1
 80053de:	2100      	movs	r1, #0
 80053e0:	68b8      	ldr	r0, [r7, #8]
 80053e2:	f7ff ff3c 	bl	800525e <OD_get_u32>
 80053e6:	4603      	mov	r3, r0
 80053e8:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80053ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <CO_TIME_init+0x5e>
 80053f8:	68b8      	ldr	r0, [r7, #8]
 80053fa:	f7ff ff0b 	bl	8005214 <OD_getIndex>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005406:	f06f 030b 	mvn.w	r3, #11
 800540a:	e042      	b.n	8005492 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <CO_TIME_init+0xf4>)
 8005416:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <CO_TIME_init+0xf8>)
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	331c      	adds	r3, #28
 8005422:	4619      	mov	r1, r3
 8005424:	68b8      	ldr	r0, [r7, #8]
 8005426:	f7ff ff06 	bl	8005236 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005432:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	0fdb      	lsrs	r3, r3, #31
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d015      	beq.n	8005490 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005464:	8bba      	ldrh	r2, [r7, #28]
 8005466:	8879      	ldrh	r1, [r7, #2]
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <CO_TIME_init+0xfc>)
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 ff3d 	bl	80072f8 <CO_CANrxBufferInit>
 800547e:	4603      	mov	r3, r0
 8005480:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005482:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <CO_TIME_init+0xe8>
            return ret;
 800548a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800548e:	e000      	b.n	8005492 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	08001871 	.word	0x08001871
 80054a0:	080052c5 	.word	0x080052c5
 80054a4:	08005289 	.word	0x08005289

080054a8 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80054b4:	2300      	movs	r3, #0
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d024      	beq.n	8005508 <CO_TIME_process+0x60>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01f      	beq.n	800550e <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fe91 	bl	80051f8 <CO_getUint32>
 80054d6:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3304      	adds	r3, #4
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fe7c 	bl	80051da <CO_getUint16>
 80054e2:	4603      	mov	r3, r0
 80054e4:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8bfa      	ldrh	r2, [r7, #30]
 80054f4:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80054fc:	2301      	movs	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005506:	e002      	b.n	800550e <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d132      	bne.n	800557e <CO_TIME_process+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d02f      	beq.n	800557e <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	89db      	ldrh	r3, [r3, #14]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4a16      	ldr	r2, [pc, #88]	; (8005588 <CO_TIME_process+0xe0>)
 800552e:	fba2 2303 	umull	r2, r3, r2, r3
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <CO_TIME_process+0xe0>)
 800553a:	fba3 1302 	umull	r1, r3, r3, r2
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <CO_TIME_process+0xe4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d90b      	bls.n	800557e <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <CO_TIME_process+0xe8>)
 800556c:	4413      	add	r3, r2
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	899b      	ldrh	r3, [r3, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	10624dd3 	.word	0x10624dd3
 800558c:	05265bff 	.word	0x05265bff
 8005590:	fad9a400 	.word	0xfad9a400

08005594 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d102      	bne.n	80055ac <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	e006      	b.n	80055ba <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80055ac:	220c      	movs	r2, #12
 80055ae:	2100      	movs	r1, #0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f008 fbb1 	bl	800dd18 <memset>

    return ret;
 80055b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	4613      	mov	r3, r2
 80055d2:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	441a      	add	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 80055ec:	e112      	b.n	8005814 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	7a5b      	ldrb	r3, [r3, #9]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	613b      	str	r3, [r7, #16]

        tick = true;
 8005602:	2301      	movs	r3, #1
 8005604:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800560e:	3b50      	subs	r3, #80	; 0x50
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	3301      	adds	r3, #1
 800561a:	b2da      	uxtb	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	711a      	strb	r2, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	791b      	ldrb	r3, [r3, #4]
 8005624:	2b03      	cmp	r3, #3
 8005626:	f240 80dd 	bls.w	80057e4 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	77bb      	strb	r3, [r7, #30]
 8005634:	7fbb      	ldrb	r3, [r7, #30]
 8005636:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	7a5b      	ldrb	r3, [r3, #9]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <CO_LEDs_process+0x8a>
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e003      	b.n	8005656 <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 800564e:	7fbb      	ldrb	r3, [r7, #30]
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	3301      	adds	r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	715a      	strb	r2, [r3, #5]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	795b      	ldrb	r3, [r3, #5]
 8005666:	2b06      	cmp	r3, #6
 8005668:	d010      	beq.n	800568c <CO_LEDs_process+0xc8>
 800566a:	2b06      	cmp	r3, #6
 800566c:	dc12      	bgt.n	8005694 <CO_LEDs_process+0xd0>
 800566e:	2b01      	cmp	r3, #1
 8005670:	d002      	beq.n	8005678 <CO_LEDs_process+0xb4>
 8005672:	2b02      	cmp	r3, #2
 8005674:	d005      	beq.n	8005682 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8005676:	e00d      	b.n	8005694 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	f043 0304 	orr.w	r3, r3, #4
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e009      	b.n	8005696 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005682:	7fbb      	ldrb	r3, [r7, #30]
 8005684:	f043 0304 	orr.w	r3, r3, #4
 8005688:	77bb      	strb	r3, [r7, #30]
 800568a:	e004      	b.n	8005696 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	715a      	strb	r2, [r3, #5]
 8005692:	e000      	b.n	8005696 <CO_LEDs_process+0xd2>
                default: break;
 8005694:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	799b      	ldrb	r3, [r3, #6]
 800569a:	3301      	adds	r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	719a      	strb	r2, [r3, #6]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	799b      	ldrb	r3, [r3, #6]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d821      	bhi.n	80056f0 <CO_LEDs_process+0x12c>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <CO_LEDs_process+0xf0>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056d5 	.word	0x080056d5
 80056c0:	080056df 	.word	0x080056df
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056e9 	.word	0x080056e9
                case 1: case 3: rd |= CO_LED_flash_2; break;
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e009      	b.n	80056f2 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 80056de:	7fbb      	ldrb	r3, [r7, #30]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	77bb      	strb	r3, [r7, #30]
 80056e6:	e004      	b.n	80056f2 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	719a      	strb	r2, [r3, #6]
 80056ee:	e000      	b.n	80056f2 <CO_LEDs_process+0x12e>
                default: break;
 80056f0:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	79db      	ldrb	r3, [r3, #7]
 80056f6:	3301      	adds	r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	71da      	strb	r2, [r3, #7]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	79db      	ldrb	r3, [r3, #7]
 8005702:	2b0a      	cmp	r3, #10
 8005704:	bf8c      	ite	hi
 8005706:	2201      	movhi	r2, #1
 8005708:	2200      	movls	r2, #0
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	2a00      	cmp	r2, #0
 800570e:	d12c      	bne.n	800576a <CO_LEDs_process+0x1a6>
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	f003 0254 	and.w	r2, r3, #84	; 0x54
 800571a:	2a00      	cmp	r2, #0
 800571c:	bf14      	ite	ne
 800571e:	2201      	movne	r2, #1
 8005720:	2200      	moveq	r2, #0
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	2a00      	cmp	r2, #0
 8005726:	d117      	bne.n	8005758 <CO_LEDs_process+0x194>
 8005728:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 800572c:	2a00      	cmp	r2, #0
 800572e:	bf14      	ite	ne
 8005730:	2201      	movne	r2, #1
 8005732:	2200      	moveq	r2, #0
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	2a00      	cmp	r2, #0
 8005738:	d109      	bne.n	800574e <CO_LEDs_process+0x18a>
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <CO_LEDs_process+0x19e>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 800574c:	e00d      	b.n	800576a <CO_LEDs_process+0x1a6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	f043 0310 	orr.w	r3, r3, #16
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e009      	b.n	800576c <CO_LEDs_process+0x1a8>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005758:	7fbb      	ldrb	r3, [r7, #30]
 800575a:	f043 0310 	orr.w	r3, r3, #16
 800575e:	77bb      	strb	r3, [r7, #30]
 8005760:	e004      	b.n	800576c <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	71da      	strb	r2, [r3, #7]
 8005768:	e000      	b.n	800576c <CO_LEDs_process+0x1a8>
                default: break;
 800576a:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	7a1b      	ldrb	r3, [r3, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	721a      	strb	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	7a1b      	ldrb	r3, [r3, #8]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	bf8c      	ite	hi
 8005780:	2201      	movhi	r2, #1
 8005782:	2200      	movls	r2, #0
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	2a00      	cmp	r2, #0
 8005788:	d137      	bne.n	80057fa <CO_LEDs_process+0x236>
 800578a:	2201      	movs	r2, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 8005794:	2a00      	cmp	r2, #0
 8005796:	bf14      	ite	ne
 8005798:	2201      	movne	r2, #1
 800579a:	2200      	moveq	r2, #0
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d117      	bne.n	80057d2 <CO_LEDs_process+0x20e>
 80057a2:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	bf14      	ite	ne
 80057aa:	2201      	movne	r2, #1
 80057ac:	2200      	moveq	r2, #0
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d109      	bne.n	80057c8 <CO_LEDs_process+0x204>
 80057b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <CO_LEDs_process+0x218>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 80057c6:	e018      	b.n	80057fa <CO_LEDs_process+0x236>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e014      	b.n	80057fc <CO_LEDs_process+0x238>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 80057d2:	7fbb      	ldrb	r3, [r7, #30]
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	77bb      	strb	r3, [r7, #30]
 80057da:	e00f      	b.n	80057fc <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	721a      	strb	r2, [r3, #8]
 80057e2:	e00b      	b.n	80057fc <CO_LEDs_process+0x238>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7a5b      	ldrb	r3, [r3, #9]
 80057e8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80057ec:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	7a9b      	ldrb	r3, [r3, #10]
 80057f2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80057f6:	77bb      	strb	r3, [r7, #30]
 80057f8:	e000      	b.n	80057fc <CO_LEDs_process+0x238>
                default: break;
 80057fa:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <CO_LEDs_process+0x248>
 8005802:	7ffb      	ldrb	r3, [r7, #31]
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e003      	b.n	8005814 <CO_LEDs_process+0x250>
        else               gr |= CO_LED_flicker;
 800580c:	7fbb      	ldrb	r3, [r7, #30]
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800581c:	4293      	cmp	r3, r2
 800581e:	f63f aee6 	bhi.w	80055ee <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d077      	beq.n	8005918 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <CO_LEDs_process+0x270>
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
 8005832:	e032      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <CO_LEDs_process+0x282>
 800583c:	7ffb      	ldrb	r3, [r7, #31]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
 8005844:	e029      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <CO_LEDs_process+0x292>
 800584c:	7ffb      	ldrb	r3, [r7, #31]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	75fb      	strb	r3, [r7, #23]
 8005854:	e021      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <CO_LEDs_process+0x2a2>
 800585c:	7ffb      	ldrb	r3, [r7, #31]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	75fb      	strb	r3, [r7, #23]
 8005864:	e019      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <CO_LEDs_process+0x2b2>
 800586c:	7ffb      	ldrb	r3, [r7, #31]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	75fb      	strb	r3, [r7, #23]
 8005874:	e011      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <CO_LEDs_process+0x2c2>
 800587c:	7ffb      	ldrb	r3, [r7, #31]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	75fb      	strb	r3, [r7, #23]
 8005884:	e009      	b.n	800589a <CO_LEDs_process+0x2d6>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <CO_LEDs_process+0x2d2>
 800588c:	7ffb      	ldrb	r3, [r7, #31]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e001      	b.n	800589a <CO_LEDs_process+0x2d6>
        else                                        rd_co = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <CO_LEDs_process+0x2e6>
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	75bb      	strb	r3, [r7, #22]
 80058a8:	e022      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 80058aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <CO_LEDs_process+0x2f6>
 80058b0:	7fbb      	ldrb	r3, [r7, #30]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	75bb      	strb	r3, [r7, #22]
 80058b8:	e01a      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d104      	bne.n	80058cc <CO_LEDs_process+0x308>
 80058c2:	7fbb      	ldrb	r3, [r7, #30]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	75bb      	strb	r3, [r7, #22]
 80058ca:	e011      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 80058cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d0:	2b7f      	cmp	r3, #127	; 0x7f
 80058d2:	d104      	bne.n	80058de <CO_LEDs_process+0x31a>
 80058d4:	7fbb      	ldrb	r3, [r7, #30]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	75bb      	strb	r3, [r7, #22]
 80058dc:	e008      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d102      	bne.n	80058ec <CO_LEDs_process+0x328>
 80058e6:	2301      	movs	r3, #1
 80058e8:	75bb      	strb	r3, [r7, #22]
 80058ea:	e001      	b.n	80058f0 <CO_LEDs_process+0x32c>
        else                                        gr_co = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <CO_LEDs_process+0x33a>
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058fc:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <CO_LEDs_process+0x348>
 8005904:	7fbb      	ldrb	r3, [r7, #30]
 8005906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800590a:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	7ffa      	ldrb	r2, [r7, #31]
 8005910:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	7fba      	ldrb	r2, [r7, #30]
 8005916:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005918:	bf00      	nop
 800591a:	3724      	adds	r7, #36	; 0x24
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b090      	sub	sp, #64	; 0x40
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	791b      	ldrb	r3, [r3, #4]
 8005936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800593a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800593e:	2b08      	cmp	r3, #8
 8005940:	f040 814c 	bne.w	8005bdc <CO_LSSslave_receive+0x2b8>
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8147 	bne.w	8005bdc <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 800594e:	2300      	movs	r3, #0
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	3305      	adds	r3, #5
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005964:	2b04      	cmp	r3, #4
 8005966:	d12c      	bne.n	80059c2 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <CO_LSSslave_receive+0x56>
 8005974:	2b01      	cmp	r3, #1
 8005976:	d020      	beq.n	80059ba <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005978:	e12a      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	7c1b      	ldrb	r3, [r3, #16]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d110      	bne.n	80059a4 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005988:	2bff      	cmp	r3, #255	; 0xff
 800598a:	d10b      	bne.n	80059a4 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005992:	2bff      	cmp	r3, #255	; 0xff
 8005994:	d006      	beq.n	80059a4 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800599c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80059a0:	2301      	movs	r3, #1
 80059a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	2200      	movs	r2, #0
 80059a8:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	3314      	adds	r3, #20
 80059ae:	2210      	movs	r2, #16
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f008 f9b0 	bl	800dd18 <memset>
                    break;
 80059b8:	e10a      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	2201      	movs	r2, #1
 80059be:	741a      	strb	r2, [r3, #16]
                    break;
 80059c0:	e106      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	7c1b      	ldrb	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 80ee 	bne.w	8005ba8 <CO_LSSslave_receive+0x284>
            switch (cs) {
 80059cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059d0:	3b40      	subs	r3, #64	; 0x40
 80059d2:	2b11      	cmp	r3, #17
 80059d4:	f200 80f7 	bhi.w	8005bc6 <CO_LSSslave_receive+0x2a2>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <CO_LSSslave_receive+0xbc>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a29 	.word	0x08005a29
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a49 	.word	0x08005a49
 80059ec:	08005a59 	.word	0x08005a59
 80059f0:	08005bc7 	.word	0x08005bc7
 80059f4:	08005bc7 	.word	0x08005bc7
 80059f8:	08005bc7 	.word	0x08005bc7
 80059fc:	08005bc7 	.word	0x08005bc7
 8005a00:	08005bc7 	.word	0x08005bc7
 8005a04:	08005bc7 	.word	0x08005bc7
 8005a08:	08005bc7 	.word	0x08005bc7
 8005a0c:	08005bc7 	.word	0x08005bc7
 8005a10:	08005bc7 	.word	0x08005bc7
 8005a14:	08005bc7 	.word	0x08005bc7
 8005a18:	08005bc7 	.word	0x08005bc7
 8005a1c:	08005bc7 	.word	0x08005bc7
 8005a20:	08005bc7 	.word	0x08005bc7
 8005a24:	08005ab5 	.word	0x08005ab5
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	615a      	str	r2, [r3, #20]
                break;
 8005a36:	e0cb      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	619a      	str	r2, [r3, #24]
                break;
 8005a46:	e0c3      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	61da      	str	r2, [r3, #28]
                break;
 8005a56:	e0bb      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	f040 80ab 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	f040 80a4 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f040 809d 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
 8005a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 8096 	bne.w	8005bca <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8005ab2:	e08a      	b.n	8005bca <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2bff      	cmp	r3, #255	; 0xff
 8005abc:	f040 8087 	bne.w	8005bce <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	f040 8081 	bne.w	8005bce <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	795b      	ldrb	r3, [r3, #5]
 8005ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	799b      	ldrb	r3, [r3, #6]
 8005ad8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	79db      	ldrb	r3, [r3, #7]
 8005ae0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8005ae4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ae8:	2b1f      	cmp	r3, #31
 8005aea:	d903      	bls.n	8005af4 <CO_LSSslave_receive+0x1d0>
 8005aec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d16d      	bne.n	8005bd0 <CO_LSSslave_receive+0x2ac>
 8005af4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d869      	bhi.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8005afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d865      	bhi.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	3301      	adds	r3, #1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8005b10:	2300      	movs	r3, #0
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005b14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d10d      	bne.n	8005b38 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f008 f8f1 	bl	800dd18 <memset>
 8005b36:	e02c      	b.n	8005b92 <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d125      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8005b46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b54:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	405a      	eors	r2, r3
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8005b78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <CO_LSSslave_receive+0x26e>
 8005b80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005b84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d202      	bcs.n	8005b92 <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	2201      	movs	r2, #1
 8005b90:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8005ba6:	e012      	b.n	8005bce <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	3349      	adds	r3, #73	; 0x49
 8005bac:	2208      	movs	r2, #8
 8005bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f008 f992 	bl	800deda <memcpy>
            LSSslave->service = cs;
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc4:	e004      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bc6:	bf00      	nop
 8005bc8:	e002      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bca:	bf00      	nop
 8005bcc:	e000      	b.n	8005bd0 <CO_LSSslave_receive+0x2ac>
                break;
 8005bce:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	2201      	movs	r2, #1
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005bdc:	bf00      	nop
 8005bde:	3740      	adds	r7, #64	; 0x40
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d018      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d015      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d012      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da06      	bge.n	8005c34 <CO_LSSslave_init+0x50>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2bff      	cmp	r3, #255	; 0xff
 8005c2c:	d002      	beq.n	8005c34 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e046      	b.n	8005cc2 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005c34:	2274      	movs	r2, #116	; 0x74
 8005c36:	2100      	movs	r1, #0
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f008 f86d 	bl	800dd18 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2210      	movs	r2, #16
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f008 f948 	bl	800deda <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8005c74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c76:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <CO_LSSslave_init+0xe8>)
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005c88:	6a38      	ldr	r0, [r7, #32]
 8005c8a:	f001 fb35 	bl	80072f8 <CO_CANrxBufferInit>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c96:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8005c98:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c9a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ca8:	f001 fb84 	bl	80073b4 <CO_CANtxBufferInit>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005cba:	23ff      	movs	r3, #255	; 0xff
 8005cbc:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08005925 	.word	0x08005925

08005cd0 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8203 	beq.w	80060ec <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	3305      	adds	r3, #5
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f008 f80f 	bl	800dd18 <memset>

        switch (LSSslave->service) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005d00:	3b04      	subs	r3, #4
 8005d02:	2b5a      	cmp	r3, #90	; 0x5a
 8005d04:	f200 81dd 	bhi.w	80060c2 <CO_LSSslave_process+0x3f2>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <CO_LSSslave_process+0x40>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005e7d 	.word	0x08005e7d
 8005d14:	080060c3 	.word	0x080060c3
 8005d18:	080060c3 	.word	0x080060c3
 8005d1c:	080060c3 	.word	0x080060c3
 8005d20:	080060c3 	.word	0x080060c3
 8005d24:	080060c3 	.word	0x080060c3
 8005d28:	080060c3 	.word	0x080060c3
 8005d2c:	080060c3 	.word	0x080060c3
 8005d30:	080060c3 	.word	0x080060c3
 8005d34:	080060c3 	.word	0x080060c3
 8005d38:	080060c3 	.word	0x080060c3
 8005d3c:	080060c3 	.word	0x080060c3
 8005d40:	080060c3 	.word	0x080060c3
 8005d44:	08005e91 	.word	0x08005e91
 8005d48:	080060c3 	.word	0x080060c3
 8005d4c:	08005edf 	.word	0x08005edf
 8005d50:	080060c3 	.word	0x080060c3
 8005d54:	08005f7b 	.word	0x08005f7b
 8005d58:	080060c3 	.word	0x080060c3
 8005d5c:	08005fb9 	.word	0x08005fb9
 8005d60:	080060c3 	.word	0x080060c3
 8005d64:	080060c3 	.word	0x080060c3
 8005d68:	080060c3 	.word	0x080060c3
 8005d6c:	080060c3 	.word	0x080060c3
 8005d70:	080060c3 	.word	0x080060c3
 8005d74:	080060c3 	.word	0x080060c3
 8005d78:	080060c3 	.word	0x080060c3
 8005d7c:	080060c3 	.word	0x080060c3
 8005d80:	080060c3 	.word	0x080060c3
 8005d84:	080060c3 	.word	0x080060c3
 8005d88:	080060c3 	.word	0x080060c3
 8005d8c:	080060c3 	.word	0x080060c3
 8005d90:	080060c3 	.word	0x080060c3
 8005d94:	080060c3 	.word	0x080060c3
 8005d98:	080060c3 	.word	0x080060c3
 8005d9c:	080060c3 	.word	0x080060c3
 8005da0:	080060c3 	.word	0x080060c3
 8005da4:	080060c3 	.word	0x080060c3
 8005da8:	080060c3 	.word	0x080060c3
 8005dac:	080060c3 	.word	0x080060c3
 8005db0:	080060c3 	.word	0x080060c3
 8005db4:	080060c3 	.word	0x080060c3
 8005db8:	080060c3 	.word	0x080060c3
 8005dbc:	080060c3 	.word	0x080060c3
 8005dc0:	080060c3 	.word	0x080060c3
 8005dc4:	080060c3 	.word	0x080060c3
 8005dc8:	080060c3 	.word	0x080060c3
 8005dcc:	080060c3 	.word	0x080060c3
 8005dd0:	080060c3 	.word	0x080060c3
 8005dd4:	080060c3 	.word	0x080060c3
 8005dd8:	080060c3 	.word	0x080060c3
 8005ddc:	080060c3 	.word	0x080060c3
 8005de0:	080060c3 	.word	0x080060c3
 8005de4:	080060c3 	.word	0x080060c3
 8005de8:	080060c3 	.word	0x080060c3
 8005dec:	080060c3 	.word	0x080060c3
 8005df0:	080060c3 	.word	0x080060c3
 8005df4:	080060c3 	.word	0x080060c3
 8005df8:	080060c3 	.word	0x080060c3
 8005dfc:	080060c3 	.word	0x080060c3
 8005e00:	080060c3 	.word	0x080060c3
 8005e04:	080060c3 	.word	0x080060c3
 8005e08:	080060c3 	.word	0x080060c3
 8005e0c:	08005e83 	.word	0x08005e83
 8005e10:	080060c3 	.word	0x080060c3
 8005e14:	080060c3 	.word	0x080060c3
 8005e18:	080060c3 	.word	0x080060c3
 8005e1c:	080060c3 	.word	0x080060c3
 8005e20:	080060c3 	.word	0x080060c3
 8005e24:	080060c3 	.word	0x080060c3
 8005e28:	080060c3 	.word	0x080060c3
 8005e2c:	080060c3 	.word	0x080060c3
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	080060c3 	.word	0x080060c3
 8005e3c:	080060c3 	.word	0x080060c3
 8005e40:	080060c3 	.word	0x080060c3
 8005e44:	080060b5 	.word	0x080060b5
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060c3 	.word	0x080060c3
 8005e60:	080060c3 	.word	0x080060c3
 8005e64:	080060c3 	.word	0x080060c3
 8005e68:	0800600f 	.word	0x0800600f
 8005e6c:	08006031 	.word	0x08006031
 8005e70:	08006053 	.word	0x08006053
 8005e74:	08006075 	.word	0x08006075
 8005e78:	08006097 	.word	0x08006097
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005e80:	e126      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	2244      	movs	r2, #68	; 0x44
 8005e88:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e8e:	e11f      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005e96:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <CO_LSSslave_process+0x1dc>
 8005ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da02      	bge.n	8005eb2 <CO_LSSslave_process+0x1e2>
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2bff      	cmp	r3, #255	; 0xff
 8005eb0:	d104      	bne.n	8005ebc <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	7cfa      	ldrb	r2, [r7, #19]
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005ecc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005ed6:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005edc:	e0f8      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80ef 	beq.w	80060c6 <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005eee:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005ef6:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f04:	7f7b      	ldrb	r3, [r7, #29]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d121      	bne.n	8005f4e <CO_LSSslave_process+0x27e>
 8005f0a:	7f3b      	ldrb	r3, [r7, #28]
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d01e      	beq.n	8005f4e <CO_LSSslave_process+0x27e>
 8005f10:	7f3b      	ldrb	r3, [r7, #28]
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d81b      	bhi.n	8005f4e <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005f16:	7f3b      	ldrb	r3, [r7, #28]
 8005f18:	4a77      	ldr	r2, [pc, #476]	; (80060f8 <CO_LSSslave_process+0x428>)
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005f28:	8b79      	ldrh	r1, [r7, #26]
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4798      	blx	r3
 8005f2e:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	8b7a      	ldrh	r2, [r7, #26]
 8005f3c:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f3e:	e009      	b.n	8005f54 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8005f40:	23ff      	movs	r3, #255	; 0xff
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005f4c:	e002      	b.n	8005f54 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005f5e:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f68:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8005f72:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8005f74:	2301      	movs	r3, #1
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f78:	e0aa      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80a3 	beq.w	80060ca <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a0 	beq.w	80060ce <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	8bfb      	ldrh	r3, [r7, #30]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005fb0:	8bf9      	ldrh	r1, [r7, #30]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8005fb6:	e08a      	b.n	80060ce <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fcc:	e011      	b.n	8005ff2 <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fda:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	4798      	blx	r3
 8005fe4:	6238      	str	r0, [r7, #32]
                if (!result) {
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8005fec:	2302      	movs	r3, #2
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8005ffc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006006:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006008:	2301      	movs	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800600c:	e060      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006018:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	3306      	adds	r3, #6
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800602a:	2301      	movs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800602e:	e04f      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800603a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	3306      	adds	r3, #6
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006050:	e03e      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800605c:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	3306      	adds	r3, #6
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006072:	e02d      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800607e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	3306      	adds	r3, #6
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006090:	2301      	movs	r3, #1
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006094:	e01c      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80060a0:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80060ac:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 80060ae:	2301      	movs	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80060b2:	e00d      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	224f      	movs	r2, #79	; 0x4f
 80060ba:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 80060bc:	2301      	movs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80060c0:	e006      	b.n	80060d0 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 80060c2:	bf00      	nop
 80060c4:	e004      	b.n	80060d0 <CO_LSSslave_process+0x400>
                break;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <CO_LSSslave_process+0x400>
                break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <CO_LSSslave_process+0x400>
            break;
 80060ce:	bf00      	nop
        }
        }

        if(CANsend) {
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f001 f9e1 	bl	80074a8 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3730      	adds	r7, #48	; 0x30
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	0800e8e0 	.word	0x0800e8e0

080060fc <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	08db      	lsrs	r3, r3, #3
 800610c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	2201      	movs	r2, #1
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b09      	cmp	r3, #9
 8006126:	d807      	bhi.n	8006138 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	5cd2      	ldrb	r2, [r2, r3]
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	4013      	ands	r3, r2
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <CO_isError+0x40>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <CO_isError+0x42>
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <CO_getErrorRegister+0x1e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <CO_getErrorRegister+0x1e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	e000      	b.n	800616a <CO_getErrorRegister+0x20>
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <CO_NMT_getInternalState+0x16>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f993 3000 	ldrsb.w	r3, [r3]
 800618a:	e000      	b.n	800618e <CO_NMT_getInternalState+0x18>
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <CO_LSSslave_getState+0x14>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	7c1b      	ldrb	r3, [r3, #16]
 80061ac:	e000      	b.n	80061b0 <CO_LSSslave_getState+0x16>
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80061d2:	2140      	movs	r1, #64	; 0x40
 80061d4:	2001      	movs	r0, #1
 80061d6:	f007 f9e9 	bl	800d5ac <calloc>
 80061da:	4603      	mov	r3, r0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8101 	beq.w	80063e8 <CO_new+0x22c>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	3340      	adds	r3, #64	; 0x40
 80061ea:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80061ec:	212c      	movs	r1, #44	; 0x2c
 80061ee:	2001      	movs	r0, #1
 80061f0:	f007 f9dc 	bl	800d5ac <calloc>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	611a      	str	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80f1 	beq.w	80063e8 <CO_new+0x22c>
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	332c      	adds	r3, #44	; 0x2c
 800620a:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 800620c:	2308      	movs	r3, #8
 800620e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006210:	2130      	movs	r1, #48	; 0x30
 8006212:	2001      	movs	r0, #1
 8006214:	f007 f9ca 	bl	800d5ac <calloc>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	615a      	str	r2, [r3, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80df 	beq.w	80063e8 <CO_new+0x22c>
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3330      	adds	r3, #48	; 0x30
 800622e:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006230:	7afb      	ldrb	r3, [r7, #11]
 8006232:	2110      	movs	r1, #16
 8006234:	4618      	mov	r0, r3
 8006236:	f007 f9b9 	bl	800d5ac <calloc>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 80ce 	beq.w	80063e8 <CO_new+0x22c>
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006256:	2150      	movs	r1, #80	; 0x50
 8006258:	2001      	movs	r0, #1
 800625a:	f007 f9a7 	bl	800d5ac <calloc>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	61da      	str	r2, [r3, #28]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80bc 	beq.w	80063e8 <CO_new+0x22c>
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	3350      	adds	r3, #80	; 0x50
 8006274:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006276:	2311      	movs	r3, #17
 8006278:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800627a:	7abb      	ldrb	r3, [r7, #10]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d912      	bls.n	80062a6 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006280:	7abb      	ldrb	r3, [r7, #10]
 8006282:	2108      	movs	r1, #8
 8006284:	4618      	mov	r0, r3
 8006286:	f007 f991 	bl	800d5ac <calloc>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80a6 	beq.w	80063e8 <CO_new+0x22c>
 800629c:	7abb      	ldrb	r3, [r7, #10]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80062a6:	21a8      	movs	r1, #168	; 0xa8
 80062a8:	2001      	movs	r0, #1
 80062aa:	f007 f97f 	bl	800d5ac <calloc>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8094 	beq.w	80063e8 <CO_new+0x22c>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	33a8      	adds	r3, #168	; 0xa8
 80062c4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80062c6:	212c      	movs	r1, #44	; 0x2c
 80062c8:	2001      	movs	r0, #1
 80062ca:	f007 f96f 	bl	800d5ac <calloc>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8084 	beq.w	80063e8 <CO_new+0x22c>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	332c      	adds	r3, #44	; 0x2c
 80062e4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80062e6:	2160      	movs	r1, #96	; 0x60
 80062e8:	2001      	movs	r0, #1
 80062ea:	f007 f95f 	bl	800d5ac <calloc>
 80062ee:	4603      	mov	r3, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d074      	beq.n	80063e8 <CO_new+0x22c>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3360      	adds	r3, #96	; 0x60
 8006302:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006304:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006308:	2001      	movs	r0, #1
 800630a:	f007 f94f 	bl	800d5ac <calloc>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d064      	beq.n	80063e8 <CO_new+0x22c>
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8006324:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006326:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800632a:	2001      	movs	r0, #1
 800632c:	f007 f93e 	bl	800d5ac <calloc>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	635a      	str	r2, [r3, #52]	; 0x34
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	2b00      	cmp	r3, #0
 800633e:	d053      	beq.n	80063e8 <CO_new+0x22c>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006346:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006348:	210c      	movs	r1, #12
 800634a:	2001      	movs	r0, #1
 800634c:	f007 f92e 	bl	800d5ac <calloc>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d043      	beq.n	80063e8 <CO_new+0x22c>
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	330c      	adds	r3, #12
 8006364:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006366:	2174      	movs	r1, #116	; 0x74
 8006368:	2001      	movs	r0, #1
 800636a:	f007 f91f 	bl	800d5ac <calloc>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d034      	beq.n	80063e8 <CO_new+0x22c>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3374      	adds	r3, #116	; 0x74
 8006382:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006384:	2138      	movs	r1, #56	; 0x38
 8006386:	2001      	movs	r0, #1
 8006388:	f007 f910 	bl	800d5ac <calloc>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d025      	beq.n	80063e8 <CO_new+0x22c>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3338      	adds	r3, #56	; 0x38
 80063a0:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80063a2:	210c      	movs	r1, #12
 80063a4:	200e      	movs	r0, #14
 80063a6:	f007 f901 	bl	800d5ac <calloc>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <CO_new+0x22c>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	33a8      	adds	r3, #168	; 0xa8
 80063be:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80063c0:	2118      	movs	r1, #24
 80063c2:	2006      	movs	r0, #6
 80063c4:	f007 f8f2 	bl	800d5ac <calloc>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	60da      	str	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <CO_new+0x22c>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3390      	adds	r3, #144	; 0x90
 80063dc:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <CO_new+0x238>
        CO_delete(co);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f80b 	bl	800640a <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <CO_new+0x244>
        *heapMemoryUsed = mem;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006400:	697b      	ldr	r3, [r7, #20]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <CO_delete>:

void CO_delete(CO_t *co) {
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d053      	beq.n	80064c0 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ff55 	bl	80072cc <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4618      	mov	r0, r3
 8006428:	f007 f8de 	bl	800d5e8 <free>
    CO_free(co->CANrx);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4618      	mov	r0, r3
 8006432:	f007 f8d9 	bl	800d5e8 <free>
    CO_free(co->CANmodule);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	f007 f8d4 	bl	800d5e8 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	4618      	mov	r0, r3
 8006446:	f007 f8cf 	bl	800d5e8 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	4618      	mov	r0, r3
 8006450:	f007 f8ca 	bl	800d5e8 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	4618      	mov	r0, r3
 800645a:	f007 f8c5 	bl	800d5e8 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4618      	mov	r0, r3
 8006464:	f007 f8c0 	bl	800d5e8 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4618      	mov	r0, r3
 800646e:	f007 f8bb 	bl	800d5e8 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	4618      	mov	r0, r3
 8006478:	f007 f8b6 	bl	800d5e8 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	4618      	mov	r0, r3
 8006482:	f007 f8b1 	bl	800d5e8 <free>

    /* Emergency */
    CO_free(co->em);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	4618      	mov	r0, r3
 800648c:	f007 f8ac 	bl	800d5e8 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	4618      	mov	r0, r3
 8006496:	f007 f8a7 	bl	800d5e8 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	4618      	mov	r0, r3
 80064a0:	f007 f8a2 	bl	800d5e8 <free>
    CO_free(co->HBcons);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f007 f89d 	bl	800d5e8 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f007 f898 	bl	800d5e8 <free>

    /* CANopen object */
    CO_free(co);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f007 f895 	bl	800d5e8 <free>
 80064be:	e000      	b.n	80064c2 <CO_delete+0xb8>
        return;
 80064c0:	bf00      	nop
}
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af04      	add	r7, sp, #16
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <CO_CANinit+0x1a>
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e01a      	b.n	8006518 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f000 fe0a 	bl	8007104 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6858      	ldr	r0, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6899      	ldr	r1, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	9202      	str	r2, [sp, #8]
 8006500:	2206      	movs	r2, #6
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	230e      	movs	r3, #14
 8006508:	460a      	mov	r2, r1
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f000 fe22 	bl	8007154 <CO_CANmodule_init>
 8006510:	4603      	mov	r3, r0
 8006512:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8006514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af06      	add	r7, sp, #24
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	e01a      	b.n	8006570 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800654a:	9105      	str	r1, [sp, #20]
 800654c:	2105      	movs	r1, #5
 800654e:	9104      	str	r1, [sp, #16]
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8006556:	9202      	str	r2, [sp, #8]
 8006558:	220d      	movs	r2, #13
 800655a:	9201      	str	r2, [sp, #4]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	f7ff fb3e 	bl	8005be4 <CO_LSSslave_init>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800656c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	b091      	sub	sp, #68	; 0x44
 800657c:	af0a      	add	r7, sp, #40	; 0x28
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800658c:	f04f 33ff 	mov.w	r3, #4294967295
 8006590:	e134      	b.n	80067fc <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <CO_CANopenInit+0x26>
        em = co->em;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80065a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80065a8:	2bff      	cmp	r3, #255	; 0xff
 80065aa:	d103      	bne.n	80065b4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e00a      	b.n	80065ca <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80065b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <CO_CANopenInit+0x4c>
 80065bc:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da02      	bge.n	80065ca <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065c4:	f04f 33ff 	mov.w	r3, #4294967295
 80065c8:	e118      	b.n	80067fc <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe ffe0 	bl	8005594 <CO_LEDs_init>
 80065d4:	4603      	mov	r3, r0
 80065d6:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 80065d8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <CO_CANopenInit+0x6e>
 80065e0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80065e4:	e10a      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80065ee:	f06f 0312 	mvn.w	r3, #18
 80065f2:	e103      	b.n	80067fc <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	69d8      	ldr	r0, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80065fc:	4b81      	ldr	r3, [pc, #516]	; (8006804 <CO_CANopenInit+0x28c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 800660a:	4b7e      	ldr	r3, [pc, #504]	; (8006804 <CO_CANopenInit+0x28c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006610:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006612:	4a7c      	ldr	r2, [pc, #496]	; (8006804 <CO_CANopenInit+0x28c>)
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8006618:	3218      	adds	r2, #24
 800661a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800661c:	9105      	str	r1, [sp, #20]
 800661e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006622:	9104      	str	r1, [sp, #16]
 8006624:	9203      	str	r2, [sp, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	9202      	str	r2, [sp, #8]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	2311      	movs	r3, #17
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4633      	mov	r3, r6
 8006632:	462a      	mov	r2, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7fa f8df 	bl	80007f8 <CO_EM_init>
 800663a:	4603      	mov	r3, r0
 800663c:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 800663e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <CO_CANopenInit+0xd4>
 8006646:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800664a:	e0d7      	b.n	80067fc <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006650:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <CO_CANopenInit+0x28c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8006656:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6852      	ldr	r2, [r2, #4]
 8006662:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006666:	b289      	uxth	r1, r1
 8006668:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800666c:	b289      	uxth	r1, r1
 800666e:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006672:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006674:	9008      	str	r0, [sp, #32]
 8006676:	9107      	str	r1, [sp, #28]
 8006678:	2104      	movs	r1, #4
 800667a:	9106      	str	r1, [sp, #24]
 800667c:	9205      	str	r2, [sp, #20]
 800667e:	2200      	movs	r2, #0
 8006680:	9204      	str	r2, [sp, #16]
 8006682:	2200      	movs	r2, #0
 8006684:	9203      	str	r2, [sp, #12]
 8006686:	9302      	str	r3, [sp, #8]
 8006688:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	4633      	mov	r3, r6
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4629      	mov	r1, r5
 8006696:	4620      	mov	r0, r4
 8006698:	f7fa ff3e 	bl	8001518 <CO_NMT_init>
 800669c:	4603      	mov	r3, r0
 800669e:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80066a0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <CO_CANopenInit+0x136>
 80066a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066ac:	e0a6      	b.n	80067fc <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6958      	ldr	r0, [r3, #20]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <CO_CANopenInit+0x28c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 80066bc:	3384      	adds	r3, #132	; 0x84
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066c4:	9103      	str	r1, [sp, #12]
 80066c6:	2105      	movs	r1, #5
 80066c8:	9102      	str	r1, [sp, #8]
 80066ca:	9201      	str	r2, [sp, #4]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	2308      	movs	r3, #8
 80066d0:	4622      	mov	r2, r4
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	f7fa fc24 	bl	8000f20 <CO_HBconsumer_init>
 80066d8:	4603      	mov	r3, r0
 80066da:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 80066dc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <CO_CANopenInit+0x172>
 80066e4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80066e8:	e088      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 80066ea:	4b46      	ldr	r3, [pc, #280]	; (8006804 <CO_CANopenInit+0x28c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	33b4      	adds	r3, #180	; 0xb4
 80066f2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	827b      	strh	r3, [r7, #18]
 80066f8:	e033      	b.n	8006762 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006702:	21a8      	movs	r1, #168	; 0xa8
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	18d6      	adds	r6, r2, r3
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f102 030c 	add.w	r3, r2, #12
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	8a79      	ldrh	r1, [r7, #18]
 8006718:	3104      	adds	r1, #4
 800671a:	b289      	uxth	r1, r1
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	6840      	ldr	r0, [r0, #4]
 8006720:	8a7c      	ldrh	r4, [r7, #18]
 8006722:	3403      	adds	r4, #3
 8006724:	b2a4      	uxth	r4, r4
 8006726:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 800672a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800672c:	9505      	str	r5, [sp, #20]
 800672e:	9404      	str	r4, [sp, #16]
 8006730:	9003      	str	r0, [sp, #12]
 8006732:	9102      	str	r1, [sp, #8]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	4663      	mov	r3, ip
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	4630      	mov	r0, r6
 8006740:	f7fd f95a 	bl	80039f8 <CO_SDOserver_init>
 8006744:	4603      	mov	r3, r0
 8006746:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8006748:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <CO_CANopenInit+0x1de>
 8006750:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006754:	e052      	b.n	80067fc <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800675a:	b29b      	uxth	r3, r3
 800675c:	3301      	adds	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	827b      	strh	r3, [r7, #18]
 8006762:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006766:	2b00      	cmp	r3, #0
 8006768:	ddc7      	ble.n	80066fa <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <CO_CANopenInit+0x28c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006774:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2302      	movs	r3, #2
 8006782:	f7fe fe11 	bl	80053a8 <CO_TIME_init>
 8006786:	4603      	mov	r3, r0
 8006788:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800678a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <CO_CANopenInit+0x220>
 8006792:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006796:	e031      	b.n	80067fc <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <CO_CANopenInit+0x28c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067a2:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <CO_CANopenInit+0x28c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067ac:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <CO_CANopenInit+0x28c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80067b6:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 80067b8:	4a12      	ldr	r2, [pc, #72]	; (8006804 <CO_CANopenInit+0x28c>)
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 80067be:	32a8      	adds	r2, #168	; 0xa8
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6849      	ldr	r1, [r1, #4]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	6840      	ldr	r0, [r0, #4]
 80067c8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80067ca:	9406      	str	r4, [sp, #24]
 80067cc:	2400      	movs	r4, #0
 80067ce:	9405      	str	r4, [sp, #20]
 80067d0:	9004      	str	r0, [sp, #16]
 80067d2:	2001      	movs	r0, #1
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	9102      	str	r1, [sp, #8]
 80067d8:	9201      	str	r2, [sp, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4663      	mov	r3, ip
 80067de:	4632      	mov	r2, r6
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7fe fb18 	bl	8004e18 <CO_SYNC_init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 80067ec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <CO_CANopenInit+0x282>
 80067f4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067f8:	e000      	b.n	80067fc <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006804:	20000244 	.word	0x20000244

08006808 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8006808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800680a:	b093      	sub	sp, #76	; 0x4c
 800680c:	af06      	add	r7, sp, #24
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	e0c1      	b.n	80069a6 <CO_CANopenInitPDO+0x19e>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <CO_CANopenInitPDO+0x30>
 8006828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	db03      	blt.n	8006838 <CO_CANopenInitPDO+0x30>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <CO_CANopenInitPDO+0x3e>
 8006840:	f06f 0312 	mvn.w	r3, #18
 8006844:	e0af      	b.n	80069a6 <CO_CANopenInitPDO+0x19e>
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e0ac      	b.n	80069a6 <CO_CANopenInitPDO+0x19e>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 800684c:	4b58      	ldr	r3, [pc, #352]	; (80069b0 <CO_CANopenInitPDO+0x1a8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	33cc      	adds	r3, #204	; 0xcc
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006856:	4b56      	ldr	r3, [pc, #344]	; (80069b0 <CO_CANopenInitPDO+0x1a8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	33d8      	adds	r3, #216	; 0xd8
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006860:	2300      	movs	r3, #0
 8006862:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006864:	e044      	b.n	80068f0 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 800686a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800686e:	2b03      	cmp	r3, #3
 8006870:	dc09      	bgt.n	8006886 <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006872:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006876:	3302      	adds	r3, #2
 8006878:	b29b      	uxth	r3, r3
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	b29a      	uxth	r2, r3
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	b29b      	uxth	r3, r3
 8006882:	4413      	add	r3, r2
 8006884:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800688e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	18d5      	adds	r5, r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	f103 020c 	add.w	r2, r3, #12
 80068a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a6:	f102 010c 	add.w	r1, r2, #12
 80068aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	6849      	ldr	r1, [r1, #4]
 80068b0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80068b2:	3003      	adds	r0, #3
 80068b4:	b280      	uxth	r0, r0
 80068b6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80068b8:	9405      	str	r4, [sp, #20]
 80068ba:	9004      	str	r0, [sp, #16]
 80068bc:	9103      	str	r1, [sp, #12]
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4633      	mov	r3, r6
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4628      	mov	r0, r5
 80068ce:	f7fb ff69 	bl	80027a4 <CO_RPDO_init>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 80068d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <CO_CANopenInitPDO+0xdc>
 80068de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80068e2:	e060      	b.n	80069a6 <CO_CANopenInitPDO+0x19e>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80068e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3301      	adds	r3, #1
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	ddb6      	ble.n	8006866 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <CO_CANopenInitPDO+0x1a8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	33e4      	adds	r3, #228	; 0xe4
 8006900:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006902:	4b2b      	ldr	r3, [pc, #172]	; (80069b0 <CO_CANopenInitPDO+0x1a8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	33f0      	adds	r3, #240	; 0xf0
 800690a:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800690c:	2300      	movs	r3, #0
 800690e:	837b      	strh	r3, [r7, #26]
 8006910:	e044      	b.n	800699c <CO_CANopenInitPDO+0x194>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8006916:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800691a:	2b03      	cmp	r3, #3
 800691c:	dc09      	bgt.n	8006932 <CO_CANopenInitPDO+0x12a>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 800691e:	8b7b      	ldrh	r3, [r7, #26]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	b29a      	uxth	r2, r3
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	b29b      	uxth	r3, r3
 8006928:	4413      	add	r3, r2
 800692a:	b29b      	uxth	r3, r3
 800692c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006930:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006936:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800693a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	f103 020c 	add.w	r2, r3, #12
 800694e:	623a      	str	r2, [r7, #32]
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	f102 010c 	add.w	r1, r2, #12
 8006956:	61f9      	str	r1, [r7, #28]
 8006958:	68f9      	ldr	r1, [r7, #12]
 800695a:	6849      	ldr	r1, [r1, #4]
 800695c:	8b78      	ldrh	r0, [r7, #26]
 800695e:	3002      	adds	r0, #2
 8006960:	b280      	uxth	r0, r0
 8006962:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006964:	9405      	str	r4, [sp, #20]
 8006966:	9004      	str	r0, [sp, #16]
 8006968:	9103      	str	r1, [sp, #12]
 800696a:	9202      	str	r2, [sp, #8]
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	8b3b      	ldrh	r3, [r7, #24]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4633      	mov	r3, r6
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4628      	mov	r0, r5
 800697a:	f7fc fadf 	bl	8002f3c <CO_TPDO_init>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8006982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <CO_CANopenInitPDO+0x188>
 800698a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800698e:	e00a      	b.n	80069a6 <CO_CANopenInitPDO+0x19e>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006990:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006994:	b29b      	uxth	r3, r3
 8006996:	3301      	adds	r3, #1
 8006998:	b29b      	uxth	r3, r3
 800699a:	837b      	strh	r3, [r7, #26]
 800699c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	ddb6      	ble.n	8006912 <CO_CANopenInitPDO+0x10a>
        }
    }
#endif

    return CO_ERROR_NO;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3734      	adds	r7, #52	; 0x34
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000244 	.word	0x20000244

080069b4 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80069b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b6:	b097      	sub	sp, #92	; 0x5c
 80069b8:	af08      	add	r7, sp, #32
 80069ba:	61f8      	str	r0, [r7, #28]
 80069bc:	61b9      	str	r1, [r7, #24]
 80069be:	617a      	str	r2, [r7, #20]
 80069c0:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fbd2 	bl	8006176 <CO_NMT_getInternalState>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80069d8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 80069dc:	2b7f      	cmp	r3, #127	; 0x7f
 80069de:	d003      	beq.n	80069e8 <CO_process+0x34>
 80069e0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80069e4:	2b05      	cmp	r3, #5
 80069e6:	d101      	bne.n	80069ec <CO_process+0x38>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <CO_process+0x3a>
 80069ec:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fe00 	bl	80075fa <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff f966 	bl	8005cd0 <CO_LSSslave_process>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	8a5b      	ldrh	r3, [r3, #18]
 8006a1c:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fbb7 	bl	800619a <CO_LSSslave_getState>
 8006a2c:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8006a32:	2301      	movs	r3, #1
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <CO_process+0x92>
 8006a40:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8006a44:	e000      	b.n	8006a48 <CO_process+0x94>
 8006a46:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8006a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a4a:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bf14      	ite	ne
 8006a52:	2301      	movne	r3, #1
 8006a54:	2300      	moveq	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8006a5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a5c:	f240 3303 	movw	r3, #771	; 0x303
 8006a60:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bf14      	ite	ne
 8006a66:	2301      	movne	r3, #1
 8006a68:	2300      	moveq	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	2118      	movs	r1, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fb3e 	bl	80060fc <CO_isError>
 8006a80:	4605      	mov	r5, r0
 8006a82:	e000      	b.n	8006a86 <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8006a84:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d113      	bne.n	8006ab4 <CO_process+0x100>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	211b      	movs	r1, #27
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fb32 	bl	80060fc <CO_isError>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d108      	bne.n	8006ab0 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	211c      	movs	r1, #28
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fb29 	bl	80060fc <CO_isError>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <CO_process+0x102>
 8006ab4:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8006ab6:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fb44 	bl	800614a <CO_getErrorRegister>
 8006ac2:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf14      	ite	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	2300      	moveq	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	9307      	str	r3, [sp, #28]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9306      	str	r3, [sp, #24]
 8006ad8:	9205      	str	r2, [sp, #20]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	9503      	str	r5, [sp, #12]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	4622      	mov	r2, r4
 8006af0:	6979      	ldr	r1, [r7, #20]
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7fe fd66 	bl	80055c4 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <CO_process+0x152>
        return reset;
 8006b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b04:	e047      	b.n	8006b96 <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	69d8      	ldr	r0, [r3, #28]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b10:	f7f9 ff52 	bl	80009b8 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	6918      	ldr	r0, [r3, #16]
 8006b18:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	f7fa fdb8 	bl	8001694 <CO_NMT_process>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006b2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8006b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b30:	d003      	beq.n	8006b3a <CO_process+0x186>
 8006b32:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d101      	bne.n	8006b3e <CO_process+0x18a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <CO_process+0x18c>
 8006b3e:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b48:	e011      	b.n	8006b6e <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b52:	21a8      	movs	r1, #168	; 0xa8
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	18d0      	adds	r0, r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b60:	f7fd fa40 	bl	8003fe4 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b68:	3301      	adds	r3, #1
 8006b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0e9      	beq.n	8006b4a <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	6958      	ldr	r0, [r3, #20]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b80:	f7fa fb12 	bl	80011a8 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fc8b 	bl	80054a8 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8006b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	373c      	adds	r7, #60	; 0x3c
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b9e <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d12e      	bne.n	8006c14 <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fadb 	bl	8006176 <CO_NMT_getInternalState>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8006bc4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bca:	d003      	beq.n	8006bd4 <CO_process_SYNC+0x36>
 8006bcc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d101      	bne.n	8006bd8 <CO_process_SYNC+0x3a>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <CO_process_SYNC+0x3c>
 8006bd8:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006bda:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	6979      	ldr	r1, [r7, #20]
 8006be6:	f7fe fa3f 	bl	8005068 <CO_SYNC_process>
 8006bea:	4603      	mov	r3, r0
 8006bec:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d008      	beq.n	8006c06 <CO_process_SYNC+0x68>
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	dc0d      	bgt.n	8006c14 <CO_process_SYNC+0x76>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <CO_process_SYNC+0x74>
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d109      	bne.n	8006c14 <CO_process_SYNC+0x76>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8006c00:	2301      	movs	r3, #1
 8006c02:	61fb      	str	r3, [r7, #28]
                break;
 8006c04:	e006      	b.n	8006c14 <CO_process_SYNC+0x76>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fc8f 	bl	800752e <CO_CANclearPendingSyncPDOs>
                break;
 8006c10:	e000      	b.n	8006c14 <CO_process_SYNC+0x76>
                break;
 8006c12:	bf00      	nop
        }
    }

    return syncWas;
 8006c14:	69fb      	ldr	r3, [r7, #28]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3720      	adds	r7, #32
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b088      	sub	sp, #32
 8006c22:	af02      	add	r7, sp, #8
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d129      	bne.n	8006c88 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fa9c 	bl	8006176 <CO_NMT_getInternalState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	bf0c      	ite	eq
 8006c44:	2301      	moveq	r3, #1
 8006c46:	2300      	movne	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006c4a:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	82fb      	strh	r3, [r7, #22]
 8006c50:	e015      	b.n	8006c7e <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c5a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006c5e:	fb01 f303 	mul.w	r3, r1, r3
 8006c62:	18d0      	adds	r0, r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	f7fb fedf 	bl	8002a30 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006c72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	82fb      	strh	r3, [r7, #22]
 8006c7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dde5      	ble.n	8006c52 <CO_process_RPDO+0x34>
 8006c86:	e000      	b.n	8006c8a <CO_process_RPDO+0x6c>
        return;
 8006c88:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d129      	bne.n	8006cfa <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fa63 	bl	8006176 <CO_NMT_getInternalState>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8006cbc:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	82fb      	strh	r3, [r7, #22]
 8006cc2:	e015      	b.n	8006cf0 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ccc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	18d0      	adds	r0, r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	f7fc fb4a 	bl	8003378 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006ce4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3301      	adds	r3, #1
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	82fb      	strh	r3, [r7, #22]
 8006cf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dde5      	ble.n	8006cc4 <CO_process_TPDO+0x34>
 8006cf8:	e000      	b.n	8006cfc <CO_process_TPDO+0x6c>
        return;
 8006cfa:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006d0c:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <canopen_app_init+0x58>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fa4d 	bl	80061bc <CO_new>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4a0e      	ldr	r2, [pc, #56]	; (8006d60 <canopen_app_init+0x5c>)
 8006d26:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <canopen_app_init+0x5c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006d30:	480c      	ldr	r0, [pc, #48]	; (8006d64 <canopen_app_init+0x60>)
 8006d32:	f006 fef7 	bl	800db24 <puts>
        return 1;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e00c      	b.n	8006d54 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	480a      	ldr	r0, [pc, #40]	; (8006d68 <canopen_app_init+0x64>)
 8006d40:	f006 fe8a 	bl	800da58 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <canopen_app_init+0x58>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a05      	ldr	r2, [pc, #20]	; (8006d60 <canopen_app_init+0x5c>)
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006d4e:	f000 f80d 	bl	8006d6c <canopen_app_resetCommunication>
    return 0;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	200002d4 	.word	0x200002d4
 8006d60:	200002d8 	.word	0x200002d8
 8006d64:	0800e658 	.word	0x0800e658
 8006d68:	0800e678 	.word	0x0800e678

08006d6c <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b08f      	sub	sp, #60	; 0x3c
 8006d70:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006d72:	487d      	ldr	r0, [pc, #500]	; (8006f68 <canopen_app_resetCommunication+0x1fc>)
 8006d74:	f006 fed6 	bl	800db24 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006d78:	4b7c      	ldr	r3, [pc, #496]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006d82:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9bc 	bl	8007104 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006d8c:	4b77      	ldr	r3, [pc, #476]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa9a 	bl	80072cc <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006d98:	4b74      	ldr	r3, [pc, #464]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a74      	ldr	r2, [pc, #464]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006d9e:	6811      	ldr	r1, [r2, #0]
 8006da0:	2200      	movs	r2, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff fb90 	bl	80064c8 <CO_CANinit>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	4b71      	ldr	r3, [pc, #452]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006dae:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006db0:	4b70      	ldr	r3, [pc, #448]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006db2:	f993 3000 	ldrsb.w	r3, [r3]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006dba:	4b6e      	ldr	r3, [pc, #440]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	486d      	ldr	r0, [pc, #436]	; (8006f78 <canopen_app_resetCommunication+0x20c>)
 8006dc4:	f006 fe48 	bl	800da58 <iprintf>
        return 1;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0c8      	b.n	8006f5e <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006dcc:	4b6b      	ldr	r3, [pc, #428]	; (8006f7c <canopen_app_resetCommunication+0x210>)
 8006dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd0:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006dd2:	4b6a      	ldr	r3, [pc, #424]	; (8006f7c <canopen_app_resetCommunication+0x210>)
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006dd6:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006dd8:	4b68      	ldr	r3, [pc, #416]	; (8006f7c <canopen_app_resetCommunication+0x210>)
 8006dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006ddc:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006dde:	4b67      	ldr	r3, [pc, #412]	; (8006f7c <canopen_app_resetCommunication+0x210>)
 8006de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006de2:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4b61      	ldr	r3, [pc, #388]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b60      	ldr	r3, [pc, #384]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3302      	adds	r3, #2
 8006df4:	f107 0108 	add.w	r1, r7, #8
 8006df8:	f7ff fb92 	bl	8006520 <CO_LSSinit>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4b5c      	ldr	r3, [pc, #368]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e02:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e04:	4b5b      	ldr	r3, [pc, #364]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e06:	f993 3000 	ldrsb.w	r3, [r3]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006e0e:	4b59      	ldr	r3, [pc, #356]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e10:	f993 3000 	ldrsb.w	r3, [r3]
 8006e14:	4619      	mov	r1, r3
 8006e16:	485a      	ldr	r0, [pc, #360]	; (8006f80 <canopen_app_resetCommunication+0x214>)
 8006e18:	f006 fe1e 	bl	800da58 <iprintf>
        return 2;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e09e      	b.n	8006f5e <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006e20:	4b53      	ldr	r3, [pc, #332]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	4b52      	ldr	r3, [pc, #328]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006e30:	4b4e      	ldr	r3, [pc, #312]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	4b53      	ldr	r3, [pc, #332]	; (8006f84 <canopen_app_resetCommunication+0x218>)
 8006e36:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006e38:	4b4d      	ldr	r3, [pc, #308]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	1d3a      	adds	r2, r7, #4
 8006e40:	9207      	str	r2, [sp, #28]
 8006e42:	9306      	str	r3, [sp, #24]
 8006e44:	2300      	movs	r3, #0
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e58:	9302      	str	r3, [sp, #8]
 8006e5a:	f242 1311 	movw	r3, #8465	; 0x2111
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	2300      	movs	r3, #0
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	460b      	mov	r3, r1
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f7ff fb85 	bl	8006578 <CO_CANopenInit>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b40      	ldr	r3, [pc, #256]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e74:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006e76:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e78:	f993 3000 	ldrsb.w	r3, [r3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01a      	beq.n	8006eb6 <canopen_app_resetCommunication+0x14a>
 8006e80:	4b3c      	ldr	r3, [pc, #240]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e82:	f993 3000 	ldrsb.w	r3, [r3]
 8006e86:	f113 0f13 	cmn.w	r3, #19
 8006e8a:	d014      	beq.n	8006eb6 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006e8c:	4b39      	ldr	r3, [pc, #228]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006e8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e92:	f113 0f0c 	cmn.w	r3, #12
 8006e96:	d105      	bne.n	8006ea4 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	483a      	ldr	r0, [pc, #232]	; (8006f88 <canopen_app_resetCommunication+0x21c>)
 8006e9e:	f006 fddb 	bl	800da58 <iprintf>
 8006ea2:	e006      	b.n	8006eb2 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006ea4:	4b33      	ldr	r3, [pc, #204]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006ea6:	f993 3000 	ldrsb.w	r3, [r3]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4837      	ldr	r0, [pc, #220]	; (8006f8c <canopen_app_resetCommunication+0x220>)
 8006eae:	f006 fdd3 	bl	800da58 <iprintf>
        }
        return 3;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e053      	b.n	8006f5e <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	4b2c      	ldr	r3, [pc, #176]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69d9      	ldr	r1, [r3, #28]
 8006ec0:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <canopen_app_resetCommunication+0x218>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	785c      	ldrb	r4, [r3, #1]
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f7ff fc9a 	bl	8006808 <CO_CANopenInitPDO>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4b26      	ldr	r3, [pc, #152]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006eda:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006ede:	f993 3000 	ldrsb.w	r3, [r3]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d014      	beq.n	8006f10 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006ee6:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8006eec:	f113 0f0c 	cmn.w	r3, #12
 8006ef0:	d105      	bne.n	8006efe <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4824      	ldr	r0, [pc, #144]	; (8006f88 <canopen_app_resetCommunication+0x21c>)
 8006ef8:	f006 fdae 	bl	800da58 <iprintf>
 8006efc:	e006      	b.n	8006f0c <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <canopen_app_resetCommunication+0x208>)
 8006f00:	f993 3000 	ldrsb.w	r3, [r3]
 8006f04:	4619      	mov	r1, r3
 8006f06:	4822      	ldr	r0, [pc, #136]	; (8006f90 <canopen_app_resetCommunication+0x224>)
 8006f08:	f006 fda6 	bl	800da58 <iprintf>
        }
        return 4;
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	e026      	b.n	8006f5e <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006f10:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <canopen_app_resetCommunication+0x204>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f003 fd40 	bl	800a99c <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006f1c:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006f26:	481b      	ldr	r0, [pc, #108]	; (8006f94 <canopen_app_resetCommunication+0x228>)
 8006f28:	f006 fdfc 	bl	800db24 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <canopen_app_resetCommunication+0x200>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f8f6 	bl	8007124 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006f38:	4817      	ldr	r0, [pc, #92]	; (8006f98 <canopen_app_resetCommunication+0x22c>)
 8006f3a:	f006 fdf3 	bl	800db24 <puts>
    fflush(stdout);
 8006f3e:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <canopen_app_resetCommunication+0x230>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f006 fcb1 	bl	800d8ac <fflush>
    time_old = time_current = HAL_GetTick();
 8006f4a:	f001 f94f 	bl	80081ec <HAL_GetTick>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <canopen_app_resetCommunication+0x234>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <canopen_app_resetCommunication+0x234>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <canopen_app_resetCommunication+0x238>)
 8006f5a:	6013      	str	r3, [r2, #0]
    return 0;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd90      	pop	{r4, r7, pc}
 8006f66:	bf00      	nop
 8006f68:	0800e6a0 	.word	0x0800e6a0
 8006f6c:	200002d8 	.word	0x200002d8
 8006f70:	200002d4 	.word	0x200002d4
 8006f74:	200002e4 	.word	0x200002e4
 8006f78:	0800e6c8 	.word	0x0800e6c8
 8006f7c:	20000000 	.word	0x20000000
 8006f80:	0800e6f0 	.word	0x0800e6f0
 8006f84:	20000244 	.word	0x20000244
 8006f88:	0800e71c 	.word	0x0800e71c
 8006f8c:	0800e744 	.word	0x0800e744
 8006f90:	0800e770 	.word	0x0800e770
 8006f94:	0800e798 	.word	0x0800e798
 8006f98:	0800e7c0 	.word	0x0800e7c0
 8006f9c:	200002b4 	.word	0x200002b4
 8006fa0:	200002e0 	.word	0x200002e0
 8006fa4:	200002dc 	.word	0x200002dc

08006fa8 <canopen_app_process>:

void
canopen_app_process() {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8006fae:	f001 f91d 	bl	80081ec <HAL_GetTick>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <canopen_app_process+0xc0>)
 8006fb6:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <canopen_app_process+0xc0>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	; (800706c <canopen_app_process+0xc4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d04c      	beq.n	800705e <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <canopen_app_process+0xc0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b28      	ldr	r3, [pc, #160]	; (800706c <canopen_app_process+0xc4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <canopen_app_process+0xc0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a23      	ldr	r2, [pc, #140]	; (800706c <canopen_app_process+0xc4>)
 8006fde:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8006fe0:	4b23      	ldr	r3, [pc, #140]	; (8007070 <canopen_app_process+0xc8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	f7ff fce3 	bl	80069b4 <CO_process>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	; (8007070 <canopen_app_process+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	7a5a      	ldrb	r2, [r3, #9]
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <canopen_app_process+0xcc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	09d2      	lsrs	r2, r2, #7
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <canopen_app_process+0xc8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	7a9a      	ldrb	r2, [r3, #10]
 800700c:	4b19      	ldr	r3, [pc, #100]	; (8007074 <canopen_app_process+0xcc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	09d2      	lsrs	r2, r2, #7
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d118      	bne.n	800704e <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <canopen_app_process+0xcc>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	4618      	mov	r0, r3
 8007024:	f003 fd0e 	bl	800aa44 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <canopen_app_process+0xcc>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f869 	bl	8007104 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <canopen_app_process+0xc8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff f9e7 	bl	800640a <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 800703c:	480e      	ldr	r0, [pc, #56]	; (8007078 <canopen_app_process+0xd0>)
 800703e:	f006 fd71 	bl	800db24 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <canopen_app_process+0xcc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff fe5c 	bl	8006d04 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 800704c:	e007      	b.n	800705e <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d104      	bne.n	800705e <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8007054:	4809      	ldr	r0, [pc, #36]	; (800707c <canopen_app_process+0xd4>)
 8007056:	f006 fd65 	bl	800db24 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 800705a:	f002 f872 	bl	8009142 <HAL_NVIC_SystemReset>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200002e0 	.word	0x200002e0
 800706c:	200002dc 	.word	0x200002dc
 8007070:	200002d8 	.word	0x200002d8
 8007074:	200002d4 	.word	0x200002d4
 8007078:	0800e7dc 	.word	0x0800e7dc
 800707c:	0800e804 	.word	0x0800e804

08007080 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007086:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <canopen_app_interrupt+0x80>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800708c:	f3ef 8210 	mrs	r2, PRIMASK
 8007090:	607a      	str	r2, [r7, #4]
  return(result);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007096:	b672      	cpsid	i
}
 8007098:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 800709a:	4b19      	ldr	r3, [pc, #100]	; (8007100 <canopen_app_interrupt+0x80>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d120      	bne.n	80070e6 <canopen_app_interrupt+0x66>
 80070a4:	4b16      	ldr	r3, [pc, #88]	; (8007100 <canopen_app_interrupt+0x80>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 80070b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070b8:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <canopen_app_interrupt+0x80>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7ff fd6b 	bl	8006b9e <CO_process_SYNC>
 80070c8:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <canopen_app_interrupt+0x80>)
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	f7ff fda3 	bl	8006c1e <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <canopen_app_interrupt+0x80>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	f7ff fdd5 	bl	8006c90 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <canopen_app_interrupt+0x80>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f383 8810 	msr	PRIMASK, r3
}
 80070f6:	bf00      	nop
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200002d8 	.word	0x200002d8

08007104 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fa7d 	bl	8008616 <HAL_CAN_Stop>
#endif
    }
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f001 fa27 	bl	800858e <HAL_CAN_Start>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	615a      	str	r2, [r3, #20]
        }
    }
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b090      	sub	sp, #64	; 0x40
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <CO_CANmodule_init+0x20>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <CO_CANmodule_init+0x20>
 800716e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
 8007178:	e0a1      	b.n	80072be <CO_CANmodule_init+0x16a>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007180:	4a51      	ldr	r2, [pc, #324]	; (80072c8 <CO_CANmodule_init+0x174>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	887a      	ldrh	r2, [r7, #2]
 8007190:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007196:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800719e:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80071ca:	2300      	movs	r3, #0
 80071cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071ce:	e02b      	b.n	8007228 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80071d0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	2200      	movs	r2, #0
 80071e2:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80071e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071f8:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80071fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80071fc:	4613      	mov	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4413      	add	r3, r2
 800720a:	2200      	movs	r2, #0
 800720c:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 800720e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007210:	4613      	mov	r3, r2
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	4413      	add	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	461a      	mov	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007222:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007224:	3301      	adds	r3, #1
 8007226:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007228:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	429a      	cmp	r2, r3
 800722e:	d3cf      	bcc.n	80071d0 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007230:	2300      	movs	r3, #0
 8007232:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007234:	e00c      	b.n	8007250 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007236:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007238:	4613      	mov	r3, r2
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	461a      	mov	r2, r3
 8007242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800724a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800724c:	3301      	adds	r3, #1
 800724e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007250:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007252:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007256:	429a      	cmp	r2, r3
 8007258:	d3ed      	bcc.n	8007236 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4798      	blx	r3
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
        FilterConfig.FilterBank = 0;
    } else {
        FilterConfig.FilterBank = 14;
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007268:	2301      	movs	r3, #1
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007278:	2300      	movs	r3, #0
 800727a:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007284:	230e      	movs	r3, #14
 8007286:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f107 0214 	add.w	r2, r7, #20
 8007290:	4611      	mov	r1, r2
 8007292:	4618      	mov	r0, r3
 8007294:	f001 f8b1 	bl	80083fa <HAL_CAN_ConfigFilter>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <CO_CANmodule_init+0x150>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800729e:	f04f 33ff 	mov.w	r3, #4294967295
 80072a2:	e00c      	b.n	80072be <CO_CANmodule_init+0x16a>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2113      	movs	r1, #19
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fc23 	bl	8008af6 <HAL_CAN_ActivateNotification>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <CO_CANmodule_init+0x168>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ba:	e000      	b.n	80072be <CO_CANmodule_init+0x16a>
    }
#endif

    return CO_ERROR_NO;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3740      	adds	r7, #64	; 0x40
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200002e8 	.word	0x200002e8

080072cc <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <CO_CANmodule_disable+0x22>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f994 	bl	8008616 <HAL_CAN_Stop>
#endif
    }
}
 80072ee:	bf00      	nop
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	4608      	mov	r0, r1
 8007302:	4611      	mov	r1, r2
 8007304:	461a      	mov	r2, r3
 8007306:	4603      	mov	r3, r0
 8007308:	817b      	strh	r3, [r7, #10]
 800730a:	460b      	mov	r3, r1
 800730c:	813b      	strh	r3, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d03c      	beq.n	8007396 <CO_CANrxBufferInit+0x9e>
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d039      	beq.n	8007396 <CO_CANrxBufferInit+0x9e>
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d036      	beq.n	8007396 <CO_CANrxBufferInit+0x9e>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	891b      	ldrh	r3, [r3, #8]
 800732c:	897a      	ldrh	r2, [r7, #10]
 800732e:	429a      	cmp	r2, r3
 8007330:	d231      	bcs.n	8007396 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6859      	ldr	r1, [r3, #4]
 8007336:	897a      	ldrh	r2, [r7, #10]
 8007338:	4613      	mov	r3, r2
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	4413      	add	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007350:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007358:	b21b      	sxth	r3, r3
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	2a00      	cmp	r2, #0
 800735e:	d001      	beq.n	8007364 <CO_CANrxBufferInit+0x6c>
 8007360:	4a13      	ldr	r2, [pc, #76]	; (80073b0 <CO_CANrxBufferInit+0xb8>)
 8007362:	e000      	b.n	8007366 <CO_CANrxBufferInit+0x6e>
 8007364:	2200      	movs	r2, #0
 8007366:	4313      	orrs	r3, r2
 8007368:	b21b      	sxth	r3, r3
 800736a:	b29a      	uxth	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007378:	b21b      	sxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b21b      	sxth	r3, r3
 8007384:	b29a      	uxth	r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007392:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007394:	e002      	b.n	800739c <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007396:	23ff      	movs	r3, #255	; 0xff
 8007398:	75fb      	strb	r3, [r7, #23]
 800739a:	e000      	b.n	800739e <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800739c:	bf00      	nop
    }

    return ret;
 800739e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	ffff8000 	.word	0xffff8000

080073b4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	607b      	str	r3, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	817b      	strh	r3, [r7, #10]
 80073c2:	4613      	mov	r3, r2
 80073c4:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d024      	beq.n	800741a <CO_CANtxBufferInit+0x66>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8a1b      	ldrh	r3, [r3, #16]
 80073d4:	897a      	ldrh	r2, [r7, #10]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d21f      	bcs.n	800741a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	68d9      	ldr	r1, [r3, #12]
 80073de:	897a      	ldrh	r2, [r7, #10]
 80073e0:	4613      	mov	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	440b      	add	r3, r1
 80073ea:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80073ec:	893b      	ldrh	r3, [r7, #8]
 80073ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d002      	beq.n	80073fe <CO_CANtxBufferInit+0x4a>
 80073f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80073fc:	e000      	b.n	8007400 <CO_CANtxBufferInit+0x4c>
 80073fe:	2200      	movs	r2, #0
 8007400:	431a      	orrs	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f897 2020 	ldrb.w	r2, [r7, #32]
 800740c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007418:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 800741a:	697b      	ldr	r3, [r7, #20]
}
 800741c:	4618      	mov	r0, r3
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fa03 	bl	8008848 <HAL_CAN_GetTxMailboxesFreeLevel>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d028      	beq.n	800749a <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8007448:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <prv_send_can_message+0x7c>)
 800744a:	2200      	movs	r2, #0
 800744c:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <prv_send_can_message+0x7c>)
 8007450:	2200      	movs	r2, #0
 8007452:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	791b      	ldrb	r3, [r3, #4]
 8007458:	461a      	mov	r2, r3
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <prv_send_can_message+0x7c>)
 800745c:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007466:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <prv_send_can_message+0x7c>)
 8007468:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	0b9b      	lsrs	r3, r3, #14
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	4a0b      	ldr	r2, [pc, #44]	; (80074a4 <prv_send_can_message+0x7c>)
 8007476:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6898      	ldr	r0, [r3, #8]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	1d5a      	adds	r2, r3, #5
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	4907      	ldr	r1, [pc, #28]	; (80074a4 <prv_send_can_message+0x7c>)
 8007488:	f001 f90e 	bl	80086a8 <HAL_CAN_AddTxMessage>
 800748c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 800748e:	2b00      	cmp	r3, #0
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007498:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200002ec 	.word	0x200002ec

080074a8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8a5b      	ldrh	r3, [r3, #18]
 80074ca:	f043 0308 	orr.w	r3, r3, #8
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80074d4:	23f7      	movs	r3, #247	; 0xf7
 80074d6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d8:	f3ef 8310 	mrs	r3, PRIMASK
 80074dc:	613b      	str	r3, [r7, #16]
  return(result);
 80074de:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80074e4:	b672      	cpsid	i
}
 80074e6:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff ff9c 	bl	8007428 <prv_send_can_message>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	61da      	str	r2, [r3, #28]
 80074fe:	e009      	b.n	8007514 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2201      	movs	r2, #1
 8007504:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800750a:	b29b      	uxth	r3, r3
 800750c:	3301      	adds	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f383 8810 	msr	PRIMASK, r3
}
 8007520:	bf00      	nop

    return err;
 8007522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 800752e:	b480      	push	{r7}
 8007530:	b087      	sub	sp, #28
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753a:	f3ef 8310 	mrs	r3, PRIMASK
 800753e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007540:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007546:	b672      	cpsid	i
}
 8007548:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8007558:	2301      	movs	r3, #1
 800755a:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d032      	beq.n	80075cc <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8a1b      	ldrh	r3, [r3, #16]
 800756a:	827b      	strh	r3, [r7, #18]
 800756c:	e02b      	b.n	80075c6 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68d9      	ldr	r1, [r3, #12]
 8007572:	8a7a      	ldrh	r2, [r7, #18]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	440b      	add	r3, r1
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01d      	beq.n	80075c0 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68d9      	ldr	r1, [r3, #12]
 8007588:	8a7a      	ldrh	r2, [r7, #18]
 800758a:	4613      	mov	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	440b      	add	r3, r1
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d012      	beq.n	80075c0 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68d9      	ldr	r1, [r3, #12]
 800759e:	8a7a      	ldrh	r2, [r7, #18]
 80075a0:	4613      	mov	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	440b      	add	r3, r1
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80075bc:	2302      	movs	r3, #2
 80075be:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80075c0:	8a7b      	ldrh	r3, [r7, #18]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	827b      	strh	r3, [r7, #18]
 80075c6:	8a7b      	ldrh	r3, [r7, #18]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1d0      	bne.n	800756e <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	bf00      	nop
    if (tpdoDeleted) {
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8a5b      	ldrh	r3, [r3, #18]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	825a      	strh	r2, [r3, #18]
    }
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	d02e      	beq.n	800767e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	8a5b      	ldrh	r3, [r3, #18]
 8007624:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8007636:	89fb      	ldrh	r3, [r7, #14]
 8007638:	f043 0304 	orr.w	r3, r3, #4
 800763c:	81fb      	strh	r3, [r7, #14]
 800763e:	e01b      	b.n	8007678 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8007656:	89fb      	ldrh	r3, [r7, #14]
 8007658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 800766c:	89fb      	ldrh	r3, [r7, #14]
 800766e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007672:	f043 0302 	orr.w	r3, r3, #2
 8007676:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	89fa      	ldrh	r2, [r7, #14]
 800767c:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	; 0x30
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8007698:	2300      	movs	r3, #0
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80076a2:	f107 0314 	add.w	r3, r7, #20
 80076a6:	3305      	adds	r3, #5
 80076a8:	4a2c      	ldr	r2, [pc, #176]	; (800775c <prv_read_can_received_msg+0xd0>)
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f001 f900 	bl	80088b2 <HAL_CAN_GetRxMessage>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d14c      	bne.n	8007752 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <prv_read_can_received_msg+0xd0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a27      	ldr	r2, [pc, #156]	; (800775c <prv_read_can_received_msg+0xd0>)
 80076be:	68d2      	ldr	r2, [r2, #12]
 80076c0:	2a02      	cmp	r2, #2
 80076c2:	d102      	bne.n	80076ca <prv_read_can_received_msg+0x3e>
 80076c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80076c8:	e000      	b.n	80076cc <prv_read_can_received_msg+0x40>
 80076ca:	2200      	movs	r2, #0
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 80076d0:	4b22      	ldr	r3, [pc, #136]	; (800775c <prv_read_can_received_msg+0xd0>)
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 80076dc:	4b20      	ldr	r3, [pc, #128]	; (8007760 <prv_read_can_received_msg+0xd4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 80076e6:	be00      	bkpt	0x0000
 80076e8:	e01f      	b.n	800772a <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 80076ea:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <prv_read_can_received_msg+0xd4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80076f2:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <prv_read_can_received_msg+0xd4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	891b      	ldrh	r3, [r3, #8]
 80076f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80076fa:	e013      	b.n	8007724 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	4053      	eors	r3, r2
 8007706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007708:	8852      	ldrh	r2, [r2, #2]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8007716:	e008      	b.n	800772a <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800771a:	3b01      	subs	r3, #1
 800771c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	330c      	adds	r3, #12
 8007722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007724:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e8      	bne.n	80076fc <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800772a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <prv_read_can_received_msg+0xc8>
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <prv_read_can_received_msg+0xc8>
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007746:	6852      	ldr	r2, [r2, #4]
 8007748:	f107 0114 	add.w	r1, r7, #20
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	e000      	b.n	8007754 <prv_read_can_received_msg+0xc8>
        return;
 8007752:	bf00      	nop
    }
}
 8007754:	3730      	adds	r7, #48	; 0x30
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000304 	.word	0x20000304
 8007760:	200002e8 	.word	0x200002e8

08007764 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ff8b 	bl	800768c <prv_read_can_received_msg>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8007786:	2200      	movs	r2, #0
 8007788:	2101      	movs	r1, #1
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff7e 	bl	800768c <prv_read_can_received_msg>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d03d      	beq.n	8007834 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077be:	f3ef 8310 	mrs	r3, PRIMASK
 80077c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80077c4:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80077ca:	b672      	cpsid	i
}
 80077cc:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	8a1b      	ldrh	r3, [r3, #16]
 80077d2:	827b      	strh	r3, [r7, #18]
 80077d4:	e01e      	b.n	8007814 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d014      	beq.n	8007808 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 80077de:	6979      	ldr	r1, [r7, #20]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff fe21 	bl	8007428 <prv_send_can_message>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2200      	movs	r2, #0
 80077f0:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	695a      	ldr	r2, [r3, #20]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007808:	8a7b      	ldrh	r3, [r7, #18]
 800780a:	3b01      	subs	r3, #1
 800780c:	827b      	strh	r3, [r7, #18]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	3318      	adds	r3, #24
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	8a7b      	ldrh	r3, [r7, #18]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1dd      	bne.n	80077d6 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 800781a:	8a7b      	ldrh	r3, [r7, #18]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f383 8810 	msr	PRIMASK, r3
}
 8007832:	bf00      	nop
    }
}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2101      	movs	r1, #1
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff ffa4 	bl	8007798 <CO_CANinterrupt_TX>
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200002e8 	.word	0x200002e8

0800785c <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007864:	4b04      	ldr	r3, [pc, #16]	; (8007878 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ff94 	bl	8007798 <CO_CANinterrupt_TX>
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200002e8 	.word	0x200002e8

0800787c <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff ff84 	bl	8007798 <CO_CANinterrupt_TX>
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	200002e8 	.word	0x200002e8

0800789c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80078ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <vApplicationGetIdleTaskMemory+0x30>)
 80078b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000320 	.word	0x20000320
 80078cc:	200003c0 	.word	0x200003c0

080078d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80078d0:	b5b0      	push	{r4, r5, r7, lr}
 80078d2:	b08e      	sub	sp, #56	; 0x38
 80078d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80078d6:	f000 fc5c 	bl	8008192 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80078da:	f000 f837 	bl	800794c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80078de:	f000 f917 	bl	8007b10 <MX_GPIO_Init>
  MX_CAN1_Init();
 80078e2:	f000 f879 	bl	80079d8 <MX_CAN1_Init>
  MX_TIM7_Init();
 80078e6:	f000 f8ad 	bl	8007a44 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80078ea:	f000 f8e1 	bl	8007ab0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, canopen_task, osPriorityNormal, 0, 128);
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <main+0x6c>)
 80078f0:	f107 041c 	add.w	r4, r7, #28
 80078f4:	461d      	mov	r5, r3
 80078f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007902:	f107 031c 	add.w	r3, r7, #28
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f004 fbf9 	bl	800c100 <osThreadCreate>
 800790e:	4603      	mov	r3, r0
 8007910:	4a0b      	ldr	r2, [pc, #44]	; (8007940 <main+0x70>)
 8007912:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, blink_task, osPriorityNormal, 0, 128);
 8007914:	4b0b      	ldr	r3, [pc, #44]	; (8007944 <main+0x74>)
 8007916:	463c      	mov	r4, r7
 8007918:	461d      	mov	r5, r3
 800791a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800791c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800791e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8007926:	463b      	mov	r3, r7
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f004 fbe8 	bl	800c100 <osThreadCreate>
 8007930:	4603      	mov	r3, r0
 8007932:	4a05      	ldr	r2, [pc, #20]	; (8007948 <main+0x78>)
 8007934:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007936:	f004 fbdc 	bl	800c0f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800793a:	e7fe      	b.n	800793a <main+0x6a>
 800793c:	0800e82c 	.word	0x0800e82c
 8007940:	200006bc 	.word	0x200006bc
 8007944:	0800e854 	.word	0x0800e854
 8007948:	200006c0 	.word	0x200006c0

0800794c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b096      	sub	sp, #88	; 0x58
 8007950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	2244      	movs	r2, #68	; 0x44
 8007958:	2100      	movs	r1, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f006 f9dc 	bl	800dd18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007960:	463b      	mov	r3, r7
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	605a      	str	r2, [r3, #4]
 8007968:	609a      	str	r2, [r3, #8]
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800796e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007972:	f001 fe13 	bl	800959c <HAL_PWREx_ControlVoltageScaling>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800797c:	f000 f95a 	bl	8007c34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007980:	2310      	movs	r3, #16
 8007982:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007984:	2301      	movs	r3, #1
 8007986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800798c:	2370      	movs	r3, #112	; 0x70
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f001 fe55 	bl	8009648 <HAL_RCC_OscConfig>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80079a4:	f000 f946 	bl	8007c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079a8:	230f      	movs	r3, #15
 80079aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80079ac:	2300      	movs	r3, #0
 80079ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80079bc:	463b      	mov	r3, r7
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 fa55 	bl	8009e70 <HAL_RCC_ClockConfig>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80079cc:	f000 f932 	bl	8007c34 <Error_Handler>
  }
}
 80079d0:	bf00      	nop
 80079d2:	3758      	adds	r7, #88	; 0x58
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <MX_CAN1_Init+0x68>)
 80079e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80079fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <MX_CAN1_Init+0x64>)
 80079fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a02:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007a0a:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007a1c:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007a28:	4804      	ldr	r0, [pc, #16]	; (8007a3c <MX_CAN1_Init+0x64>)
 8007a2a:	f000 fbeb 	bl	8008204 <HAL_CAN_Init>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007a34:	f000 f8fe 	bl	8007c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007a38:	bf00      	nop
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200005c0 	.word	0x200005c0
 8007a40:	40006400 	.word	0x40006400

08007a44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007a54:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a56:	4a15      	ldr	r2, [pc, #84]	; (8007aac <MX_TIM7_Init+0x68>)
 8007a58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8007a5a:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a5c:	223f      	movs	r2, #63	; 0x3f
 8007a5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007a74:	480c      	ldr	r0, [pc, #48]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a76:	f002 ff39 	bl	800a8ec <HAL_TIM_Base_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8007a80:	f000 f8d8 	bl	8007c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a84:	2300      	movs	r3, #0
 8007a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4805      	ldr	r0, [pc, #20]	; (8007aa8 <MX_TIM7_Init+0x64>)
 8007a92:	f003 f995 	bl	800adc0 <HAL_TIMEx_MasterConfigSynchronization>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8007a9c:	f000 f8ca 	bl	8007c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	200005e8 	.word	0x200005e8
 8007aac:	40001400 	.word	0x40001400

08007ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ab4:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ab6:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <MX_USART1_UART_Init+0x5c>)
 8007ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ace:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ad6:	220c      	movs	r2, #12
 8007ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007ae6:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007af2:	4805      	ldr	r0, [pc, #20]	; (8007b08 <MX_USART1_UART_Init+0x58>)
 8007af4:	f003 f9e8 	bl	800aec8 <HAL_UART_Init>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007afe:	f000 f899 	bl	8007c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000634 	.word	0x20000634
 8007b0c:	40013800 	.word	0x40013800

08007b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b16:	f107 030c 	add.w	r3, r7, #12
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	605a      	str	r2, [r3, #4]
 8007b20:	609a      	str	r2, [r3, #8]
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b26:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b2c:	f043 0301 	orr.w	r3, r3, #1
 8007b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b32:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b3e:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b42:	4a10      	ldr	r2, [pc, #64]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	; (8007b84 <MX_GPIO_Init+0x74>)
 8007b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8007b56:	2200      	movs	r2, #0
 8007b58:	2108      	movs	r1, #8
 8007b5a:	480b      	ldr	r0, [pc, #44]	; (8007b88 <MX_GPIO_Init+0x78>)
 8007b5c:	f001 fcde 	bl	800951c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b60:	2308      	movs	r3, #8
 8007b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b64:	2301      	movs	r3, #1
 8007b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b70:	f107 030c 	add.w	r3, r7, #12
 8007b74:	4619      	mov	r1, r3
 8007b76:	4804      	ldr	r0, [pc, #16]	; (8007b88 <MX_GPIO_Init+0x78>)
 8007b78:	f001 fb66 	bl	8009248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007b7c:	bf00      	nop
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40021000 	.word	0x40021000
 8007b88:	48000400 	.word	0x48000400

08007b8c <canopen_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_canopen_task */
void canopen_task(void const * argument)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  //static portTickType xLastWakeTime;
  //const portTickType xFrequency = pdMS_TO_TICKS(500);
  //xLastWakeTime = xTaskGetTickCount();
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <canopen_task+0x40>)
 8007b96:	613b      	str	r3, [r7, #16]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007b98:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <canopen_task+0x44>)
 8007b9a:	617b      	str	r3, [r7, #20]
  canOpenNodeSTM32.timerHandle = &htim7;
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <canopen_task+0x48>)
 8007b9e:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.desiredNodeID = 21;
 8007ba0:	2315      	movs	r3, #21
 8007ba2:	723b      	strb	r3, [r7, #8]
  canOpenNodeSTM32.baudrate = 1000;
 8007ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ba8:	817b      	strh	r3, [r7, #10]
  canopen_app_init(&canOpenNodeSTM32);
 8007baa:	f107 0308 	add.w	r3, r7, #8
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff f8a8 	bl	8006d04 <canopen_app_init>
  HAL_UART_Transmit_IT(&huart1,data,3);
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	4908      	ldr	r1, [pc, #32]	; (8007bd8 <canopen_task+0x4c>)
 8007bb8:	4808      	ldr	r0, [pc, #32]	; (8007bdc <canopen_task+0x50>)
 8007bba:	f003 f9d3 	bl	800af64 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  for(;;)
  {
	//Reflect CANopenStatus on LEDs
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, !canOpenNodeSTM32.outStatusLEDGreen);
    canopen_app_process();
 8007bbe:	f7ff f9f3 	bl	8006fa8 <canopen_app_process>
    // Sleep for 1ms, you can decrease it if required, in the canopen_app_process we will double check to make sure 1ms passed
    //vTaskDelayUntil(xLastWakeTime,xFrequency);
    //vTaskDelay(pdMS_TO_TICKS(1));
    osDelay(1);
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f004 fae8 	bl	800c198 <osDelay>
    canopen_app_process();
 8007bc8:	e7f9      	b.n	8007bbe <canopen_task+0x32>
 8007bca:	bf00      	nop
 8007bcc:	200005c0 	.word	0x200005c0
 8007bd0:	080079d9 	.word	0x080079d9
 8007bd4:	200005e8 	.word	0x200005e8
 8007bd8:	20000248 	.word	0x20000248
 8007bdc:	20000634 	.word	0x20000634

08007be0 <blink_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_task */
void blink_task(void const * argument)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8007be8:	2108      	movs	r1, #8
 8007bea:	4803      	ldr	r0, [pc, #12]	; (8007bf8 <blink_task+0x18>)
 8007bec:	f001 fcae 	bl	800954c <HAL_GPIO_TogglePin>
    osDelay(1);
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	f004 fad1 	bl	800c198 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8007bf6:	e7f7      	b.n	8007be8 <blink_task+0x8>
 8007bf8:	48000400 	.word	0x48000400

08007bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a08      	ldr	r2, [pc, #32]	; (8007c2c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d101      	bne.n	8007c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007c0e:	f000 fad9 	bl	80081c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  // Handle CANOpen app interrupts
  if (htim == canopenNodeSTM32->timerHandle)
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
      canopen_app_interrupt();
 8007c1e:	f7ff fa2f 	bl	8007080 <canopen_app_interrupt>
  }
  /* USER CODE END Callback 1 */
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40012c00 	.word	0x40012c00
 8007c30:	200002d4 	.word	0x200002d4

08007c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007c38:	b672      	cpsid	i
}
 8007c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007c3c:	e7fe      	b.n	8007c3c <Error_Handler+0x8>
	...

08007c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4a:	4a10      	ldr	r2, [pc, #64]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	6613      	str	r3, [r2, #96]	; 0x60
 8007c52:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c62:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c68:	6593      	str	r3, [r2, #88]	; 0x58
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <HAL_MspInit+0x4c>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c76:	2200      	movs	r2, #0
 8007c78:	210f      	movs	r1, #15
 8007c7a:	f06f 0001 	mvn.w	r0, #1
 8007c7e:	f001 fa36 	bl	80090ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40021000 	.word	0x40021000

08007c90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	609a      	str	r2, [r3, #8]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a24      	ldr	r2, [pc, #144]	; (8007d40 <HAL_CAN_MspInit+0xb0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d141      	bne.n	8007d36 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8007cbe:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cca:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <HAL_CAN_MspInit+0xb4>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ce2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007cf4:	2309      	movs	r3, #9
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cf8:	f107 0314 	add.w	r3, r7, #20
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d02:	f001 faa1 	bl	8009248 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2105      	movs	r1, #5
 8007d0a:	2013      	movs	r0, #19
 8007d0c:	f001 f9ef 	bl	80090ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007d10:	2013      	movs	r0, #19
 8007d12:	f001 fa08 	bl	8009126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007d16:	2200      	movs	r2, #0
 8007d18:	2105      	movs	r1, #5
 8007d1a:	2014      	movs	r0, #20
 8007d1c:	f001 f9e7 	bl	80090ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007d20:	2014      	movs	r0, #20
 8007d22:	f001 fa00 	bl	8009126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2105      	movs	r1, #5
 8007d2a:	2015      	movs	r0, #21
 8007d2c:	f001 f9df 	bl	80090ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007d30:	2015      	movs	r0, #21
 8007d32:	f001 f9f8 	bl	8009126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007d36:	bf00      	nop
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40006400 	.word	0x40006400
 8007d44:	40021000 	.word	0x40021000

08007d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <HAL_TIM_Base_MspInit+0x44>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d113      	bne.n	8007d82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <HAL_TIM_Base_MspInit+0x48>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <HAL_TIM_Base_MspInit+0x48>)
 8007d60:	f043 0320 	orr.w	r3, r3, #32
 8007d64:	6593      	str	r3, [r2, #88]	; 0x58
 8007d66:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <HAL_TIM_Base_MspInit+0x48>)
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2105      	movs	r1, #5
 8007d76:	2037      	movs	r0, #55	; 0x37
 8007d78:	f001 f9b9 	bl	80090ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007d7c:	2037      	movs	r0, #55	; 0x37
 8007d7e:	f001 f9d2 	bl	8009126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40001400 	.word	0x40001400
 8007d90:	40021000 	.word	0x40021000

08007d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b09e      	sub	sp, #120	; 0x78
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	609a      	str	r2, [r3, #8]
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007dac:	f107 0310 	add.w	r3, r7, #16
 8007db0:	2254      	movs	r2, #84	; 0x54
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f005 ffaf 	bl	800dd18 <memset>
  if(huart->Instance==USART1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <HAL_UART_MspInit+0xb8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d13f      	bne.n	8007e44 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007dcc:	f107 0310 	add.w	r3, r7, #16
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f002 faa3 	bl	800a31c <HAL_RCCEx_PeriphCLKConfig>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007ddc:	f7ff ff2a 	bl	8007c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de4:	4a1a      	ldr	r2, [pc, #104]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dea:	6613      	str	r3, [r2, #96]	; 0x60
 8007dec:	4b18      	ldr	r3, [pc, #96]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfc:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_UART_MspInit+0xbc>)
 8007e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	60bb      	str	r3, [r7, #8]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007e10:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007e14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e16:	2302      	movs	r3, #2
 8007e18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007e22:	2307      	movs	r3, #7
 8007e24:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e30:	f001 fa0a 	bl	8009248 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007e34:	2200      	movs	r2, #0
 8007e36:	2105      	movs	r1, #5
 8007e38:	2025      	movs	r0, #37	; 0x25
 8007e3a:	f001 f958 	bl	80090ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007e3e:	2025      	movs	r0, #37	; 0x25
 8007e40:	f001 f971 	bl	8009126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007e44:	bf00      	nop
 8007e46:	3778      	adds	r7, #120	; 0x78
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40013800 	.word	0x40013800
 8007e50:	40021000 	.word	0x40021000

08007e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08c      	sub	sp, #48	; 0x30
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <HAL_InitTick+0xc8>)
 8007e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e66:	4a2d      	ldr	r2, [pc, #180]	; (8007f1c <HAL_InitTick+0xc8>)
 8007e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8007e6e:	4b2b      	ldr	r3, [pc, #172]	; (8007f1c <HAL_InitTick+0xc8>)
 8007e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e76:	60bb      	str	r3, [r7, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e7a:	f107 020c 	add.w	r2, r7, #12
 8007e7e:	f107 0310 	add.w	r3, r7, #16
 8007e82:	4611      	mov	r1, r2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f002 f9b7 	bl	800a1f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007e8a:	f002 f99f 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 8007e8e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <HAL_InitTick+0xcc>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	0c9b      	lsrs	r3, r3, #18
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007e9e:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <HAL_InitTick+0xd0>)
 8007ea0:	4a21      	ldr	r2, [pc, #132]	; (8007f28 <HAL_InitTick+0xd4>)
 8007ea2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <HAL_InitTick+0xd0>)
 8007ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <HAL_InitTick+0xd0>)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007eb2:	4b1c      	ldr	r3, [pc, #112]	; (8007f24 <HAL_InitTick+0xd0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <HAL_InitTick+0xd0>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ebe:	4b19      	ldr	r3, [pc, #100]	; (8007f24 <HAL_InitTick+0xd0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007ec4:	4817      	ldr	r0, [pc, #92]	; (8007f24 <HAL_InitTick+0xd0>)
 8007ec6:	f002 fd11 	bl	800a8ec <HAL_TIM_Base_Init>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11b      	bne.n	8007f10 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007ed8:	4812      	ldr	r0, [pc, #72]	; (8007f24 <HAL_InitTick+0xd0>)
 8007eda:	f002 fd5f 	bl	800a99c <HAL_TIM_Base_Start_IT>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d111      	bne.n	8007f10 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007eec:	2019      	movs	r0, #25
 8007eee:	f001 f91a 	bl	8009126 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d808      	bhi.n	8007f0a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	2019      	movs	r0, #25
 8007efe:	f001 f8f6 	bl	80090ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007f02:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <HAL_InitTick+0xd8>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	e002      	b.n	8007f10 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3730      	adds	r7, #48	; 0x30
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40021000 	.word	0x40021000
 8007f20:	431bde83 	.word	0x431bde83
 8007f24:	200006c4 	.word	0x200006c4
 8007f28:	40012c00 	.word	0x40012c00
 8007f2c:	20000250 	.word	0x20000250

08007f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007f34:	e7fe      	b.n	8007f34 <NMI_Handler+0x4>

08007f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007f36:	b480      	push	{r7}
 8007f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007f3a:	e7fe      	b.n	8007f3a <HardFault_Handler+0x4>

08007f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f40:	e7fe      	b.n	8007f40 <MemManage_Handler+0x4>

08007f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f42:	b480      	push	{r7}
 8007f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f46:	e7fe      	b.n	8007f46 <BusFault_Handler+0x4>

08007f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f4c:	e7fe      	b.n	8007f4c <UsageFault_Handler+0x4>

08007f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f60:	4802      	ldr	r0, [pc, #8]	; (8007f6c <CAN1_TX_IRQHandler+0x10>)
 8007f62:	f000 fdee 	bl	8008b42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	200005c0 	.word	0x200005c0

08007f70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f74:	4802      	ldr	r0, [pc, #8]	; (8007f80 <CAN1_RX0_IRQHandler+0x10>)
 8007f76:	f000 fde4 	bl	8008b42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200005c0 	.word	0x200005c0

08007f84 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f88:	4802      	ldr	r0, [pc, #8]	; (8007f94 <CAN1_RX1_IRQHandler+0x10>)
 8007f8a:	f000 fdda 	bl	8008b42 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007f8e:	bf00      	nop
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	200005c0 	.word	0x200005c0

08007f98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007f9c:	4802      	ldr	r0, [pc, #8]	; (8007fa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007f9e:	f002 fd80 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200006c4 	.word	0x200006c4

08007fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007fb0:	4802      	ldr	r0, [pc, #8]	; (8007fbc <USART1_IRQHandler+0x10>)
 8007fb2:	f003 f835 	bl	800b020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007fb6:	bf00      	nop
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000634 	.word	0x20000634

08007fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007fc4:	4802      	ldr	r0, [pc, #8]	; (8007fd0 <TIM7_IRQHandler+0x10>)
 8007fc6:	f002 fd6c 	bl	800aaa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007fca:	bf00      	nop
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200005e8 	.word	0x200005e8

08007fd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	e00a      	b.n	8007ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007fe6:	f3af 8000 	nop.w
 8007fea:	4601      	mov	r1, r0
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	60ba      	str	r2, [r7, #8]
 8007ff2:	b2ca      	uxtb	r2, r1
 8007ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	dbf0      	blt.n	8007fe6 <_read+0x12>
  }

  return len;
 8008004:	687b      	ldr	r3, [r7, #4]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b086      	sub	sp, #24
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800801a:	2300      	movs	r3, #0
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	e009      	b.n	8008034 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	60ba      	str	r2, [r7, #8]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	4618      	mov	r0, r3
 800802a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	3301      	adds	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	dbf1      	blt.n	8008020 <_write+0x12>
  }
  return len;
 800803c:	687b      	ldr	r3, [r7, #4]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <_close>:

int _close(int file)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800806e:	605a      	str	r2, [r3, #4]
  return 0;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <_isatty>:

int _isatty(int file)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008086:	2301      	movs	r3, #1
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80080b8:	4a14      	ldr	r2, [pc, #80]	; (800810c <_sbrk+0x5c>)
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <_sbrk+0x60>)
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80080c4:	4b13      	ldr	r3, [pc, #76]	; (8008114 <_sbrk+0x64>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80080cc:	4b11      	ldr	r3, [pc, #68]	; (8008114 <_sbrk+0x64>)
 80080ce:	4a12      	ldr	r2, [pc, #72]	; (8008118 <_sbrk+0x68>)
 80080d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <_sbrk+0x64>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d207      	bcs.n	80080f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80080e0:	f005 fece 	bl	800de80 <__errno>
 80080e4:	4603      	mov	r3, r0
 80080e6:	220c      	movs	r2, #12
 80080e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	e009      	b.n	8008104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <_sbrk+0x64>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080f6:	4b07      	ldr	r3, [pc, #28]	; (8008114 <_sbrk+0x64>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	4a05      	ldr	r2, [pc, #20]	; (8008114 <_sbrk+0x64>)
 8008100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20010000 	.word	0x20010000
 8008110:	00000400 	.word	0x00000400
 8008114:	20000710 	.word	0x20000710
 8008118:	20001570 	.word	0x20001570

0800811c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <SystemInit+0x20>)
 8008122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008126:	4a05      	ldr	r2, [pc, #20]	; (800813c <SystemInit+0x20>)
 8008128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800812c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008130:	bf00      	nop
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	e000ed00 	.word	0xe000ed00

08008140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008144:	f7ff ffea 	bl	800811c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008148:	480c      	ldr	r0, [pc, #48]	; (800817c <LoopForever+0x6>)
  ldr r1, =_edata
 800814a:	490d      	ldr	r1, [pc, #52]	; (8008180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800814c:	4a0d      	ldr	r2, [pc, #52]	; (8008184 <LoopForever+0xe>)
  movs r3, #0
 800814e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008150:	e002      	b.n	8008158 <LoopCopyDataInit>

08008152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008156:	3304      	adds	r3, #4

08008158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800815a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800815c:	d3f9      	bcc.n	8008152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008160:	4c0a      	ldr	r4, [pc, #40]	; (800818c <LoopForever+0x16>)
  movs r3, #0
 8008162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008164:	e001      	b.n	800816a <LoopFillZerobss>

08008166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008168:	3204      	adds	r2, #4

0800816a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800816a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800816c:	d3fb      	bcc.n	8008166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800816e:	f005 fe8d 	bl	800de8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008172:	f7ff fbad 	bl	80078d0 <main>

08008176 <LoopForever>:

LoopForever:
    b LoopForever
 8008176:	e7fe      	b.n	8008176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008178:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800817c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008180:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8008184:	0800ec54 	.word	0x0800ec54
  ldr r2, =_sbss
 8008188:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 800818c:	20001570 	.word	0x20001570

08008190 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008190:	e7fe      	b.n	8008190 <ADC1_IRQHandler>

08008192 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800819c:	2003      	movs	r0, #3
 800819e:	f000 ff9b 	bl	80090d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80081a2:	200f      	movs	r0, #15
 80081a4:	f7ff fe56 	bl	8007e54 <HAL_InitTick>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	71fb      	strb	r3, [r7, #7]
 80081b2:	e001      	b.n	80081b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80081b4:	f7ff fd44 	bl	8007c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80081b8:	79fb      	ldrb	r3, [r7, #7]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80081c8:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <HAL_IncTick+0x20>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <HAL_IncTick+0x24>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4413      	add	r3, r2
 80081d4:	4a04      	ldr	r2, [pc, #16]	; (80081e8 <HAL_IncTick+0x24>)
 80081d6:	6013      	str	r3, [r2, #0]
}
 80081d8:	bf00      	nop
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000254 	.word	0x20000254
 80081e8:	20000714 	.word	0x20000714

080081ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
  return uwTick;
 80081f0:	4b03      	ldr	r3, [pc, #12]	; (8008200 <HAL_GetTick+0x14>)
 80081f2:	681b      	ldr	r3, [r3, #0]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000714 	.word	0x20000714

08008204 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e0ed      	b.n	80083f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d102      	bne.n	8008228 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fd34 	bl	8007c90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0201 	orr.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008238:	f7ff ffd8 	bl	80081ec <HAL_GetTick>
 800823c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800823e:	e012      	b.n	8008266 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008240:	f7ff ffd4 	bl	80081ec <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b0a      	cmp	r3, #10
 800824c:	d90b      	bls.n	8008266 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2205      	movs	r2, #5
 800825e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e0c5      	b.n	80083f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d0e5      	beq.n	8008240 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 0202 	bic.w	r2, r2, #2
 8008282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008284:	f7ff ffb2 	bl	80081ec <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800828a:	e012      	b.n	80082b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800828c:	f7ff ffae 	bl	80081ec <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b0a      	cmp	r3, #10
 8008298:	d90b      	bls.n	80082b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2205      	movs	r2, #5
 80082aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e09f      	b.n	80083f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7e1b      	ldrb	r3, [r3, #24]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d108      	bne.n	80082da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e007      	b.n	80082ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7e5b      	ldrb	r3, [r3, #25]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d108      	bne.n	8008304 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e007      	b.n	8008314 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008312:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	7e9b      	ldrb	r3, [r3, #26]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d108      	bne.n	800832e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0220 	orr.w	r2, r2, #32
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e007      	b.n	800833e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0220 	bic.w	r2, r2, #32
 800833c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	7edb      	ldrb	r3, [r3, #27]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d108      	bne.n	8008358 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0210 	bic.w	r2, r2, #16
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e007      	b.n	8008368 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0210 	orr.w	r2, r2, #16
 8008366:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	7f1b      	ldrb	r3, [r3, #28]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d108      	bne.n	8008382 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0208 	orr.w	r2, r2, #8
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e007      	b.n	8008392 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0208 	bic.w	r2, r2, #8
 8008390:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7f5b      	ldrb	r3, [r3, #29]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d108      	bne.n	80083ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0204 	orr.w	r2, r2, #4
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e007      	b.n	80083bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0204 	bic.w	r2, r2, #4
 80083ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	ea42 0103 	orr.w	r1, r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	1e5a      	subs	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b087      	sub	sp, #28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008410:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008412:	7cfb      	ldrb	r3, [r7, #19]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d003      	beq.n	8008420 <HAL_CAN_ConfigFilter+0x26>
 8008418:	7cfb      	ldrb	r3, [r7, #19]
 800841a:	2b02      	cmp	r3, #2
 800841c:	f040 80aa 	bne.w	8008574 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008426:	f043 0201 	orr.w	r2, r3, #1
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	f003 031f 	and.w	r3, r3, #31
 8008438:	2201      	movs	r2, #1
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	43db      	mvns	r3, r3
 800844a:	401a      	ands	r2, r3
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d123      	bne.n	80084a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	43db      	mvns	r3, r3
 8008464:	401a      	ands	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800847c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3248      	adds	r2, #72	; 0x48
 8008482:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008496:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008498:	6979      	ldr	r1, [r7, #20]
 800849a:	3348      	adds	r3, #72	; 0x48
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	440b      	add	r3, r1
 80084a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d122      	bne.n	80084f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80084ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	3248      	adds	r2, #72	; 0x48
 80084d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80084e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	3348      	adds	r3, #72	; 0x48
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	440b      	add	r3, r1
 80084ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	43db      	mvns	r3, r3
 8008502:	401a      	ands	r2, r3
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800850a:	e007      	b.n	800851c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	431a      	orrs	r2, r3
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	43db      	mvns	r3, r3
 800852e:	401a      	ands	r2, r3
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008536:	e007      	b.n	8008548 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	431a      	orrs	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d107      	bne.n	8008560 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	431a      	orrs	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008566:	f023 0201 	bic.w	r2, r3, #1
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	e006      	b.n	8008582 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
  }
}
 8008582:	4618      	mov	r0, r3
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d12e      	bne.n	8008600 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2202      	movs	r2, #2
 80085a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 0201 	bic.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80085ba:	f7ff fe17 	bl	80081ec <HAL_GetTick>
 80085be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80085c0:	e012      	b.n	80085e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80085c2:	f7ff fe13 	bl	80081ec <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b0a      	cmp	r3, #10
 80085ce:	d90b      	bls.n	80085e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2205      	movs	r2, #5
 80085e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e012      	b.n	800860e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e006      	b.n	800860e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
  }
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d133      	bne.n	8008692 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800863a:	f7ff fdd7 	bl	80081ec <HAL_GetTick>
 800863e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008640:	e012      	b.n	8008668 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008642:	f7ff fdd3 	bl	80081ec <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b0a      	cmp	r3, #10
 800864e:	d90b      	bls.n	8008668 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2205      	movs	r2, #5
 8008660:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e01b      	b.n	80086a0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0e5      	beq.n	8008642 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0202 	bic.w	r2, r2, #2
 8008684:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	e006      	b.n	80086a0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
  }
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b089      	sub	sp, #36	; 0x24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80086c6:	7ffb      	ldrb	r3, [r7, #31]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d003      	beq.n	80086d4 <HAL_CAN_AddTxMessage+0x2c>
 80086cc:	7ffb      	ldrb	r3, [r7, #31]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	f040 80ad 	bne.w	800882e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8095 	beq.w	800881e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	0e1b      	lsrs	r3, r3, #24
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80086fe:	2201      	movs	r2, #1
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	409a      	lsls	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10d      	bne.n	800872c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	6809      	ldr	r1, [r1, #0]
 800871e:	431a      	orrs	r2, r3
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	3318      	adds	r3, #24
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	440b      	add	r3, r1
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e00f      	b.n	800874c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008736:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008740:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3318      	adds	r3, #24
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	440b      	add	r3, r1
 800874a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6819      	ldr	r1, [r3, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	3318      	adds	r3, #24
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	440b      	add	r3, r1
 800875c:	3304      	adds	r3, #4
 800875e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	7d1b      	ldrb	r3, [r3, #20]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d111      	bne.n	800878c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3318      	adds	r3, #24
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	4413      	add	r3, r2
 8008774:	3304      	adds	r3, #4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	6811      	ldr	r1, [r2, #0]
 800877c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	3318      	adds	r3, #24
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	440b      	add	r3, r1
 8008788:	3304      	adds	r3, #4
 800878a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3307      	adds	r3, #7
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	061a      	lsls	r2, r3, #24
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3306      	adds	r3, #6
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	041b      	lsls	r3, r3, #16
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3305      	adds	r3, #5
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	4313      	orrs	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	3204      	adds	r2, #4
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	4610      	mov	r0, r2
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	6811      	ldr	r1, [r2, #0]
 80087b4:	ea43 0200 	orr.w	r2, r3, r0
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	440b      	add	r3, r1
 80087be:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80087c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3303      	adds	r3, #3
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	061a      	lsls	r2, r3, #24
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3302      	adds	r3, #2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	041b      	lsls	r3, r3, #16
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3301      	adds	r3, #1
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	4313      	orrs	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	4610      	mov	r0, r2
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	ea43 0200 	orr.w	r2, r3, r0
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	440b      	add	r3, r1
 80087f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80087f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	3318      	adds	r3, #24
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	4413      	add	r3, r2
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	6811      	ldr	r1, [r2, #0]
 800880c:	f043 0201 	orr.w	r2, r3, #1
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	3318      	adds	r3, #24
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	440b      	add	r3, r1
 8008818:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	e00e      	b.n	800883c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e006      	b.n	800883c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
  }
}
 800883c:	4618      	mov	r0, r3
 800883e:	3724      	adds	r7, #36	; 0x24
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800885a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d002      	beq.n	8008868 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d11d      	bne.n	80088a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d003      	beq.n	80088d6 <HAL_CAN_GetRxMessage+0x24>
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	f040 8103 	bne.w	8008adc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10e      	bne.n	80088fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d116      	bne.n	8008918 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0f7      	b.n	8008aea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d107      	bne.n	8008918 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e0e8      	b.n	8008aea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	331b      	adds	r3, #27
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	4413      	add	r3, r2
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0204 	and.w	r2, r3, #4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	331b      	adds	r3, #27
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	4413      	add	r3, r2
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	0d5b      	lsrs	r3, r3, #21
 8008946:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e00b      	b.n	8008968 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	331b      	adds	r3, #27
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	4413      	add	r3, r2
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	08db      	lsrs	r3, r3, #3
 8008960:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	331b      	adds	r3, #27
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	4413      	add	r3, r2
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0202 	and.w	r2, r3, #2
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	331b      	adds	r3, #27
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	4413      	add	r3, r2
 800898a:	3304      	adds	r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2208      	movs	r2, #8
 800899a:	611a      	str	r2, [r3, #16]
 800899c:	e00b      	b.n	80089b6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	331b      	adds	r3, #27
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	4413      	add	r3, r2
 80089aa:	3304      	adds	r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 020f 	and.w	r2, r3, #15
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	331b      	adds	r3, #27
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	4413      	add	r3, r2
 80089c2:	3304      	adds	r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	331b      	adds	r3, #27
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	4413      	add	r3, r2
 80089da:	3304      	adds	r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	0a1a      	lsrs	r2, r3, #8
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	0c1a      	lsrs	r2, r3, #16
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	0e1a      	lsrs	r2, r3, #24
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	3303      	adds	r3, #3
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	0a1a      	lsrs	r2, r3, #8
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	3305      	adds	r3, #5
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	0c1a      	lsrs	r2, r3, #16
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	3306      	adds	r3, #6
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	0e1a      	lsrs	r2, r3, #24
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3307      	adds	r3, #7
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d108      	bne.n	8008ac8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0220 	orr.w	r2, r2, #32
 8008ac4:	60da      	str	r2, [r3, #12]
 8008ac6:	e007      	b.n	8008ad8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691a      	ldr	r2, [r3, #16]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0220 	orr.w	r2, r2, #32
 8008ad6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e006      	b.n	8008aea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
  }
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d002      	beq.n	8008b14 <HAL_CAN_ActivateNotification+0x1e>
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d109      	bne.n	8008b28 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6959      	ldr	r1, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e006      	b.n	8008b36 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b08a      	sub	sp, #40	; 0x28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d07c      	beq.n	8008c82 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d023      	beq.n	8008bda <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2201      	movs	r2, #1
 8008b98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7fe fe49 	bl	800783c <HAL_CAN_TxMailbox0CompleteCallback>
 8008baa:	e016      	b.n	8008bda <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbe:	e00c      	b.n	8008bda <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd2:	e002      	b.n	8008bda <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f96b 	bl	8008eb0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d024      	beq.n	8008c2e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7fe fe2f 	bl	800785c <HAL_CAN_TxMailbox1CompleteCallback>
 8008bfe:	e016      	b.n	8008c2e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d004      	beq.n	8008c14 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
 8008c12:	e00c      	b.n	8008c2e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d004      	beq.n	8008c28 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
 8008c26:	e002      	b.n	8008c2e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f94b 	bl	8008ec4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d024      	beq.n	8008c82 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008c40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7fe fe15 	bl	800787c <HAL_CAN_TxMailbox2CompleteCallback>
 8008c52:	e016      	b.n	8008c82 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
 8008c66:	e00c      	b.n	8008c82 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7a:	e002      	b.n	8008c82 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f92b 	bl	8008ed8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00c      	beq.n	8008ca6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2210      	movs	r2, #16
 8008ca4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f003 0308 	and.w	r3, r3, #8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f912 	bl	8008eec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fe fd3f 	bl	8007764 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00c      	beq.n	8008d0a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2210      	movs	r2, #16
 8008d08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d006      	beq.n	8008d2c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2208      	movs	r2, #8
 8008d24:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8ea 	bl	8008f00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	f003 0310 	and.w	r3, r3, #16
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d009      	beq.n	8008d4a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fe fd1a 	bl	800777e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2210      	movs	r2, #16
 8008d64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8d4 	bl	8008f14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2208      	movs	r2, #8
 8008d86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8cd 	bl	8008f28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d07b      	beq.n	8008e90 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d072      	beq.n	8008e88 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d008      	beq.n	8008dbe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d008      	beq.n	8008dda <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	f043 0302 	orr.w	r3, r3, #2
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	f043 0304 	orr.w	r3, r3, #4
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d043      	beq.n	8008e88 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03e      	beq.n	8008e88 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e10:	2b60      	cmp	r3, #96	; 0x60
 8008e12:	d02b      	beq.n	8008e6c <HAL_CAN_IRQHandler+0x32a>
 8008e14:	2b60      	cmp	r3, #96	; 0x60
 8008e16:	d82e      	bhi.n	8008e76 <HAL_CAN_IRQHandler+0x334>
 8008e18:	2b50      	cmp	r3, #80	; 0x50
 8008e1a:	d022      	beq.n	8008e62 <HAL_CAN_IRQHandler+0x320>
 8008e1c:	2b50      	cmp	r3, #80	; 0x50
 8008e1e:	d82a      	bhi.n	8008e76 <HAL_CAN_IRQHandler+0x334>
 8008e20:	2b40      	cmp	r3, #64	; 0x40
 8008e22:	d019      	beq.n	8008e58 <HAL_CAN_IRQHandler+0x316>
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d826      	bhi.n	8008e76 <HAL_CAN_IRQHandler+0x334>
 8008e28:	2b30      	cmp	r3, #48	; 0x30
 8008e2a:	d010      	beq.n	8008e4e <HAL_CAN_IRQHandler+0x30c>
 8008e2c:	2b30      	cmp	r3, #48	; 0x30
 8008e2e:	d822      	bhi.n	8008e76 <HAL_CAN_IRQHandler+0x334>
 8008e30:	2b10      	cmp	r3, #16
 8008e32:	d002      	beq.n	8008e3a <HAL_CAN_IRQHandler+0x2f8>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d005      	beq.n	8008e44 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008e38:	e01d      	b.n	8008e76 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	f043 0308 	orr.w	r3, r3, #8
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e42:	e019      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	f043 0310 	orr.w	r3, r3, #16
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e4c:	e014      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e56:	e00f      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e60:	e00a      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e6a:	e005      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008e74:	e000      	b.n	8008e78 <HAL_CAN_IRQHandler+0x336>
            break;
 8008e76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008e86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2204      	movs	r2, #4
 8008e8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f84a 	bl	8008f3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	3728      	adds	r7, #40	; 0x28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f60:	4b0c      	ldr	r3, [pc, #48]	; (8008f94 <__NVIC_SetPriorityGrouping+0x44>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f82:	4a04      	ldr	r2, [pc, #16]	; (8008f94 <__NVIC_SetPriorityGrouping+0x44>)
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	60d3      	str	r3, [r2, #12]
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f9c:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	0a1b      	lsrs	r3, r3, #8
 8008fa2:	f003 0307 	and.w	r3, r3, #7
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	e000ed00 	.word	0xe000ed00

08008fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	db0b      	blt.n	8008fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f003 021f 	and.w	r2, r3, #31
 8008fcc:	4907      	ldr	r1, [pc, #28]	; (8008fec <__NVIC_EnableIRQ+0x38>)
 8008fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	e000e100 	.word	0xe000e100

08008ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009000:	2b00      	cmp	r3, #0
 8009002:	db0a      	blt.n	800901a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	490c      	ldr	r1, [pc, #48]	; (800903c <__NVIC_SetPriority+0x4c>)
 800900a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900e:	0112      	lsls	r2, r2, #4
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	440b      	add	r3, r1
 8009014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009018:	e00a      	b.n	8009030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	b2da      	uxtb	r2, r3
 800901e:	4908      	ldr	r1, [pc, #32]	; (8009040 <__NVIC_SetPriority+0x50>)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	3b04      	subs	r3, #4
 8009028:	0112      	lsls	r2, r2, #4
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	440b      	add	r3, r1
 800902e:	761a      	strb	r2, [r3, #24]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	e000e100 	.word	0xe000e100
 8009040:	e000ed00 	.word	0xe000ed00

08009044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009044:	b480      	push	{r7}
 8009046:	b089      	sub	sp, #36	; 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f1c3 0307 	rsb	r3, r3, #7
 800905e:	2b04      	cmp	r3, #4
 8009060:	bf28      	it	cs
 8009062:	2304      	movcs	r3, #4
 8009064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	3304      	adds	r3, #4
 800906a:	2b06      	cmp	r3, #6
 800906c:	d902      	bls.n	8009074 <NVIC_EncodePriority+0x30>
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	3b03      	subs	r3, #3
 8009072:	e000      	b.n	8009076 <NVIC_EncodePriority+0x32>
 8009074:	2300      	movs	r3, #0
 8009076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43da      	mvns	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	401a      	ands	r2, r3
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800908c:	f04f 31ff 	mov.w	r1, #4294967295
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	fa01 f303 	lsl.w	r3, r1, r3
 8009096:	43d9      	mvns	r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800909c:	4313      	orrs	r3, r2
         );
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3724      	adds	r7, #36	; 0x24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80090b0:	f3bf 8f4f 	dsb	sy
}
 80090b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80090b6:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <__NVIC_SystemReset+0x24>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80090be:	4904      	ldr	r1, [pc, #16]	; (80090d0 <__NVIC_SystemReset+0x24>)
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <__NVIC_SystemReset+0x28>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80090c6:	f3bf 8f4f 	dsb	sy
}
 80090ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <__NVIC_SystemReset+0x20>
 80090d0:	e000ed00 	.word	0xe000ed00
 80090d4:	05fa0004 	.word	0x05fa0004

080090d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ff35 	bl	8008f50 <__NVIC_SetPriorityGrouping>
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	4603      	mov	r3, r0
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
 80090fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009100:	f7ff ff4a 	bl	8008f98 <__NVIC_GetPriorityGrouping>
 8009104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	6978      	ldr	r0, [r7, #20]
 800910c:	f7ff ff9a 	bl	8009044 <NVIC_EncodePriority>
 8009110:	4602      	mov	r2, r0
 8009112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff ff69 	bl	8008ff0 <__NVIC_SetPriority>
}
 800911e:	bf00      	nop
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	4603      	mov	r3, r0
 800912e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff ff3d 	bl	8008fb4 <__NVIC_EnableIRQ>
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009146:	f7ff ffb1 	bl	80090ac <__NVIC_SystemReset>

0800914a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d008      	beq.n	8009174 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2204      	movs	r2, #4
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e022      	b.n	80091ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 020e 	bic.w	r2, r2, #14
 8009182:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0201 	bic.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009198:	f003 021c 	and.w	r2, r3, #28
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f202 	lsl.w	r2, r1, r2
 80091a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d005      	beq.n	80091ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
 80091e8:	e029      	b.n	800923e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 020e 	bic.w	r2, r2, #14
 80091f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0201 	bic.w	r2, r2, #1
 8009208:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	f003 021c 	and.w	r2, r3, #28
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	2101      	movs	r1, #1
 8009218:	fa01 f202 	lsl.w	r2, r1, r2
 800921c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
    }
  }
  return status;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009256:	e148      	b.n	80094ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	2101      	movs	r1, #1
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	fa01 f303 	lsl.w	r3, r1, r3
 8009264:	4013      	ands	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 813a 	beq.w	80094e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	2b01      	cmp	r3, #1
 800927a:	d005      	beq.n	8009288 <HAL_GPIO_Init+0x40>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d130      	bne.n	80092ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	2203      	movs	r2, #3
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4013      	ands	r3, r2
 800929e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80092be:	2201      	movs	r2, #1
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	43db      	mvns	r3, r3
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4013      	ands	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	091b      	lsrs	r3, r3, #4
 80092d4:	f003 0201 	and.w	r2, r3, #1
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	fa02 f303 	lsl.w	r3, r2, r3
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d017      	beq.n	8009326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	2203      	movs	r2, #3
 8009302:	fa02 f303 	lsl.w	r3, r2, r3
 8009306:	43db      	mvns	r3, r3
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4013      	ands	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	fa02 f303 	lsl.w	r3, r2, r3
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d123      	bne.n	800937a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	08da      	lsrs	r2, r3, #3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3208      	adds	r2, #8
 800933a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	220f      	movs	r2, #15
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43db      	mvns	r3, r3
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	4013      	ands	r3, r2
 8009354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	691a      	ldr	r2, [r3, #16]
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	fa02 f303 	lsl.w	r3, r2, r3
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	08da      	lsrs	r2, r3, #3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3208      	adds	r2, #8
 8009374:	6939      	ldr	r1, [r7, #16]
 8009376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	2203      	movs	r2, #3
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	43db      	mvns	r3, r3
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4013      	ands	r3, r2
 8009390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f003 0203 	and.w	r2, r3, #3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8094 	beq.w	80094e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093bc:	4b52      	ldr	r3, [pc, #328]	; (8009508 <HAL_GPIO_Init+0x2c0>)
 80093be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c0:	4a51      	ldr	r2, [pc, #324]	; (8009508 <HAL_GPIO_Init+0x2c0>)
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	6613      	str	r3, [r2, #96]	; 0x60
 80093c8:	4b4f      	ldr	r3, [pc, #316]	; (8009508 <HAL_GPIO_Init+0x2c0>)
 80093ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80093d4:	4a4d      	ldr	r2, [pc, #308]	; (800950c <HAL_GPIO_Init+0x2c4>)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	089b      	lsrs	r3, r3, #2
 80093da:	3302      	adds	r3, #2
 80093dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	220f      	movs	r2, #15
 80093ec:	fa02 f303 	lsl.w	r3, r2, r3
 80093f0:	43db      	mvns	r3, r3
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4013      	ands	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80093fe:	d00d      	beq.n	800941c <HAL_GPIO_Init+0x1d4>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a43      	ldr	r2, [pc, #268]	; (8009510 <HAL_GPIO_Init+0x2c8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d007      	beq.n	8009418 <HAL_GPIO_Init+0x1d0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a42      	ldr	r2, [pc, #264]	; (8009514 <HAL_GPIO_Init+0x2cc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d101      	bne.n	8009414 <HAL_GPIO_Init+0x1cc>
 8009410:	2302      	movs	r3, #2
 8009412:	e004      	b.n	800941e <HAL_GPIO_Init+0x1d6>
 8009414:	2307      	movs	r3, #7
 8009416:	e002      	b.n	800941e <HAL_GPIO_Init+0x1d6>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <HAL_GPIO_Init+0x1d6>
 800941c:	2300      	movs	r3, #0
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	f002 0203 	and.w	r2, r2, #3
 8009424:	0092      	lsls	r2, r2, #2
 8009426:	4093      	lsls	r3, r2
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800942e:	4937      	ldr	r1, [pc, #220]	; (800950c <HAL_GPIO_Init+0x2c4>)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	089b      	lsrs	r3, r3, #2
 8009434:	3302      	adds	r3, #2
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800943c:	4b36      	ldr	r3, [pc, #216]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	43db      	mvns	r3, r3
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4013      	ands	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009460:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009466:	4b2c      	ldr	r3, [pc, #176]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	43db      	mvns	r3, r3
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4013      	ands	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800948a:	4a23      	ldr	r2, [pc, #140]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009490:	4b21      	ldr	r3, [pc, #132]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	43db      	mvns	r3, r3
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4013      	ands	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80094b4:	4a18      	ldr	r2, [pc, #96]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80094ba:	4b17      	ldr	r3, [pc, #92]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	43db      	mvns	r3, r3
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4013      	ands	r3, r2
 80094c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80094de:	4a0e      	ldr	r2, [pc, #56]	; (8009518 <HAL_GPIO_Init+0x2d0>)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	3301      	adds	r3, #1
 80094e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	fa22 f303 	lsr.w	r3, r2, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f47f aeaf 	bne.w	8009258 <HAL_GPIO_Init+0x10>
  }
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	40021000 	.word	0x40021000
 800950c:	40010000 	.word	0x40010000
 8009510:	48000400 	.word	0x48000400
 8009514:	48000800 	.word	0x48000800
 8009518:	40010400 	.word	0x40010400

0800951c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	807b      	strh	r3, [r7, #2]
 8009528:	4613      	mov	r3, r2
 800952a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800952c:	787b      	ldrb	r3, [r7, #1]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009532:	887a      	ldrh	r2, [r7, #2]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009538:	e002      	b.n	8009540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800955e:	887a      	ldrh	r2, [r7, #2]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4013      	ands	r3, r2
 8009564:	041a      	lsls	r2, r3, #16
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	43d9      	mvns	r1, r3
 800956a:	887b      	ldrh	r3, [r7, #2]
 800956c:	400b      	ands	r3, r1
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	619a      	str	r2, [r3, #24]
}
 8009574:	bf00      	nop
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <HAL_PWREx_GetVoltageRange+0x18>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800958c:	4618      	mov	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40007000 	.word	0x40007000

0800959c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095aa:	d130      	bne.n	800960e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80095ac:	4b23      	ldr	r3, [pc, #140]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b8:	d038      	beq.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095c2:	4a1e      	ldr	r2, [pc, #120]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80095ca:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2232      	movs	r2, #50	; 0x32
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	0c9b      	lsrs	r3, r3, #18
 80095dc:	3301      	adds	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095e0:	e002      	b.n	80095e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095e8:	4b14      	ldr	r3, [pc, #80]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f4:	d102      	bne.n	80095fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f2      	bne.n	80095e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009608:	d110      	bne.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e00f      	b.n	800962e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800960e:	4b0b      	ldr	r3, [pc, #44]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800961a:	d007      	beq.n	800962c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800961c:	4b07      	ldr	r3, [pc, #28]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009624:	4a05      	ldr	r2, [pc, #20]	; (800963c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800962a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40007000 	.word	0x40007000
 8009640:	2000024c 	.word	0x2000024c
 8009644:	431bde83 	.word	0x431bde83

08009648 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	f000 bc02 	b.w	8009e60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800965c:	4b96      	ldr	r3, [pc, #600]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 030c 	and.w	r3, r3, #12
 8009664:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009666:	4b94      	ldr	r3, [pc, #592]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80e4 	beq.w	8009846 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d007      	beq.n	8009694 <HAL_RCC_OscConfig+0x4c>
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2b0c      	cmp	r3, #12
 8009688:	f040 808b 	bne.w	80097a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2b01      	cmp	r3, #1
 8009690:	f040 8087 	bne.w	80097a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009694:	4b88      	ldr	r3, [pc, #544]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_RCC_OscConfig+0x64>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e3d9      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a1a      	ldr	r2, [r3, #32]
 80096b0:	4b81      	ldr	r3, [pc, #516]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <HAL_RCC_OscConfig+0x7e>
 80096bc:	4b7e      	ldr	r3, [pc, #504]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096c4:	e005      	b.n	80096d2 <HAL_RCC_OscConfig+0x8a>
 80096c6:	4b7c      	ldr	r3, [pc, #496]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096cc:	091b      	lsrs	r3, r3, #4
 80096ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d223      	bcs.n	800971e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fdbe 	bl	800a25c <RCC_SetFlashLatencyFromMSIRange>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e3ba      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096ea:	4b73      	ldr	r3, [pc, #460]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a72      	ldr	r2, [pc, #456]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096f0:	f043 0308 	orr.w	r3, r3, #8
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	4b70      	ldr	r3, [pc, #448]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	496d      	ldr	r1, [pc, #436]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009704:	4313      	orrs	r3, r2
 8009706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009708:	4b6b      	ldr	r3, [pc, #428]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	4968      	ldr	r1, [pc, #416]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009718:	4313      	orrs	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
 800971c:	e025      	b.n	800976a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800971e:	4b66      	ldr	r3, [pc, #408]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a65      	ldr	r2, [pc, #404]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009724:	f043 0308 	orr.w	r3, r3, #8
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	4b63      	ldr	r3, [pc, #396]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	4960      	ldr	r1, [pc, #384]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009738:	4313      	orrs	r3, r2
 800973a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800973c:	4b5e      	ldr	r3, [pc, #376]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	495b      	ldr	r1, [pc, #364]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800974c:	4313      	orrs	r3, r2
 800974e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 fd7e 	bl	800a25c <RCC_SetFlashLatencyFromMSIRange>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e37a      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800976a:	f000 fc81 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800976e:	4602      	mov	r2, r0
 8009770:	4b51      	ldr	r3, [pc, #324]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	091b      	lsrs	r3, r3, #4
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	4950      	ldr	r1, [pc, #320]	; (80098bc <HAL_RCC_OscConfig+0x274>)
 800977c:	5ccb      	ldrb	r3, [r1, r3]
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	fa22 f303 	lsr.w	r3, r2, r3
 8009786:	4a4e      	ldr	r2, [pc, #312]	; (80098c0 <HAL_RCC_OscConfig+0x278>)
 8009788:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800978a:	4b4e      	ldr	r3, [pc, #312]	; (80098c4 <HAL_RCC_OscConfig+0x27c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fb60 	bl	8007e54 <HAL_InitTick>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d052      	beq.n	8009844 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	e35e      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d032      	beq.n	8009810 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80097aa:	4b43      	ldr	r3, [pc, #268]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a42      	ldr	r2, [pc, #264]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097b0:	f043 0301 	orr.w	r3, r3, #1
 80097b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097b6:	f7fe fd19 	bl	80081ec <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097be:	f7fe fd15 	bl	80081ec <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e347      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0f0      	beq.n	80097be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097dc:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a35      	ldr	r2, [pc, #212]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097e2:	f043 0308 	orr.w	r3, r3, #8
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	4b33      	ldr	r3, [pc, #204]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	4930      	ldr	r1, [pc, #192]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	492b      	ldr	r1, [pc, #172]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800980a:	4313      	orrs	r3, r2
 800980c:	604b      	str	r3, [r1, #4]
 800980e:	e01a      	b.n	8009846 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009810:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a28      	ldr	r2, [pc, #160]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009816:	f023 0301 	bic.w	r3, r3, #1
 800981a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800981c:	f7fe fce6 	bl	80081ec <HAL_GetTick>
 8009820:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009822:	e008      	b.n	8009836 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009824:	f7fe fce2 	bl	80081ec <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b02      	cmp	r3, #2
 8009830:	d901      	bls.n	8009836 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e314      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009836:	4b20      	ldr	r3, [pc, #128]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f0      	bne.n	8009824 <HAL_RCC_OscConfig+0x1dc>
 8009842:	e000      	b.n	8009846 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009844:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	d073      	beq.n	800993a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b08      	cmp	r3, #8
 8009856:	d005      	beq.n	8009864 <HAL_RCC_OscConfig+0x21c>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b0c      	cmp	r3, #12
 800985c:	d10e      	bne.n	800987c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b03      	cmp	r3, #3
 8009862:	d10b      	bne.n	800987c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009864:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d063      	beq.n	8009938 <HAL_RCC_OscConfig+0x2f0>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d15f      	bne.n	8009938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e2f1      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009884:	d106      	bne.n	8009894 <HAL_RCC_OscConfig+0x24c>
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 800988c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e025      	b.n	80098e0 <HAL_RCC_OscConfig+0x298>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800989c:	d114      	bne.n	80098c8 <HAL_RCC_OscConfig+0x280>
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a05      	ldr	r2, [pc, #20]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a02      	ldr	r2, [pc, #8]	; (80098b8 <HAL_RCC_OscConfig+0x270>)
 80098b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	e013      	b.n	80098e0 <HAL_RCC_OscConfig+0x298>
 80098b8:	40021000 	.word	0x40021000
 80098bc:	0800ebc8 	.word	0x0800ebc8
 80098c0:	2000024c 	.word	0x2000024c
 80098c4:	20000250 	.word	0x20000250
 80098c8:	4ba0      	ldr	r3, [pc, #640]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a9f      	ldr	r2, [pc, #636]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4b9d      	ldr	r3, [pc, #628]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a9c      	ldr	r2, [pc, #624]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80098da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d013      	beq.n	8009910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7fe fc80 	bl	80081ec <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098f0:	f7fe fc7c 	bl	80081ec <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b64      	cmp	r3, #100	; 0x64
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e2ae      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009902:	4b92      	ldr	r3, [pc, #584]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f0      	beq.n	80098f0 <HAL_RCC_OscConfig+0x2a8>
 800990e:	e014      	b.n	800993a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009910:	f7fe fc6c 	bl	80081ec <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009918:	f7fe fc68 	bl	80081ec <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	; 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e29a      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800992a:	4b88      	ldr	r3, [pc, #544]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0x2d0>
 8009936:	e000      	b.n	800993a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d060      	beq.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b04      	cmp	r3, #4
 800994a:	d005      	beq.n	8009958 <HAL_RCC_OscConfig+0x310>
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	2b0c      	cmp	r3, #12
 8009950:	d119      	bne.n	8009986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d116      	bne.n	8009986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009958:	4b7c      	ldr	r3, [pc, #496]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <HAL_RCC_OscConfig+0x328>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e277      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009970:	4b76      	ldr	r3, [pc, #472]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	4973      	ldr	r1, [pc, #460]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009980:	4313      	orrs	r3, r2
 8009982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009984:	e040      	b.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d023      	beq.n	80099d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800998e:	4b6f      	ldr	r3, [pc, #444]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a6e      	ldr	r2, [pc, #440]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999a:	f7fe fc27 	bl	80081ec <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099a2:	f7fe fc23 	bl	80081ec <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e255      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099b4:	4b65      	ldr	r3, [pc, #404]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f0      	beq.n	80099a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c0:	4b62      	ldr	r3, [pc, #392]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	061b      	lsls	r3, r3, #24
 80099ce:	495f      	ldr	r1, [pc, #380]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	604b      	str	r3, [r1, #4]
 80099d4:	e018      	b.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099d6:	4b5d      	ldr	r3, [pc, #372]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a5c      	ldr	r2, [pc, #368]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e2:	f7fe fc03 	bl	80081ec <HAL_GetTick>
 80099e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099e8:	e008      	b.n	80099fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ea:	f7fe fbff 	bl	80081ec <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d901      	bls.n	80099fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e231      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099fc:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1f0      	bne.n	80099ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03c      	beq.n	8009a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01c      	beq.n	8009a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a1c:	4b4b      	ldr	r3, [pc, #300]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a22:	4a4a      	ldr	r2, [pc, #296]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a2c:	f7fe fbde 	bl	80081ec <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a34:	f7fe fbda 	bl	80081ec <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e20c      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a46:	4b41      	ldr	r3, [pc, #260]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0ef      	beq.n	8009a34 <HAL_RCC_OscConfig+0x3ec>
 8009a54:	e01b      	b.n	8009a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a56:	4b3d      	ldr	r3, [pc, #244]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a5c:	4a3b      	ldr	r2, [pc, #236]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a66:	f7fe fbc1 	bl	80081ec <HAL_GetTick>
 8009a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a6c:	e008      	b.n	8009a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6e:	f7fe fbbd 	bl	80081ec <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e1ef      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a80:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1ef      	bne.n	8009a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 80a6 	beq.w	8009be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009aa0:	4b2a      	ldr	r3, [pc, #168]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10d      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab0:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8009ab8:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ac8:	4b21      	ldr	r3, [pc, #132]	; (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d118      	bne.n	8009b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ad4:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ae0:	f7fe fb84 	bl	80081ec <HAL_GetTick>
 8009ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae8:	f7fe fb80 	bl	80081ec <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e1b2      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afa:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <HAL_RCC_OscConfig+0x508>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0f0      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d108      	bne.n	8009b20 <HAL_RCC_OscConfig+0x4d8>
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b1e:	e029      	b.n	8009b74 <HAL_RCC_OscConfig+0x52c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d115      	bne.n	8009b54 <HAL_RCC_OscConfig+0x50c>
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b2e:	4a07      	ldr	r2, [pc, #28]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b30:	f043 0304 	orr.w	r3, r3, #4
 8009b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b3e:	4a03      	ldr	r2, [pc, #12]	; (8009b4c <HAL_RCC_OscConfig+0x504>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b48:	e014      	b.n	8009b74 <HAL_RCC_OscConfig+0x52c>
 8009b4a:	bf00      	nop
 8009b4c:	40021000 	.word	0x40021000
 8009b50:	40007000 	.word	0x40007000
 8009b54:	4b9a      	ldr	r3, [pc, #616]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5a:	4a99      	ldr	r2, [pc, #612]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009b5c:	f023 0301 	bic.w	r3, r3, #1
 8009b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b64:	4b96      	ldr	r3, [pc, #600]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b6a:	4a95      	ldr	r2, [pc, #596]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009b6c:	f023 0304 	bic.w	r3, r3, #4
 8009b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d016      	beq.n	8009baa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7c:	f7fe fb36 	bl	80081ec <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b82:	e00a      	b.n	8009b9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b84:	f7fe fb32 	bl	80081ec <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e162      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b9a:	4b89      	ldr	r3, [pc, #548]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0ed      	beq.n	8009b84 <HAL_RCC_OscConfig+0x53c>
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009baa:	f7fe fb1f 	bl	80081ec <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bb0:	e00a      	b.n	8009bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb2:	f7fe fb1b 	bl	80081ec <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e14b      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bc8:	4b7d      	ldr	r3, [pc, #500]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1ed      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bd6:	7ffb      	ldrb	r3, [r7, #31]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d105      	bne.n	8009be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bdc:	4b78      	ldr	r3, [pc, #480]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	4a77      	ldr	r2, [pc, #476]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0320 	and.w	r3, r3, #32
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d03c      	beq.n	8009c6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01c      	beq.n	8009c36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bfc:	4b70      	ldr	r3, [pc, #448]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c02:	4a6f      	ldr	r2, [pc, #444]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c04:	f043 0301 	orr.w	r3, r3, #1
 8009c08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c0c:	f7fe faee 	bl	80081ec <HAL_GetTick>
 8009c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c12:	e008      	b.n	8009c26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c14:	f7fe faea 	bl	80081ec <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e11c      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c26:	4b66      	ldr	r3, [pc, #408]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d0ef      	beq.n	8009c14 <HAL_RCC_OscConfig+0x5cc>
 8009c34:	e01b      	b.n	8009c6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c36:	4b62      	ldr	r3, [pc, #392]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c3c:	4a60      	ldr	r2, [pc, #384]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c3e:	f023 0301 	bic.w	r3, r3, #1
 8009c42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c46:	f7fe fad1 	bl	80081ec <HAL_GetTick>
 8009c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c4c:	e008      	b.n	8009c60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c4e:	f7fe facd 	bl	80081ec <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d901      	bls.n	8009c60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e0ff      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c60:	4b57      	ldr	r3, [pc, #348]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1ef      	bne.n	8009c4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80f3 	beq.w	8009e5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	f040 80c9 	bne.w	8009e14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009c82:	4b4f      	ldr	r3, [pc, #316]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f003 0203 	and.w	r2, r3, #3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d12c      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d123      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d11b      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d113      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d109      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d06b      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b0c      	cmp	r3, #12
 8009cf4:	d062      	beq.n	8009dbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009cf6:	4b32      	ldr	r3, [pc, #200]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e0ac      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009d06:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a2d      	ldr	r2, [pc, #180]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d12:	f7fe fa6b 	bl	80081ec <HAL_GetTick>
 8009d16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d18:	e008      	b.n	8009d2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d1a:	f7fe fa67 	bl	80081ec <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d901      	bls.n	8009d2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e099      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d2c:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f0      	bne.n	8009d1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d38:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	4b21      	ldr	r3, [pc, #132]	; (8009dc4 <HAL_RCC_OscConfig+0x77c>)
 8009d3e:	4013      	ands	r3, r2
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d48:	3a01      	subs	r2, #1
 8009d4a:	0112      	lsls	r2, r2, #4
 8009d4c:	4311      	orrs	r1, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d52:	0212      	lsls	r2, r2, #8
 8009d54:	4311      	orrs	r1, r2
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d5a:	0852      	lsrs	r2, r2, #1
 8009d5c:	3a01      	subs	r2, #1
 8009d5e:	0552      	lsls	r2, r2, #21
 8009d60:	4311      	orrs	r1, r2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d66:	0852      	lsrs	r2, r2, #1
 8009d68:	3a01      	subs	r2, #1
 8009d6a:	0652      	lsls	r2, r2, #25
 8009d6c:	4311      	orrs	r1, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d72:	06d2      	lsls	r2, r2, #27
 8009d74:	430a      	orrs	r2, r1
 8009d76:	4912      	ldr	r1, [pc, #72]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a0f      	ldr	r2, [pc, #60]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d88:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d94:	f7fe fa2a 	bl	80081ec <HAL_GetTick>
 8009d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d9a:	e008      	b.n	8009dae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d9c:	f7fe fa26 	bl	80081ec <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e058      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dae:	4b04      	ldr	r3, [pc, #16]	; (8009dc0 <HAL_RCC_OscConfig+0x778>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0f0      	beq.n	8009d9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009dba:	e050      	b.n	8009e5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e04f      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
 8009dc0:	40021000 	.word	0x40021000
 8009dc4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dc8:	4b27      	ldr	r3, [pc, #156]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d144      	bne.n	8009e5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009dd4:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a23      	ldr	r2, [pc, #140]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009de0:	4b21      	ldr	r3, [pc, #132]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	4a20      	ldr	r2, [pc, #128]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009dec:	f7fe f9fe 	bl	80081ec <HAL_GetTick>
 8009df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009df2:	e008      	b.n	8009e06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009df4:	f7fe f9fa 	bl	80081ec <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e02c      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e06:	4b18      	ldr	r3, [pc, #96]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f0      	beq.n	8009df4 <HAL_RCC_OscConfig+0x7ac>
 8009e12:	e024      	b.n	8009e5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	d01f      	beq.n	8009e5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a12      	ldr	r2, [pc, #72]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e26:	f7fe f9e1 	bl	80081ec <HAL_GetTick>
 8009e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e2c:	e008      	b.n	8009e40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e2e:	f7fe f9dd 	bl	80081ec <HAL_GetTick>
 8009e32:	4602      	mov	r2, r0
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d901      	bls.n	8009e40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e00f      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f0      	bne.n	8009e2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	4905      	ldr	r1, [pc, #20]	; (8009e68 <HAL_RCC_OscConfig+0x820>)
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <HAL_RCC_OscConfig+0x824>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	60cb      	str	r3, [r1, #12]
 8009e58:	e001      	b.n	8009e5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e000      	b.n	8009e60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	feeefffc 	.word	0xfeeefffc

08009e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0e7      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e84:	4b75      	ldr	r3, [pc, #468]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d910      	bls.n	8009eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e92:	4b72      	ldr	r3, [pc, #456]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 0207 	bic.w	r2, r3, #7
 8009e9a:	4970      	ldr	r1, [pc, #448]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ea2:	4b6e      	ldr	r3, [pc, #440]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d001      	beq.n	8009eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e0cf      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d010      	beq.n	8009ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	4b66      	ldr	r3, [pc, #408]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d908      	bls.n	8009ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ed0:	4b63      	ldr	r3, [pc, #396]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	4960      	ldr	r1, [pc, #384]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d04c      	beq.n	8009f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d107      	bne.n	8009f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ef6:	4b5a      	ldr	r3, [pc, #360]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d121      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e0a6      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d107      	bne.n	8009f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f0e:	4b54      	ldr	r3, [pc, #336]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d115      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e09a      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d107      	bne.n	8009f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009f26:	4b4e      	ldr	r3, [pc, #312]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d109      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e08e      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f36:	4b4a      	ldr	r3, [pc, #296]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e086      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f46:	4b46      	ldr	r3, [pc, #280]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f023 0203 	bic.w	r2, r3, #3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	4943      	ldr	r1, [pc, #268]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f58:	f7fe f948 	bl	80081ec <HAL_GetTick>
 8009f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f5e:	e00a      	b.n	8009f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f60:	f7fe f944 	bl	80081ec <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e06e      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f76:	4b3a      	ldr	r3, [pc, #232]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f003 020c 	and.w	r2, r3, #12
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d1eb      	bne.n	8009f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0302 	and.w	r3, r3, #2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d010      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	4b31      	ldr	r3, [pc, #196]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d208      	bcs.n	8009fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fa4:	4b2e      	ldr	r3, [pc, #184]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	492b      	ldr	r1, [pc, #172]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009fb6:	4b29      	ldr	r3, [pc, #164]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d210      	bcs.n	8009fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fc4:	4b25      	ldr	r3, [pc, #148]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f023 0207 	bic.w	r2, r3, #7
 8009fcc:	4923      	ldr	r1, [pc, #140]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fd4:	4b21      	ldr	r3, [pc, #132]	; (800a05c <HAL_RCC_ClockConfig+0x1ec>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d001      	beq.n	8009fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e036      	b.n	800a054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d008      	beq.n	800a004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	4918      	ldr	r1, [pc, #96]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 800a000:	4313      	orrs	r3, r2
 800a002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d009      	beq.n	800a024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	4910      	ldr	r1, [pc, #64]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 800a020:	4313      	orrs	r3, r2
 800a022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a024:	f000 f824 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800a028:	4602      	mov	r2, r0
 800a02a:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <HAL_RCC_ClockConfig+0x1f0>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	091b      	lsrs	r3, r3, #4
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	490b      	ldr	r1, [pc, #44]	; (800a064 <HAL_RCC_ClockConfig+0x1f4>)
 800a036:	5ccb      	ldrb	r3, [r1, r3]
 800a038:	f003 031f 	and.w	r3, r3, #31
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <HAL_RCC_ClockConfig+0x1f8>)
 800a042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a044:	4b09      	ldr	r3, [pc, #36]	; (800a06c <HAL_RCC_ClockConfig+0x1fc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fd ff03 	bl	8007e54 <HAL_InitTick>
 800a04e:	4603      	mov	r3, r0
 800a050:	72fb      	strb	r3, [r7, #11]

  return status;
 800a052:	7afb      	ldrb	r3, [r7, #11]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40022000 	.word	0x40022000
 800a060:	40021000 	.word	0x40021000
 800a064:	0800ebc8 	.word	0x0800ebc8
 800a068:	2000024c 	.word	0x2000024c
 800a06c:	20000250 	.word	0x20000250

0800a070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a070:	b480      	push	{r7}
 800a072:	b089      	sub	sp, #36	; 0x24
 800a074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	61fb      	str	r3, [r7, #28]
 800a07a:	2300      	movs	r3, #0
 800a07c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a07e:	4b3e      	ldr	r3, [pc, #248]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 030c 	and.w	r3, r3, #12
 800a086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a088:	4b3b      	ldr	r3, [pc, #236]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	f003 0303 	and.w	r3, r3, #3
 800a090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x34>
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b0c      	cmp	r3, #12
 800a09c:	d121      	bne.n	800a0e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d11e      	bne.n	800a0e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a0a4:	4b34      	ldr	r3, [pc, #208]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0308 	and.w	r3, r3, #8
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d107      	bne.n	800a0c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a0b0:	4b31      	ldr	r3, [pc, #196]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0b6:	0a1b      	lsrs	r3, r3, #8
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	61fb      	str	r3, [r7, #28]
 800a0be:	e005      	b.n	800a0cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	091b      	lsrs	r3, r3, #4
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a0cc:	4a2b      	ldr	r2, [pc, #172]	; (800a17c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10d      	bne.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0e0:	e00a      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d102      	bne.n	800a0ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0e8:	4b25      	ldr	r3, [pc, #148]	; (800a180 <HAL_RCC_GetSysClockFreq+0x110>)
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	e004      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d101      	bne.n	800a0f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a0f4:	4b23      	ldr	r3, [pc, #140]	; (800a184 <HAL_RCC_GetSysClockFreq+0x114>)
 800a0f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2b0c      	cmp	r3, #12
 800a0fc:	d134      	bne.n	800a168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d003      	beq.n	800a116 <HAL_RCC_GetSysClockFreq+0xa6>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d003      	beq.n	800a11c <HAL_RCC_GetSysClockFreq+0xac>
 800a114:	e005      	b.n	800a122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a116:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <HAL_RCC_GetSysClockFreq+0x110>)
 800a118:	617b      	str	r3, [r7, #20]
      break;
 800a11a:	e005      	b.n	800a128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a11c:	4b19      	ldr	r3, [pc, #100]	; (800a184 <HAL_RCC_GetSysClockFreq+0x114>)
 800a11e:	617b      	str	r3, [r7, #20]
      break;
 800a120:	e002      	b.n	800a128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	617b      	str	r3, [r7, #20]
      break;
 800a126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a128:	4b13      	ldr	r3, [pc, #76]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	091b      	lsrs	r3, r3, #4
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	3301      	adds	r3, #1
 800a134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	fb03 f202 	mul.w	r2, r3, r2
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a14e:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <HAL_RCC_GetSysClockFreq+0x108>)
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	0e5b      	lsrs	r3, r3, #25
 800a154:	f003 0303 	and.w	r3, r3, #3
 800a158:	3301      	adds	r3, #1
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	fbb2 f3f3 	udiv	r3, r2, r3
 800a166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a168:	69bb      	ldr	r3, [r7, #24]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3724      	adds	r7, #36	; 0x24
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	40021000 	.word	0x40021000
 800a17c:	0800ebe0 	.word	0x0800ebe0
 800a180:	00f42400 	.word	0x00f42400
 800a184:	007a1200 	.word	0x007a1200

0800a188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a188:	b480      	push	{r7}
 800a18a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a18c:	4b03      	ldr	r3, [pc, #12]	; (800a19c <HAL_RCC_GetHCLKFreq+0x14>)
 800a18e:	681b      	ldr	r3, [r3, #0]
}
 800a190:	4618      	mov	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	2000024c 	.word	0x2000024c

0800a1a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1a4:	f7ff fff0 	bl	800a188 <HAL_RCC_GetHCLKFreq>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	0a1b      	lsrs	r3, r3, #8
 800a1b0:	f003 0307 	and.w	r3, r3, #7
 800a1b4:	4904      	ldr	r1, [pc, #16]	; (800a1c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1b6:	5ccb      	ldrb	r3, [r1, r3]
 800a1b8:	f003 031f 	and.w	r3, r3, #31
 800a1bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	0800ebd8 	.word	0x0800ebd8

0800a1cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1d0:	f7ff ffda 	bl	800a188 <HAL_RCC_GetHCLKFreq>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	0adb      	lsrs	r3, r3, #11
 800a1dc:	f003 0307 	and.w	r3, r3, #7
 800a1e0:	4904      	ldr	r1, [pc, #16]	; (800a1f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1e2:	5ccb      	ldrb	r3, [r1, r3]
 800a1e4:	f003 031f 	and.w	r3, r3, #31
 800a1e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	40021000 	.word	0x40021000
 800a1f4:	0800ebd8 	.word	0x0800ebd8

0800a1f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	220f      	movs	r2, #15
 800a206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a208:	4b12      	ldr	r3, [pc, #72]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f003 0203 	and.w	r2, r3, #3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a220:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <HAL_RCC_GetClockConfig+0x60>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0207 	and.w	r2, r3, #7
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	601a      	str	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40021000 	.word	0x40021000
 800a258:	40022000 	.word	0x40022000

0800a25c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a264:	2300      	movs	r3, #0
 800a266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a268:	4b2a      	ldr	r3, [pc, #168]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a274:	f7ff f984 	bl	8009580 <HAL_PWREx_GetVoltageRange>
 800a278:	6178      	str	r0, [r7, #20]
 800a27a:	e014      	b.n	800a2a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a27c:	4b25      	ldr	r3, [pc, #148]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a27e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a280:	4a24      	ldr	r2, [pc, #144]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a286:	6593      	str	r3, [r2, #88]	; 0x58
 800a288:	4b22      	ldr	r3, [pc, #136]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a294:	f7ff f974 	bl	8009580 <HAL_PWREx_GetVoltageRange>
 800a298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a29a:	4b1e      	ldr	r3, [pc, #120]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29e:	4a1d      	ldr	r2, [pc, #116]	; (800a314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a2a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ac:	d10b      	bne.n	800a2c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b80      	cmp	r3, #128	; 0x80
 800a2b2:	d919      	bls.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2ba0      	cmp	r3, #160	; 0xa0
 800a2b8:	d902      	bls.n	800a2c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	e013      	b.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	613b      	str	r3, [r7, #16]
 800a2c4:	e010      	b.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b80      	cmp	r3, #128	; 0x80
 800a2ca:	d902      	bls.n	800a2d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	e00a      	b.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b80      	cmp	r3, #128	; 0x80
 800a2d6:	d102      	bne.n	800a2de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a2d8:	2302      	movs	r3, #2
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	e004      	b.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b70      	cmp	r3, #112	; 0x70
 800a2e2:	d101      	bne.n	800a2e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a2e8:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f023 0207 	bic.w	r2, r3, #7
 800a2f0:	4909      	ldr	r1, [pc, #36]	; (800a318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	429a      	cmp	r2, r3
 800a304:	d001      	beq.n	800a30a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	40021000 	.word	0x40021000
 800a318:	40022000 	.word	0x40022000

0800a31c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a324:	2300      	movs	r3, #0
 800a326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a328:	2300      	movs	r3, #0
 800a32a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a334:	2b00      	cmp	r3, #0
 800a336:	d031      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a340:	d01a      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a342:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a346:	d814      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d009      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a34c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a350:	d10f      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a352:	4b5d      	ldr	r3, [pc, #372]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	4a5c      	ldr	r2, [pc, #368]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a35c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a35e:	e00c      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	2100      	movs	r1, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f9ce 	bl	800a708 <RCCEx_PLLSAI1_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a370:	e003      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	74fb      	strb	r3, [r7, #19]
      break;
 800a376:	e000      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a37a:	7cfb      	ldrb	r3, [r7, #19]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10b      	bne.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a380:	4b51      	ldr	r3, [pc, #324]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	494e      	ldr	r1, [pc, #312]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a390:	4313      	orrs	r3, r2
 800a392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a396:	e001      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a398:	7cfb      	ldrb	r3, [r7, #19]
 800a39a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 809e 	beq.w	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a3ae:	4b46      	ldr	r3, [pc, #280]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00d      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3c4:	4b40      	ldr	r3, [pc, #256]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c8:	4a3f      	ldr	r2, [pc, #252]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3ce:	6593      	str	r3, [r2, #88]	; 0x58
 800a3d0:	4b3d      	ldr	r3, [pc, #244]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d8:	60bb      	str	r3, [r7, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3e0:	4b3a      	ldr	r3, [pc, #232]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a39      	ldr	r2, [pc, #228]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a3e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3ec:	f7fd fefe 	bl	80081ec <HAL_GetTick>
 800a3f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a3f2:	e009      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3f4:	f7fd fefa 	bl	80081ec <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d902      	bls.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	74fb      	strb	r3, [r7, #19]
        break;
 800a406:	e005      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a408:	4b30      	ldr	r3, [pc, #192]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0ef      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a414:	7cfb      	ldrb	r3, [r7, #19]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d15a      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a41a:	4b2b      	ldr	r3, [pc, #172]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01e      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	429a      	cmp	r2, r3
 800a434:	d019      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a436:	4b24      	ldr	r3, [pc, #144]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a440:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a442:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	4a1f      	ldr	r2, [pc, #124]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a44a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a44e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a45a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a45e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a462:	4a19      	ldr	r2, [pc, #100]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d016      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a474:	f7fd feba 	bl	80081ec <HAL_GetTick>
 800a478:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a47a:	e00b      	b.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a47c:	f7fd feb6 	bl	80081ec <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	f241 3288 	movw	r2, #5000	; 0x1388
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d902      	bls.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	74fb      	strb	r3, [r7, #19]
            break;
 800a492:	e006      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a494:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a49a:	f003 0302 	and.w	r3, r3, #2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0ec      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a4a2:	7cfb      	ldrb	r3, [r7, #19]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10b      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4a8:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b6:	4904      	ldr	r1, [pc, #16]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a4be:	e009      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4c0:	7cfb      	ldrb	r3, [r7, #19]
 800a4c2:	74bb      	strb	r3, [r7, #18]
 800a4c4:	e006      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a4c6:	bf00      	nop
 800a4c8:	40021000 	.word	0x40021000
 800a4cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d0:	7cfb      	ldrb	r3, [r7, #19]
 800a4d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4d4:	7c7b      	ldrb	r3, [r7, #17]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d105      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4da:	4b8a      	ldr	r3, [pc, #552]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4de:	4a89      	ldr	r2, [pc, #548]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a4e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4f2:	4b84      	ldr	r3, [pc, #528]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f8:	f023 0203 	bic.w	r2, r3, #3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	4980      	ldr	r1, [pc, #512]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a502:	4313      	orrs	r3, r2
 800a504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a514:	4b7b      	ldr	r3, [pc, #492]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51a:	f023 020c 	bic.w	r2, r3, #12
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	4978      	ldr	r1, [pc, #480]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a524:	4313      	orrs	r3, r2
 800a526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a536:	4b73      	ldr	r3, [pc, #460]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a544:	496f      	ldr	r1, [pc, #444]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00a      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a558:	4b6a      	ldr	r3, [pc, #424]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	4967      	ldr	r1, [pc, #412]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a57a:	4b62      	ldr	r3, [pc, #392]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	495e      	ldr	r1, [pc, #376]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a58a:	4313      	orrs	r3, r2
 800a58c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a59c:	4b59      	ldr	r3, [pc, #356]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	4956      	ldr	r1, [pc, #344]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5be:	4b51      	ldr	r3, [pc, #324]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	494d      	ldr	r1, [pc, #308]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d028      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5e0:	4b48      	ldr	r3, [pc, #288]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	4945      	ldr	r1, [pc, #276]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5fe:	d106      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a600:	4b40      	ldr	r3, [pc, #256]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	4a3f      	ldr	r2, [pc, #252]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a60a:	60d3      	str	r3, [r2, #12]
 800a60c:	e011      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a616:	d10c      	bne.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3304      	adds	r3, #4
 800a61c:	2101      	movs	r1, #1
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f872 	bl	800a708 <RCCEx_PLLSAI1_Config>
 800a624:	4603      	mov	r3, r0
 800a626:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a628:	7cfb      	ldrb	r3, [r7, #19]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a62e:	7cfb      	ldrb	r3, [r7, #19]
 800a630:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d028      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a63e:	4b31      	ldr	r3, [pc, #196]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	492d      	ldr	r1, [pc, #180]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a65c:	d106      	bne.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a65e:	4b29      	ldr	r3, [pc, #164]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	4a28      	ldr	r2, [pc, #160]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a668:	60d3      	str	r3, [r2, #12]
 800a66a:	e011      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a674:	d10c      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3304      	adds	r3, #4
 800a67a:	2101      	movs	r1, #1
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f843 	bl	800a708 <RCCEx_PLLSAI1_Config>
 800a682:	4603      	mov	r3, r0
 800a684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a686:	7cfb      	ldrb	r3, [r7, #19]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800a68c:	7cfb      	ldrb	r3, [r7, #19]
 800a68e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01c      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a69c:	4b19      	ldr	r3, [pc, #100]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6aa:	4916      	ldr	r1, [pc, #88]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6ba:	d10c      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	2102      	movs	r1, #2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f820 	bl	800a708 <RCCEx_PLLSAI1_Config>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a6cc:	7cfb      	ldrb	r3, [r7, #19]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800a6d2:	7cfb      	ldrb	r3, [r7, #19]
 800a6d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6e2:	4b08      	ldr	r3, [pc, #32]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f0:	4904      	ldr	r1, [pc, #16]	; (800a704 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a6f8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40021000 	.word	0x40021000

0800a708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a716:	4b74      	ldr	r3, [pc, #464]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d018      	beq.n	800a754 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a722:	4b71      	ldr	r3, [pc, #452]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f003 0203 	and.w	r2, r3, #3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d10d      	bne.n	800a74e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
       ||
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a73a:	4b6b      	ldr	r3, [pc, #428]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	091b      	lsrs	r3, r3, #4
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
       ||
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d047      	beq.n	800a7de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	73fb      	strb	r3, [r7, #15]
 800a752:	e044      	b.n	800a7de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d018      	beq.n	800a78e <RCCEx_PLLSAI1_Config+0x86>
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d825      	bhi.n	800a7ac <RCCEx_PLLSAI1_Config+0xa4>
 800a760:	2b01      	cmp	r3, #1
 800a762:	d002      	beq.n	800a76a <RCCEx_PLLSAI1_Config+0x62>
 800a764:	2b02      	cmp	r3, #2
 800a766:	d009      	beq.n	800a77c <RCCEx_PLLSAI1_Config+0x74>
 800a768:	e020      	b.n	800a7ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a76a:	4b5f      	ldr	r3, [pc, #380]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d11d      	bne.n	800a7b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a77a:	e01a      	b.n	800a7b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a77c:	4b5a      	ldr	r3, [pc, #360]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a784:	2b00      	cmp	r3, #0
 800a786:	d116      	bne.n	800a7b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a78c:	e013      	b.n	800a7b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a78e:	4b56      	ldr	r3, [pc, #344]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10f      	bne.n	800a7ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a79a:	4b53      	ldr	r3, [pc, #332]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d109      	bne.n	800a7ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7aa:	e006      	b.n	800a7ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b0:	e004      	b.n	800a7bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7b2:	bf00      	nop
 800a7b4:	e002      	b.n	800a7bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7ba:	bf00      	nop
    }

    if(status == HAL_OK)
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10d      	bne.n	800a7de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a7c2:	4b49      	ldr	r3, [pc, #292]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6819      	ldr	r1, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	4943      	ldr	r1, [pc, #268]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d17c      	bne.n	800a8de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a7e4:	4b40      	ldr	r3, [pc, #256]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a3f      	ldr	r2, [pc, #252]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7f0:	f7fd fcfc 	bl	80081ec <HAL_GetTick>
 800a7f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7f6:	e009      	b.n	800a80c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7f8:	f7fd fcf8 	bl	80081ec <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	2b02      	cmp	r3, #2
 800a804:	d902      	bls.n	800a80c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	73fb      	strb	r3, [r7, #15]
        break;
 800a80a:	e005      	b.n	800a818 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a80c:	4b36      	ldr	r3, [pc, #216]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1ef      	bne.n	800a7f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d15f      	bne.n	800a8de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d110      	bne.n	800a846 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a824:	4b30      	ldr	r3, [pc, #192]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a82c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6892      	ldr	r2, [r2, #8]
 800a834:	0211      	lsls	r1, r2, #8
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	68d2      	ldr	r2, [r2, #12]
 800a83a:	06d2      	lsls	r2, r2, #27
 800a83c:	430a      	orrs	r2, r1
 800a83e:	492a      	ldr	r1, [pc, #168]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a840:	4313      	orrs	r3, r2
 800a842:	610b      	str	r3, [r1, #16]
 800a844:	e027      	b.n	800a896 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d112      	bne.n	800a872 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a84c:	4b26      	ldr	r3, [pc, #152]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	6892      	ldr	r2, [r2, #8]
 800a85c:	0211      	lsls	r1, r2, #8
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6912      	ldr	r2, [r2, #16]
 800a862:	0852      	lsrs	r2, r2, #1
 800a864:	3a01      	subs	r2, #1
 800a866:	0552      	lsls	r2, r2, #21
 800a868:	430a      	orrs	r2, r1
 800a86a:	491f      	ldr	r1, [pc, #124]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	610b      	str	r3, [r1, #16]
 800a870:	e011      	b.n	800a896 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a872:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a87a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6892      	ldr	r2, [r2, #8]
 800a882:	0211      	lsls	r1, r2, #8
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6952      	ldr	r2, [r2, #20]
 800a888:	0852      	lsrs	r2, r2, #1
 800a88a:	3a01      	subs	r2, #1
 800a88c:	0652      	lsls	r2, r2, #25
 800a88e:	430a      	orrs	r2, r1
 800a890:	4915      	ldr	r1, [pc, #84]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a892:	4313      	orrs	r3, r2
 800a894:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a13      	ldr	r2, [pc, #76]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a89c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a2:	f7fd fca3 	bl	80081ec <HAL_GetTick>
 800a8a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a8a8:	e009      	b.n	800a8be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8aa:	f7fd fc9f 	bl	80081ec <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d902      	bls.n	800a8be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	73fb      	strb	r3, [r7, #15]
          break;
 800a8bc:	e005      	b.n	800a8ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a8be:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0ef      	beq.n	800a8aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8d2:	691a      	ldr	r2, [r3, #16]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	4903      	ldr	r1, [pc, #12]	; (800a8e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	40021000 	.word	0x40021000

0800a8ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e049      	b.n	800a992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7fd fa18 	bl	8007d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3304      	adds	r3, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f000 f9e4 	bl	800acf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d001      	beq.n	800a9b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e03b      	b.n	800aa2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68da      	ldr	r2, [r3, #12]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a19      	ldr	r2, [pc, #100]	; (800aa38 <HAL_TIM_Base_Start_IT+0x9c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d009      	beq.n	800a9ea <HAL_TIM_Base_Start_IT+0x4e>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9de:	d004      	beq.n	800a9ea <HAL_TIM_Base_Start_IT+0x4e>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <HAL_TIM_Base_Start_IT+0xa0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d115      	bne.n	800aa16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <HAL_TIM_Base_Start_IT+0xa4>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b06      	cmp	r3, #6
 800a9fa:	d015      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x8c>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa02:	d011      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f042 0201 	orr.w	r2, r2, #1
 800aa12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa14:	e008      	b.n	800aa28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0201 	orr.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	e000      	b.n	800aa2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	00010007 	.word	0x00010007

0800aa44 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0201 	bic.w	r2, r2, #1
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6a1a      	ldr	r2, [r3, #32]
 800aa62:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10f      	bne.n	800aa8c <HAL_TIM_Base_Stop_IT+0x48>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6a1a      	ldr	r2, [r3, #32]
 800aa72:	f240 4344 	movw	r3, #1092	; 0x444
 800aa76:	4013      	ands	r3, r2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d107      	bne.n	800aa8c <HAL_TIM_Base_Stop_IT+0x48>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0201 	bic.w	r2, r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d020      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01b      	beq.n	800ab06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f06f 0202 	mvn.w	r2, #2
 800aad6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f8e4 	bl	800acba <HAL_TIM_IC_CaptureCallback>
 800aaf2:	e005      	b.n	800ab00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f8d6 	bl	800aca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f8e7 	bl	800acce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d020      	beq.n	800ab52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01b      	beq.n	800ab52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f06f 0204 	mvn.w	r2, #4
 800ab22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f8be 	bl	800acba <HAL_TIM_IC_CaptureCallback>
 800ab3e:	e005      	b.n	800ab4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f8b0 	bl	800aca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f8c1 	bl	800acce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d020      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f06f 0208 	mvn.w	r2, #8
 800ab6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2204      	movs	r2, #4
 800ab74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69db      	ldr	r3, [r3, #28]
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 f898 	bl	800acba <HAL_TIM_IC_CaptureCallback>
 800ab8a:	e005      	b.n	800ab98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f88a 	bl	800aca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f89b 	bl	800acce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f003 0310 	and.w	r3, r3, #16
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d020      	beq.n	800abea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d01b      	beq.n	800abea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f06f 0210 	mvn.w	r2, #16
 800abba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2208      	movs	r2, #8
 800abc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f872 	bl	800acba <HAL_TIM_IC_CaptureCallback>
 800abd6:	e005      	b.n	800abe4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f864 	bl	800aca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f875 	bl	800acce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00c      	beq.n	800ac0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d007      	beq.n	800ac0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f06f 0201 	mvn.w	r2, #1
 800ac06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fc fff7 	bl	8007bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00c      	beq.n	800ac32 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f937 	bl	800aea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00c      	beq.n	800ac56 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f92f 	bl	800aeb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00c      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f834 	bl	800ace2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00c      	beq.n	800ac9e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d007      	beq.n	800ac9e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f06f 0220 	mvn.w	r2, #32
 800ac96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f8f7 	bl	800ae8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acd6:	bf00      	nop
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
	...

0800acf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	; (800adb4 <TIM_Base_SetConfig+0xbc>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d003      	beq.n	800ad18 <TIM_Base_SetConfig+0x20>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad16:	d108      	bne.n	800ad2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <TIM_Base_SetConfig+0xbc>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00b      	beq.n	800ad4a <TIM_Base_SetConfig+0x52>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad38:	d007      	beq.n	800ad4a <TIM_Base_SetConfig+0x52>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a1e      	ldr	r2, [pc, #120]	; (800adb8 <TIM_Base_SetConfig+0xc0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d003      	beq.n	800ad4a <TIM_Base_SetConfig+0x52>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a1d      	ldr	r2, [pc, #116]	; (800adbc <TIM_Base_SetConfig+0xc4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d108      	bne.n	800ad5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	689a      	ldr	r2, [r3, #8]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a0c      	ldr	r2, [pc, #48]	; (800adb4 <TIM_Base_SetConfig+0xbc>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d007      	beq.n	800ad98 <TIM_Base_SetConfig+0xa0>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a0b      	ldr	r2, [pc, #44]	; (800adb8 <TIM_Base_SetConfig+0xc0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d003      	beq.n	800ad98 <TIM_Base_SetConfig+0xa0>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a0a      	ldr	r2, [pc, #40]	; (800adbc <TIM_Base_SetConfig+0xc4>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d103      	bne.n	800ada0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	615a      	str	r2, [r3, #20]
}
 800ada6:	bf00      	nop
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	40012c00 	.word	0x40012c00
 800adb8:	40014000 	.word	0x40014000
 800adbc:	40014400 	.word	0x40014400

0800adc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800add4:	2302      	movs	r3, #2
 800add6:	e04f      	b.n	800ae78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2202      	movs	r2, #2
 800ade4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a21      	ldr	r2, [pc, #132]	; (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d108      	bne.n	800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a14      	ldr	r2, [pc, #80]	; (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae40:	d004      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a10      	ldr	r2, [pc, #64]	; (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10c      	bne.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	40012c00 	.word	0x40012c00
 800ae88:	40014000 	.word	0x40014000

0800ae8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e040      	b.n	800af5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7fc ff52 	bl	8007d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2224      	movs	r2, #36	; 0x24
 800aef4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0201 	bic.w	r2, r2, #1
 800af04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fdbc 	bl	800ba8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fb8d 	bl	800b634 <UART_SetConfig>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e01b      	b.n	800af5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f042 0201 	orr.w	r2, r2, #1
 800af52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fe3b 	bl	800bbd0 <UART_CheckIdleState>
 800af5a:	4603      	mov	r3, r0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af64:	b480      	push	{r7}
 800af66:	b08b      	sub	sp, #44	; 0x2c
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	4613      	mov	r3, r2
 800af70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af76:	2b20      	cmp	r3, #32
 800af78:	d147      	bne.n	800b00a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <HAL_UART_Transmit_IT+0x22>
 800af80:	88fb      	ldrh	r3, [r7, #6]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e040      	b.n	800b00c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	88fa      	ldrh	r2, [r7, #6]
 800af94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	88fa      	ldrh	r2, [r7, #6]
 800af9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2221      	movs	r2, #33	; 0x21
 800afb2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afbc:	d107      	bne.n	800afce <HAL_UART_Transmit_IT+0x6a>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4a13      	ldr	r2, [pc, #76]	; (800b018 <HAL_UART_Transmit_IT+0xb4>)
 800afca:	66da      	str	r2, [r3, #108]	; 0x6c
 800afcc:	e002      	b.n	800afd4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4a12      	ldr	r2, [pc, #72]	; (800b01c <HAL_UART_Transmit_IT+0xb8>)
 800afd2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	613b      	str	r3, [r7, #16]
   return(result);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	69f9      	ldr	r1, [r7, #28]
 800aff8:	6a3a      	ldr	r2, [r7, #32]
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	61bb      	str	r3, [r7, #24]
   return(result);
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e6      	bne.n	800afd4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	e000      	b.n	800b00c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b00a:	2302      	movs	r3, #2
  }
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	372c      	adds	r7, #44	; 0x2c
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	0800bf9b 	.word	0x0800bf9b
 800b01c:	0800bee3 	.word	0x0800bee3

0800b020 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b0ba      	sub	sp, #232	; 0xe8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b04a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b04e:	4013      	ands	r3, r2
 800b050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d115      	bne.n	800b088 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b060:	f003 0320 	and.w	r3, r3, #32
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00f      	beq.n	800b088 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 82ae 	beq.w	800b5da <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	4798      	blx	r3
      }
      return;
 800b086:	e2a8      	b.n	800b5da <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 8117 	beq.w	800b2c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b09e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b0a2:	4b85      	ldr	r3, [pc, #532]	; (800b2b8 <HAL_UART_IRQHandler+0x298>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 810a 	beq.w	800b2c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d011      	beq.n	800b0dc <HAL_UART_IRQHandler+0xbc>
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0d2:	f043 0201 	orr.w	r2, r3, #1
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d011      	beq.n	800b10c <HAL_UART_IRQHandler+0xec>
 800b0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b102:	f043 0204 	orr.w	r2, r3, #4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <HAL_UART_IRQHandler+0x11c>
 800b118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2204      	movs	r2, #4
 800b12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b132:	f043 0202 	orr.w	r2, r3, #2
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b158:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2208      	movs	r2, #8
 800b166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b16e:	f043 0208 	orr.w	r2, r3, #8
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b180:	2b00      	cmp	r3, #0
 800b182:	d012      	beq.n	800b1aa <HAL_UART_IRQHandler+0x18a>
 800b184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00c      	beq.n	800b1aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1a0:	f043 0220 	orr.w	r2, r3, #32
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 8214 	beq.w	800b5de <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00d      	beq.n	800b1de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f2:	2b40      	cmp	r3, #64	; 0x40
 800b1f4:	d005      	beq.n	800b202 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d04f      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fdf3 	bl	800bdee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b212:	2b40      	cmp	r3, #64	; 0x40
 800b214:	d141      	bne.n	800b29a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b242:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b24e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1d9      	bne.n	800b216 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b266:	2b00      	cmp	r3, #0
 800b268:	d013      	beq.n	800b292 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b26e:	4a13      	ldr	r2, [pc, #76]	; (800b2bc <HAL_UART_IRQHandler+0x29c>)
 800b270:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd ffa5 	bl	80091c6 <HAL_DMA_Abort_IT>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d017      	beq.n	800b2b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b290:	e00f      	b.n	800b2b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f9b8 	bl	800b608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b298:	e00b      	b.n	800b2b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f9b4 	bl	800b608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	e007      	b.n	800b2b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f9b0 	bl	800b608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b2b0:	e195      	b.n	800b5de <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b2:	bf00      	nop
    return;
 800b2b4:	e193      	b.n	800b5de <HAL_UART_IRQHandler+0x5be>
 800b2b6:	bf00      	nop
 800b2b8:	04000120 	.word	0x04000120
 800b2bc:	0800beb7 	.word	0x0800beb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	f040 814e 	bne.w	800b566 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ce:	f003 0310 	and.w	r3, r3, #16
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 8147 	beq.w	800b566 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2dc:	f003 0310 	and.w	r3, r3, #16
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 8140 	beq.w	800b566 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2210      	movs	r2, #16
 800b2ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f8:	2b40      	cmp	r3, #64	; 0x40
 800b2fa:	f040 80b8 	bne.w	800b46e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b30a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 8167 	beq.w	800b5e2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b31a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b31e:	429a      	cmp	r2, r3
 800b320:	f080 815f 	bcs.w	800b5e2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b32a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0320 	and.w	r3, r3, #32
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 8086 	bne.w	800b44c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b35c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b36a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b36e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1da      	bne.n	800b340 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b39a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b39c:	f023 0301 	bic.w	r3, r3, #1
 800b3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e1      	bne.n	800b38a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e3      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41c:	f023 0310 	bic.w	r3, r3, #16
 800b420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b42e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b430:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b434:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e4      	bne.n	800b40c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fe7f 	bl	800914a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b45e:	b29b      	uxth	r3, r3
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	b29b      	uxth	r3, r3
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f8d8 	bl	800b61c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b46c:	e0b9      	b.n	800b5e2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b488:	b29b      	uxth	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 80ab 	beq.w	800b5e6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800b490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80a6 	beq.w	800b5e6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b4be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e4      	bne.n	800b49a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	623b      	str	r3, [r7, #32]
   return(result);
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	f023 0301 	bic.w	r3, r3, #1
 800b4e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4f4:	633a      	str	r2, [r7, #48]	; 0x30
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e3      	bne.n	800b4d0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2220      	movs	r2, #32
 800b50c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	e853 3f00 	ldrex	r3, [r3]
 800b528:	60fb      	str	r3, [r7, #12]
   return(result);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f023 0310 	bic.w	r3, r3, #16
 800b530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	69b9      	ldr	r1, [r7, #24]
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	617b      	str	r3, [r7, #20]
   return(result);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e4      	bne.n	800b51c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f85c 	bl	800b61c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b564:	e03f      	b.n	800b5e6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00e      	beq.n	800b590 <HAL_UART_IRQHandler+0x570>
 800b572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d008      	beq.n	800b590 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fd90 	bl	800c0ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b58e:	e02d      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00e      	beq.n	800b5ba <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d008      	beq.n	800b5ba <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01c      	beq.n	800b5ea <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
    }
    return;
 800b5b8:	e017      	b.n	800b5ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d012      	beq.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
 800b5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00c      	beq.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fd41 	bl	800c05a <UART_EndTransmit_IT>
    return;
 800b5d8:	e008      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
      return;
 800b5da:	bf00      	nop
 800b5dc:	e006      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
    return;
 800b5de:	bf00      	nop
 800b5e0:	e004      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
      return;
 800b5e2:	bf00      	nop
 800b5e4:	e002      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
      return;
 800b5e6:	bf00      	nop
 800b5e8:	e000      	b.n	800b5ec <HAL_UART_IRQHandler+0x5cc>
    return;
 800b5ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b5ec:	37e8      	adds	r7, #232	; 0xe8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop

0800b5f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b638:	b08a      	sub	sp, #40	; 0x28
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	689a      	ldr	r2, [r3, #8]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	431a      	orrs	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	4313      	orrs	r3, r2
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4bb4      	ldr	r3, [pc, #720]	; (800b934 <UART_SetConfig+0x300>)
 800b664:	4013      	ands	r3, r2
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	6812      	ldr	r2, [r2, #0]
 800b66a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b66c:	430b      	orrs	r3, r1
 800b66e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4aa9      	ldr	r2, [pc, #676]	; (800b938 <UART_SetConfig+0x304>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d004      	beq.n	800b6a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b69c:	4313      	orrs	r3, r2
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6b0:	430a      	orrs	r2, r1
 800b6b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4aa0      	ldr	r2, [pc, #640]	; (800b93c <UART_SetConfig+0x308>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d126      	bne.n	800b70c <UART_SetConfig+0xd8>
 800b6be:	4ba0      	ldr	r3, [pc, #640]	; (800b940 <UART_SetConfig+0x30c>)
 800b6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d81b      	bhi.n	800b704 <UART_SetConfig+0xd0>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <UART_SetConfig+0xa0>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b6f5 	.word	0x0800b6f5
 800b6dc:	0800b6ed 	.word	0x0800b6ed
 800b6e0:	0800b6fd 	.word	0x0800b6fd
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6ea:	e080      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6f2:	e07c      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b6fa:	e078      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b702:	e074      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b704:	2310      	movs	r3, #16
 800b706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b70a:	e070      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a8c      	ldr	r2, [pc, #560]	; (800b944 <UART_SetConfig+0x310>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d138      	bne.n	800b788 <UART_SetConfig+0x154>
 800b716:	4b8a      	ldr	r3, [pc, #552]	; (800b940 <UART_SetConfig+0x30c>)
 800b718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71c:	f003 030c 	and.w	r3, r3, #12
 800b720:	2b0c      	cmp	r3, #12
 800b722:	d82d      	bhi.n	800b780 <UART_SetConfig+0x14c>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <UART_SetConfig+0xf8>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b761 	.word	0x0800b761
 800b730:	0800b781 	.word	0x0800b781
 800b734:	0800b781 	.word	0x0800b781
 800b738:	0800b781 	.word	0x0800b781
 800b73c:	0800b771 	.word	0x0800b771
 800b740:	0800b781 	.word	0x0800b781
 800b744:	0800b781 	.word	0x0800b781
 800b748:	0800b781 	.word	0x0800b781
 800b74c:	0800b769 	.word	0x0800b769
 800b750:	0800b781 	.word	0x0800b781
 800b754:	0800b781 	.word	0x0800b781
 800b758:	0800b781 	.word	0x0800b781
 800b75c:	0800b779 	.word	0x0800b779
 800b760:	2300      	movs	r3, #0
 800b762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b766:	e042      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b768:	2302      	movs	r3, #2
 800b76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b76e:	e03e      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b770:	2304      	movs	r3, #4
 800b772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b776:	e03a      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b778:	2308      	movs	r3, #8
 800b77a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b77e:	e036      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b780:	2310      	movs	r3, #16
 800b782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b786:	e032      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a6a      	ldr	r2, [pc, #424]	; (800b938 <UART_SetConfig+0x304>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d12a      	bne.n	800b7e8 <UART_SetConfig+0x1b4>
 800b792:	4b6b      	ldr	r3, [pc, #428]	; (800b940 <UART_SetConfig+0x30c>)
 800b794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b79c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7a0:	d01a      	beq.n	800b7d8 <UART_SetConfig+0x1a4>
 800b7a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7a6:	d81b      	bhi.n	800b7e0 <UART_SetConfig+0x1ac>
 800b7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ac:	d00c      	beq.n	800b7c8 <UART_SetConfig+0x194>
 800b7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7b2:	d815      	bhi.n	800b7e0 <UART_SetConfig+0x1ac>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <UART_SetConfig+0x18c>
 800b7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7bc:	d008      	beq.n	800b7d0 <UART_SetConfig+0x19c>
 800b7be:	e00f      	b.n	800b7e0 <UART_SetConfig+0x1ac>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7c6:	e012      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ce:	e00e      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7d6:	e00a      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7de:	e006      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b7e0:	2310      	movs	r3, #16
 800b7e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7e6:	e002      	b.n	800b7ee <UART_SetConfig+0x1ba>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a51      	ldr	r2, [pc, #324]	; (800b938 <UART_SetConfig+0x304>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d17a      	bne.n	800b8ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b7f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b7fc:	2b08      	cmp	r3, #8
 800b7fe:	d824      	bhi.n	800b84a <UART_SetConfig+0x216>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <UART_SetConfig+0x1d4>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800b82d 	.word	0x0800b82d
 800b80c:	0800b84b 	.word	0x0800b84b
 800b810:	0800b835 	.word	0x0800b835
 800b814:	0800b84b 	.word	0x0800b84b
 800b818:	0800b83b 	.word	0x0800b83b
 800b81c:	0800b84b 	.word	0x0800b84b
 800b820:	0800b84b 	.word	0x0800b84b
 800b824:	0800b84b 	.word	0x0800b84b
 800b828:	0800b843 	.word	0x0800b843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b82c:	f7fe fcb8 	bl	800a1a0 <HAL_RCC_GetPCLK1Freq>
 800b830:	61f8      	str	r0, [r7, #28]
        break;
 800b832:	e010      	b.n	800b856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b834:	4b44      	ldr	r3, [pc, #272]	; (800b948 <UART_SetConfig+0x314>)
 800b836:	61fb      	str	r3, [r7, #28]
        break;
 800b838:	e00d      	b.n	800b856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b83a:	f7fe fc19 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800b83e:	61f8      	str	r0, [r7, #28]
        break;
 800b840:	e009      	b.n	800b856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b846:	61fb      	str	r3, [r7, #28]
        break;
 800b848:	e005      	b.n	800b856 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 8107 	beq.w	800ba6c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	4413      	add	r3, r2
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d305      	bcc.n	800b87a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b874:	69fa      	ldr	r2, [r7, #28]
 800b876:	429a      	cmp	r2, r3
 800b878:	d903      	bls.n	800b882 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b880:	e0f4      	b.n	800ba6c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	2200      	movs	r2, #0
 800b886:	461c      	mov	r4, r3
 800b888:	4615      	mov	r5, r2
 800b88a:	f04f 0200 	mov.w	r2, #0
 800b88e:	f04f 0300 	mov.w	r3, #0
 800b892:	022b      	lsls	r3, r5, #8
 800b894:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b898:	0222      	lsls	r2, r4, #8
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6849      	ldr	r1, [r1, #4]
 800b89e:	0849      	lsrs	r1, r1, #1
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	4688      	mov	r8, r1
 800b8a4:	4681      	mov	r9, r0
 800b8a6:	eb12 0a08 	adds.w	sl, r2, r8
 800b8aa:	eb43 0b09 	adc.w	fp, r3, r9
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	603b      	str	r3, [r7, #0]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8bc:	4650      	mov	r0, sl
 800b8be:	4659      	mov	r1, fp
 800b8c0:	f7f4 fcde 	bl	8000280 <__aeabi_uldivmod>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8d2:	d308      	bcc.n	800b8e6 <UART_SetConfig+0x2b2>
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8da:	d204      	bcs.n	800b8e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	60da      	str	r2, [r3, #12]
 800b8e4:	e0c2      	b.n	800ba6c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b8ec:	e0be      	b.n	800ba6c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8f6:	d16a      	bne.n	800b9ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b8f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d834      	bhi.n	800b96a <UART_SetConfig+0x336>
 800b900:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <UART_SetConfig+0x2d4>)
 800b902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b906:	bf00      	nop
 800b908:	0800b92d 	.word	0x0800b92d
 800b90c:	0800b94d 	.word	0x0800b94d
 800b910:	0800b955 	.word	0x0800b955
 800b914:	0800b96b 	.word	0x0800b96b
 800b918:	0800b95b 	.word	0x0800b95b
 800b91c:	0800b96b 	.word	0x0800b96b
 800b920:	0800b96b 	.word	0x0800b96b
 800b924:	0800b96b 	.word	0x0800b96b
 800b928:	0800b963 	.word	0x0800b963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b92c:	f7fe fc38 	bl	800a1a0 <HAL_RCC_GetPCLK1Freq>
 800b930:	61f8      	str	r0, [r7, #28]
        break;
 800b932:	e020      	b.n	800b976 <UART_SetConfig+0x342>
 800b934:	efff69f3 	.word	0xefff69f3
 800b938:	40008000 	.word	0x40008000
 800b93c:	40013800 	.word	0x40013800
 800b940:	40021000 	.word	0x40021000
 800b944:	40004400 	.word	0x40004400
 800b948:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b94c:	f7fe fc3e 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800b950:	61f8      	str	r0, [r7, #28]
        break;
 800b952:	e010      	b.n	800b976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b954:	4b4c      	ldr	r3, [pc, #304]	; (800ba88 <UART_SetConfig+0x454>)
 800b956:	61fb      	str	r3, [r7, #28]
        break;
 800b958:	e00d      	b.n	800b976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b95a:	f7fe fb89 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800b95e:	61f8      	str	r0, [r7, #28]
        break;
 800b960:	e009      	b.n	800b976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b966:	61fb      	str	r3, [r7, #28]
        break;
 800b968:	e005      	b.n	800b976 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d077      	beq.n	800ba6c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	005a      	lsls	r2, r3, #1
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	441a      	add	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b990:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	2b0f      	cmp	r3, #15
 800b996:	d916      	bls.n	800b9c6 <UART_SetConfig+0x392>
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99e:	d212      	bcs.n	800b9c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	f023 030f 	bic.w	r3, r3, #15
 800b9a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	085b      	lsrs	r3, r3, #1
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	f003 0307 	and.w	r3, r3, #7
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	8afb      	ldrh	r3, [r7, #22]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	8afa      	ldrh	r2, [r7, #22]
 800b9c2:	60da      	str	r2, [r3, #12]
 800b9c4:	e052      	b.n	800ba6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b9cc:	e04e      	b.n	800ba6c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9d2:	2b08      	cmp	r3, #8
 800b9d4:	d827      	bhi.n	800ba26 <UART_SetConfig+0x3f2>
 800b9d6:	a201      	add	r2, pc, #4	; (adr r2, 800b9dc <UART_SetConfig+0x3a8>)
 800b9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9dc:	0800ba01 	.word	0x0800ba01
 800b9e0:	0800ba09 	.word	0x0800ba09
 800b9e4:	0800ba11 	.word	0x0800ba11
 800b9e8:	0800ba27 	.word	0x0800ba27
 800b9ec:	0800ba17 	.word	0x0800ba17
 800b9f0:	0800ba27 	.word	0x0800ba27
 800b9f4:	0800ba27 	.word	0x0800ba27
 800b9f8:	0800ba27 	.word	0x0800ba27
 800b9fc:	0800ba1f 	.word	0x0800ba1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba00:	f7fe fbce 	bl	800a1a0 <HAL_RCC_GetPCLK1Freq>
 800ba04:	61f8      	str	r0, [r7, #28]
        break;
 800ba06:	e014      	b.n	800ba32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba08:	f7fe fbe0 	bl	800a1cc <HAL_RCC_GetPCLK2Freq>
 800ba0c:	61f8      	str	r0, [r7, #28]
        break;
 800ba0e:	e010      	b.n	800ba32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba10:	4b1d      	ldr	r3, [pc, #116]	; (800ba88 <UART_SetConfig+0x454>)
 800ba12:	61fb      	str	r3, [r7, #28]
        break;
 800ba14:	e00d      	b.n	800ba32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba16:	f7fe fb2b 	bl	800a070 <HAL_RCC_GetSysClockFreq>
 800ba1a:	61f8      	str	r0, [r7, #28]
        break;
 800ba1c:	e009      	b.n	800ba32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba22:	61fb      	str	r3, [r7, #28]
        break;
 800ba24:	e005      	b.n	800ba32 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ba30:	bf00      	nop
    }

    if (pclk != 0U)
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d019      	beq.n	800ba6c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	085a      	lsrs	r2, r3, #1
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	441a      	add	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	2b0f      	cmp	r3, #15
 800ba50:	d909      	bls.n	800ba66 <UART_SetConfig+0x432>
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba58:	d205      	bcs.n	800ba66 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60da      	str	r2, [r3, #12]
 800ba64:	e002      	b.n	800ba6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ba78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3728      	adds	r7, #40	; 0x28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba86:	bf00      	nop
 800ba88:	00f42400 	.word	0x00f42400

0800ba8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00a      	beq.n	800bab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00a      	beq.n	800bad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	f003 0302 	and.w	r3, r3, #2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00a      	beq.n	800bafa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	f003 0304 	and.w	r3, r3, #4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	f003 0310 	and.w	r3, r3, #16
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00a      	beq.n	800bb3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	f003 0320 	and.w	r3, r3, #32
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01a      	beq.n	800bba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb8a:	d10a      	bne.n	800bba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	605a      	str	r2, [r3, #4]
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b098      	sub	sp, #96	; 0x60
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbe0:	f7fc fb04 	bl	80081ec <HAL_GetTick>
 800bbe4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0308 	and.w	r3, r3, #8
 800bbf0:	2b08      	cmp	r3, #8
 800bbf2:	d12e      	bne.n	800bc52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f88c 	bl	800bd20 <UART_WaitOnFlagUntilTimeout>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d021      	beq.n	800bc52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	e853 3f00 	ldrex	r3, [r3]
 800bc1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc22:	653b      	str	r3, [r7, #80]	; 0x50
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc2c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e6      	bne.n	800bc0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e062      	b.n	800bd18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d149      	bne.n	800bcf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f856 	bl	800bd20 <UART_WaitOnFlagUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d03c      	beq.n	800bcf4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	623b      	str	r3, [r7, #32]
   return(result);
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc98:	633b      	str	r3, [r7, #48]	; 0x30
 800bc9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca0:	e841 2300 	strex	r3, r2, [r1]
 800bca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e6      	bne.n	800bc7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3308      	adds	r3, #8
 800bcca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bccc:	61fa      	str	r2, [r7, #28]
 800bcce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	69b9      	ldr	r1, [r7, #24]
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e5      	bne.n	800bcac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2220      	movs	r2, #32
 800bce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e011      	b.n	800bd18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2220      	movs	r2, #32
 800bcfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3758      	adds	r7, #88	; 0x58
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd30:	e049      	b.n	800bdc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd38:	d045      	beq.n	800bdc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd3a:	f7fc fa57 	bl	80081ec <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d302      	bcc.n	800bd50 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e048      	b.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 0304 	and.w	r3, r3, #4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d031      	beq.n	800bdc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	f003 0308 	and.w	r3, r3, #8
 800bd6c:	2b08      	cmp	r3, #8
 800bd6e:	d110      	bne.n	800bd92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2208      	movs	r2, #8
 800bd76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f838 	bl	800bdee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2208      	movs	r2, #8
 800bd82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e029      	b.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69db      	ldr	r3, [r3, #28]
 800bd98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda0:	d111      	bne.n	800bdc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f81e 	bl	800bdee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e00f      	b.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	69da      	ldr	r2, [r3, #28]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	4013      	ands	r3, r2
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	bf0c      	ite	eq
 800bdd6:	2301      	moveq	r3, #1
 800bdd8:	2300      	movne	r3, #0
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	461a      	mov	r2, r3
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d0a6      	beq.n	800bd32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b095      	sub	sp, #84	; 0x54
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	461a      	mov	r2, r3
 800be12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be14:	643b      	str	r3, [r7, #64]	; 0x40
 800be16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e6      	bne.n	800bdf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3308      	adds	r3, #8
 800be2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	e853 3f00 	ldrex	r3, [r3]
 800be36:	61fb      	str	r3, [r7, #28]
   return(result);
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be48:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be50:	e841 2300 	strex	r3, r2, [r1]
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e5      	bne.n	800be28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be60:	2b01      	cmp	r3, #1
 800be62:	d118      	bne.n	800be96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	60bb      	str	r3, [r7, #8]
   return(result);
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f023 0310 	bic.w	r3, r3, #16
 800be78:	647b      	str	r3, [r7, #68]	; 0x44
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be82:	61bb      	str	r3, [r7, #24]
 800be84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	6979      	ldr	r1, [r7, #20]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	613b      	str	r3, [r7, #16]
   return(result);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e6      	bne.n	800be64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2220      	movs	r2, #32
 800be9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	669a      	str	r2, [r3, #104]	; 0x68
}
 800beaa:	bf00      	nop
 800beac:	3754      	adds	r7, #84	; 0x54
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fb97 	bl	800b608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beda:	bf00      	nop
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b08f      	sub	sp, #60	; 0x3c
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beee:	2b21      	cmp	r3, #33	; 0x21
 800bef0:	d14d      	bne.n	800bf8e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bef8:	b29b      	uxth	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d132      	bne.n	800bf64 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf24:	e841 2300 	strex	r3, r2, [r1]
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e6      	bne.n	800befe <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	e853 3f00 	ldrex	r3, [r3]
 800bf3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf44:	633b      	str	r3, [r7, #48]	; 0x30
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	61bb      	str	r3, [r7, #24]
 800bf50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf52:	6979      	ldr	r1, [r7, #20]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	e841 2300 	strex	r3, r2, [r1]
 800bf5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e6      	bne.n	800bf30 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bf62:	e014      	b.n	800bf8e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf68:	781a      	ldrb	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bf8e:	bf00      	nop
 800bf90:	373c      	adds	r7, #60	; 0x3c
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b091      	sub	sp, #68	; 0x44
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfa6:	2b21      	cmp	r3, #33	; 0x21
 800bfa8:	d151      	bne.n	800c04e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d132      	bne.n	800c01c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	623b      	str	r3, [r7, #32]
   return(result);
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfca:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	633b      	str	r3, [r7, #48]	; 0x30
 800bfd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e6      	bne.n	800bfb6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	e853 3f00 	ldrex	r3, [r3]
 800bff4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bffc:	637b      	str	r3, [r7, #52]	; 0x34
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	69b9      	ldr	r1, [r7, #24]
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	617b      	str	r3, [r7, #20]
   return(result);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e6      	bne.n	800bfe8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c01a:	e018      	b.n	800c04e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c024:	881a      	ldrh	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c02e:	b292      	uxth	r2, r2
 800c030:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c036:	1c9a      	adds	r2, r3, #2
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c04e:	bf00      	nop
 800c050:	3744      	adds	r7, #68	; 0x44
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b088      	sub	sp, #32
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c076:	61fb      	str	r3, [r7, #28]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	61bb      	str	r3, [r7, #24]
 800c082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	6979      	ldr	r1, [r7, #20]
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	e841 2300 	strex	r3, r2, [r1]
 800c08c:	613b      	str	r3, [r7, #16]
   return(result);
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e6      	bne.n	800c062 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2220      	movs	r2, #32
 800c098:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff faa7 	bl	800b5f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0a6:	bf00      	nop
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b085      	sub	sp, #20
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c0d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0d4:	2b84      	cmp	r3, #132	; 0x84
 800c0d6:	d005      	beq.n	800c0e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c0d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	3303      	adds	r3, #3
 800c0e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3714      	adds	r7, #20
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c0f6:	f000 faf5 	bl	800c6e4 <vTaskStartScheduler>
  
  return osOK;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c102:	b089      	sub	sp, #36	; 0x24
 800c104:	af04      	add	r7, sp, #16
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d020      	beq.n	800c154 <osThreadCreate+0x54>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d01c      	beq.n	800c154 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685c      	ldr	r4, [r3, #4]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691e      	ldr	r6, [r3, #16]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff ffc8 	bl	800c0c2 <makeFreeRtosPriority>
 800c132:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	695b      	ldr	r3, [r3, #20]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c13c:	9202      	str	r2, [sp, #8]
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	9100      	str	r1, [sp, #0]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	4632      	mov	r2, r6
 800c146:	4629      	mov	r1, r5
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 f8ed 	bl	800c328 <xTaskCreateStatic>
 800c14e:	4603      	mov	r3, r0
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e01c      	b.n	800c18e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685c      	ldr	r4, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c160:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff ffaa 	bl	800c0c2 <makeFreeRtosPriority>
 800c16e:	4602      	mov	r2, r0
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	9200      	str	r2, [sp, #0]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	4632      	mov	r2, r6
 800c17c:	4629      	mov	r1, r5
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 f92f 	bl	800c3e2 <xTaskCreate>
 800c184:	4603      	mov	r3, r0
 800c186:	2b01      	cmp	r3, #1
 800c188:	d001      	beq.n	800c18e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e000      	b.n	800c190 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c198 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <osDelay+0x16>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	e000      	b.n	800c1b0 <osDelay+0x18>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fa63 	bl	800c67c <vTaskDelay>
  
  return osOK;
 800c1b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b083      	sub	sp, #12
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f103 0208 	add.w	r2, r3, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f103 0208 	add.w	r2, r3, #8
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f103 0208 	add.w	r2, r3, #8
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c21a:	b480      	push	{r7}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c278:	d103      	bne.n	800c282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	e00c      	b.n	800c29c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3308      	adds	r3, #8
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	e002      	b.n	800c290 <vListInsert+0x2e>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d2f6      	bcs.n	800c28a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	685a      	ldr	r2, [r3, #4]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	601a      	str	r2, [r3, #0]
}
 800c2c8:	bf00      	nop
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6892      	ldr	r2, [r2, #8]
 800c2ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6852      	ldr	r2, [r2, #4]
 800c2f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d103      	bne.n	800c308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689a      	ldr	r2, [r3, #8]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af04      	add	r7, sp, #16
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10a      	bne.n	800c352 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c34e:	bf00      	nop
 800c350:	e7fe      	b.n	800c350 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTaskCreateStatic+0x46>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	61fb      	str	r3, [r7, #28]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c36e:	23a0      	movs	r3, #160	; 0xa0
 800c370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2ba0      	cmp	r3, #160	; 0xa0
 800c376:	d00a      	beq.n	800c38e <xTaskCreateStatic+0x66>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	61bb      	str	r3, [r7, #24]
}
 800c38a:	bf00      	nop
 800c38c:	e7fe      	b.n	800c38c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c38e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	2b00      	cmp	r3, #0
 800c394:	d01e      	beq.n	800c3d4 <xTaskCreateStatic+0xac>
 800c396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01b      	beq.n	800c3d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	9302      	str	r3, [sp, #8]
 800c3b6:	f107 0314 	add.w	r3, r7, #20
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	68b9      	ldr	r1, [r7, #8]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 f850 	bl	800c46c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ce:	f000 f8eb 	bl	800c5a8 <prvAddNewTaskToReadyList>
 800c3d2:	e001      	b.n	800c3d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3d8:	697b      	ldr	r3, [r7, #20]
	}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3728      	adds	r7, #40	; 0x28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b08c      	sub	sp, #48	; 0x30
 800c3e6:	af04      	add	r7, sp, #16
 800c3e8:	60f8      	str	r0, [r7, #12]
 800c3ea:	60b9      	str	r1, [r7, #8]
 800c3ec:	603b      	str	r3, [r7, #0]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3f2:	88fb      	ldrh	r3, [r7, #6]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 feee 	bl	800d1d8 <pvPortMalloc>
 800c3fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c404:	20a0      	movs	r0, #160	; 0xa0
 800c406:	f000 fee7 	bl	800d1d8 <pvPortMalloc>
 800c40a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	631a      	str	r2, [r3, #48]	; 0x30
 800c418:	e005      	b.n	800c426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c41a:	6978      	ldr	r0, [r7, #20]
 800c41c:	f000 ffa8 	bl	800d370 <vPortFree>
 800c420:	e001      	b.n	800c426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d017      	beq.n	800c45c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c434:	88fa      	ldrh	r2, [r7, #6]
 800c436:	2300      	movs	r3, #0
 800c438:	9303      	str	r3, [sp, #12]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	9302      	str	r3, [sp, #8]
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 f80e 	bl	800c46c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c450:	69f8      	ldr	r0, [r7, #28]
 800c452:	f000 f8a9 	bl	800c5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c456:	2301      	movs	r3, #1
 800c458:	61bb      	str	r3, [r7, #24]
 800c45a:	e002      	b.n	800c462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c45c:	f04f 33ff 	mov.w	r3, #4294967295
 800c460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c462:	69bb      	ldr	r3, [r7, #24]
	}
 800c464:	4618      	mov	r0, r3
 800c466:	3720      	adds	r7, #32
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b088      	sub	sp, #32
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c484:	3b01      	subs	r3, #1
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	4413      	add	r3, r2
 800c48a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	f023 0307 	bic.w	r3, r3, #7
 800c492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	617b      	str	r3, [r7, #20]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d01f      	beq.n	800c4fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	61fb      	str	r3, [r7, #28]
 800c4be:	e012      	b.n	800c4e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	7819      	ldrb	r1, [r3, #0]
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	3334      	adds	r3, #52	; 0x34
 800c4d0:	460a      	mov	r2, r1
 800c4d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	4413      	add	r3, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	61fb      	str	r3, [r7, #28]
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	2b0f      	cmp	r3, #15
 800c4ea:	d9e9      	bls.n	800c4c0 <prvInitialiseNewTask+0x54>
 800c4ec:	e000      	b.n	800c4f0 <prvInitialiseNewTask+0x84>
			{
				break;
 800c4ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4f8:	e003      	b.n	800c502 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	2b06      	cmp	r3, #6
 800c506:	d901      	bls.n	800c50c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c508:	2306      	movs	r3, #6
 800c50a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c516:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	2200      	movs	r2, #0
 800c51c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	3304      	adds	r3, #4
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff fe6c 	bl	800c200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	3318      	adds	r3, #24
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff fe67 	bl	800c200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	f1c3 0207 	rsb	r2, r3, #7
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	2200      	movs	r2, #0
 800c54c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	2200      	movs	r2, #0
 800c554:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	334c      	adds	r3, #76	; 0x4c
 800c55c:	224c      	movs	r2, #76	; 0x4c
 800c55e:	2100      	movs	r1, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f001 fbd9 	bl	800dd18 <memset>
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <prvInitialiseNewTask+0x130>)
 800c56a:	651a      	str	r2, [r3, #80]	; 0x50
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	4a0c      	ldr	r2, [pc, #48]	; (800c5a0 <prvInitialiseNewTask+0x134>)
 800c570:	655a      	str	r2, [r3, #84]	; 0x54
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	4a0b      	ldr	r2, [pc, #44]	; (800c5a4 <prvInitialiseNewTask+0x138>)
 800c576:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	68f9      	ldr	r1, [r7, #12]
 800c57c:	69b8      	ldr	r0, [r7, #24]
 800c57e:	f000 fc1f 	bl	800cdc0 <pxPortInitialiseStack>
 800c582:	4602      	mov	r2, r0
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c594:	bf00      	nop
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	2000142c 	.word	0x2000142c
 800c5a0:	20001494 	.word	0x20001494
 800c5a4:	200014fc 	.word	0x200014fc

0800c5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5b0:	f000 fd30 	bl	800d014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5b4:	4b2a      	ldr	r3, [pc, #168]	; (800c660 <prvAddNewTaskToReadyList+0xb8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	4a29      	ldr	r2, [pc, #164]	; (800c660 <prvAddNewTaskToReadyList+0xb8>)
 800c5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5be:	4b29      	ldr	r3, [pc, #164]	; (800c664 <prvAddNewTaskToReadyList+0xbc>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d109      	bne.n	800c5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5c6:	4a27      	ldr	r2, [pc, #156]	; (800c664 <prvAddNewTaskToReadyList+0xbc>)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5cc:	4b24      	ldr	r3, [pc, #144]	; (800c660 <prvAddNewTaskToReadyList+0xb8>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d110      	bne.n	800c5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5d4:	f000 facc 	bl	800cb70 <prvInitialiseTaskLists>
 800c5d8:	e00d      	b.n	800c5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5da:	4b23      	ldr	r3, [pc, #140]	; (800c668 <prvAddNewTaskToReadyList+0xc0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d109      	bne.n	800c5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5e2:	4b20      	ldr	r3, [pc, #128]	; (800c664 <prvAddNewTaskToReadyList+0xbc>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d802      	bhi.n	800c5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c5f0:	4a1c      	ldr	r2, [pc, #112]	; (800c664 <prvAddNewTaskToReadyList+0xbc>)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c5f6:	4b1d      	ldr	r3, [pc, #116]	; (800c66c <prvAddNewTaskToReadyList+0xc4>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	4a1b      	ldr	r2, [pc, #108]	; (800c66c <prvAddNewTaskToReadyList+0xc4>)
 800c5fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	2201      	movs	r2, #1
 800c606:	409a      	lsls	r2, r3
 800c608:	4b19      	ldr	r3, [pc, #100]	; (800c670 <prvAddNewTaskToReadyList+0xc8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	4a18      	ldr	r2, [pc, #96]	; (800c670 <prvAddNewTaskToReadyList+0xc8>)
 800c610:	6013      	str	r3, [r2, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c616:	4613      	mov	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4a15      	ldr	r2, [pc, #84]	; (800c674 <prvAddNewTaskToReadyList+0xcc>)
 800c620:	441a      	add	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3304      	adds	r3, #4
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7ff fdf6 	bl	800c21a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c62e:	f000 fd21 	bl	800d074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c632:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <prvAddNewTaskToReadyList+0xc0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00e      	beq.n	800c658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c63a:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <prvAddNewTaskToReadyList+0xbc>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c644:	429a      	cmp	r2, r3
 800c646:	d207      	bcs.n	800c658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c648:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <prvAddNewTaskToReadyList+0xd0>)
 800c64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	20000818 	.word	0x20000818
 800c664:	20000718 	.word	0x20000718
 800c668:	20000824 	.word	0x20000824
 800c66c:	20000834 	.word	0x20000834
 800c670:	20000820 	.word	0x20000820
 800c674:	2000071c 	.word	0x2000071c
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c684:	2300      	movs	r3, #0
 800c686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d017      	beq.n	800c6be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <vTaskDelay+0x60>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <vTaskDelay+0x30>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60bb      	str	r3, [r7, #8]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6ac:	f000 f884 	bl	800c7b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fb1e 	bl	800ccf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6b8:	f000 f88c 	bl	800c7d4 <xTaskResumeAll>
 800c6bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d107      	bne.n	800c6d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <vTaskDelay+0x64>)
 800c6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ca:	601a      	str	r2, [r3, #0]
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6d4:	bf00      	nop
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	20000840 	.word	0x20000840
 800c6e0:	e000ed04 	.word	0xe000ed04

0800c6e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	; 0x28
 800c6e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	1d39      	adds	r1, r7, #4
 800c6f6:	f107 0308 	add.w	r3, r7, #8
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fb f8ce 	bl	800789c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	9202      	str	r2, [sp, #8]
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	2300      	movs	r3, #0
 800c710:	460a      	mov	r2, r1
 800c712:	4921      	ldr	r1, [pc, #132]	; (800c798 <vTaskStartScheduler+0xb4>)
 800c714:	4821      	ldr	r0, [pc, #132]	; (800c79c <vTaskStartScheduler+0xb8>)
 800c716:	f7ff fe07 	bl	800c328 <xTaskCreateStatic>
 800c71a:	4603      	mov	r3, r0
 800c71c:	4a20      	ldr	r2, [pc, #128]	; (800c7a0 <vTaskStartScheduler+0xbc>)
 800c71e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c720:	4b1f      	ldr	r3, [pc, #124]	; (800c7a0 <vTaskStartScheduler+0xbc>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c728:	2301      	movs	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e001      	b.n	800c732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c72e:	2300      	movs	r3, #0
 800c730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d11b      	bne.n	800c770 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	613b      	str	r3, [r7, #16]
}
 800c74a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c74c:	4b15      	ldr	r3, [pc, #84]	; (800c7a4 <vTaskStartScheduler+0xc0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	334c      	adds	r3, #76	; 0x4c
 800c752:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <vTaskStartScheduler+0xc4>)
 800c754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c756:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <vTaskStartScheduler+0xc8>)
 800c758:	f04f 32ff 	mov.w	r2, #4294967295
 800c75c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c75e:	4b14      	ldr	r3, [pc, #80]	; (800c7b0 <vTaskStartScheduler+0xcc>)
 800c760:	2201      	movs	r2, #1
 800c762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c764:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <vTaskStartScheduler+0xd0>)
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c76a:	f000 fbb1 	bl	800ced0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c76e:	e00e      	b.n	800c78e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c776:	d10a      	bne.n	800c78e <vTaskStartScheduler+0xaa>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	60fb      	str	r3, [r7, #12]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <vTaskStartScheduler+0xa8>
}
 800c78e:	bf00      	nop
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	0800e870 	.word	0x0800e870
 800c79c:	0800cb41 	.word	0x0800cb41
 800c7a0:	2000083c 	.word	0x2000083c
 800c7a4:	20000718 	.word	0x20000718
 800c7a8:	200002b4 	.word	0x200002b4
 800c7ac:	20000838 	.word	0x20000838
 800c7b0:	20000824 	.word	0x20000824
 800c7b4:	2000081c 	.word	0x2000081c

0800c7b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <vTaskSuspendAll+0x18>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	4a03      	ldr	r2, [pc, #12]	; (800c7d0 <vTaskSuspendAll+0x18>)
 800c7c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7c6:	bf00      	nop
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr
 800c7d0:	20000840 	.word	0x20000840

0800c7d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7e2:	4b41      	ldr	r3, [pc, #260]	; (800c8e8 <xTaskResumeAll+0x114>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10a      	bne.n	800c800 <xTaskResumeAll+0x2c>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	603b      	str	r3, [r7, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c800:	f000 fc08 	bl	800d014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c804:	4b38      	ldr	r3, [pc, #224]	; (800c8e8 <xTaskResumeAll+0x114>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3b01      	subs	r3, #1
 800c80a:	4a37      	ldr	r2, [pc, #220]	; (800c8e8 <xTaskResumeAll+0x114>)
 800c80c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c80e:	4b36      	ldr	r3, [pc, #216]	; (800c8e8 <xTaskResumeAll+0x114>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d161      	bne.n	800c8da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c816:	4b35      	ldr	r3, [pc, #212]	; (800c8ec <xTaskResumeAll+0x118>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d05d      	beq.n	800c8da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c81e:	e02e      	b.n	800c87e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c820:	4b33      	ldr	r3, [pc, #204]	; (800c8f0 <xTaskResumeAll+0x11c>)
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3318      	adds	r3, #24
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff fd51 	bl	800c2d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fd4c 	bl	800c2d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	2201      	movs	r2, #1
 800c842:	409a      	lsls	r2, r3
 800c844:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <xTaskResumeAll+0x120>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4313      	orrs	r3, r2
 800c84a:	4a2a      	ldr	r2, [pc, #168]	; (800c8f4 <xTaskResumeAll+0x120>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a27      	ldr	r2, [pc, #156]	; (800c8f8 <xTaskResumeAll+0x124>)
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7ff fcd8 	bl	800c21a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	4b23      	ldr	r3, [pc, #140]	; (800c8fc <xTaskResumeAll+0x128>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	429a      	cmp	r2, r3
 800c876:	d302      	bcc.n	800c87e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c878:	4b21      	ldr	r3, [pc, #132]	; (800c900 <xTaskResumeAll+0x12c>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c87e:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <xTaskResumeAll+0x11c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1cc      	bne.n	800c820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c88c:	f000 fa12 	bl	800ccb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c890:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <xTaskResumeAll+0x130>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d010      	beq.n	800c8be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c89c:	f000 f836 	bl	800c90c <xTaskIncrementTick>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c8a6:	4b16      	ldr	r3, [pc, #88]	; (800c900 <xTaskResumeAll+0x12c>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1f1      	bne.n	800c89c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c8b8:	4b12      	ldr	r3, [pc, #72]	; (800c904 <xTaskResumeAll+0x130>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8be:	4b10      	ldr	r3, [pc, #64]	; (800c900 <xTaskResumeAll+0x12c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d009      	beq.n	800c8da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8ca:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <xTaskResumeAll+0x134>)
 800c8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8da:	f000 fbcb 	bl	800d074 <vPortExitCritical>

	return xAlreadyYielded;
 800c8de:	68bb      	ldr	r3, [r7, #8]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	20000840 	.word	0x20000840
 800c8ec:	20000818 	.word	0x20000818
 800c8f0:	200007d8 	.word	0x200007d8
 800c8f4:	20000820 	.word	0x20000820
 800c8f8:	2000071c 	.word	0x2000071c
 800c8fc:	20000718 	.word	0x20000718
 800c900:	2000082c 	.word	0x2000082c
 800c904:	20000828 	.word	0x20000828
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c916:	4b4e      	ldr	r3, [pc, #312]	; (800ca50 <xTaskIncrementTick+0x144>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f040 808e 	bne.w	800ca3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c920:	4b4c      	ldr	r3, [pc, #304]	; (800ca54 <xTaskIncrementTick+0x148>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3301      	adds	r3, #1
 800c926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c928:	4a4a      	ldr	r2, [pc, #296]	; (800ca54 <xTaskIncrementTick+0x148>)
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d120      	bne.n	800c976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c934:	4b48      	ldr	r3, [pc, #288]	; (800ca58 <xTaskIncrementTick+0x14c>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <xTaskIncrementTick+0x48>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	603b      	str	r3, [r7, #0]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <xTaskIncrementTick+0x46>
 800c954:	4b40      	ldr	r3, [pc, #256]	; (800ca58 <xTaskIncrementTick+0x14c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	4b40      	ldr	r3, [pc, #256]	; (800ca5c <xTaskIncrementTick+0x150>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a3e      	ldr	r2, [pc, #248]	; (800ca58 <xTaskIncrementTick+0x14c>)
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	4a3e      	ldr	r2, [pc, #248]	; (800ca5c <xTaskIncrementTick+0x150>)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6013      	str	r3, [r2, #0]
 800c968:	4b3d      	ldr	r3, [pc, #244]	; (800ca60 <xTaskIncrementTick+0x154>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3301      	adds	r3, #1
 800c96e:	4a3c      	ldr	r2, [pc, #240]	; (800ca60 <xTaskIncrementTick+0x154>)
 800c970:	6013      	str	r3, [r2, #0]
 800c972:	f000 f99f 	bl	800ccb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c976:	4b3b      	ldr	r3, [pc, #236]	; (800ca64 <xTaskIncrementTick+0x158>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d348      	bcc.n	800ca12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c980:	4b35      	ldr	r3, [pc, #212]	; (800ca58 <xTaskIncrementTick+0x14c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98a:	4b36      	ldr	r3, [pc, #216]	; (800ca64 <xTaskIncrementTick+0x158>)
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295
 800c990:	601a      	str	r2, [r3, #0]
					break;
 800c992:	e03e      	b.n	800ca12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c994:	4b30      	ldr	r3, [pc, #192]	; (800ca58 <xTaskIncrementTick+0x14c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d203      	bcs.n	800c9b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9ac:	4a2d      	ldr	r2, [pc, #180]	; (800ca64 <xTaskIncrementTick+0x158>)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9b2:	e02e      	b.n	800ca12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fc8b 	bl	800c2d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	3318      	adds	r3, #24
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fc82 	bl	800c2d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	409a      	lsls	r2, r3
 800c9d8:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <xTaskIncrementTick+0x15c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	4a22      	ldr	r2, [pc, #136]	; (800ca68 <xTaskIncrementTick+0x15c>)
 800c9e0:	6013      	str	r3, [r2, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4a1f      	ldr	r2, [pc, #124]	; (800ca6c <xTaskIncrementTick+0x160>)
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7ff fc0e 	bl	800c21a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca02:	4b1b      	ldr	r3, [pc, #108]	; (800ca70 <xTaskIncrementTick+0x164>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d3b9      	bcc.n	800c980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca10:	e7b6      	b.n	800c980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca12:	4b17      	ldr	r3, [pc, #92]	; (800ca70 <xTaskIncrementTick+0x164>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca18:	4914      	ldr	r1, [pc, #80]	; (800ca6c <xTaskIncrementTick+0x160>)
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	440b      	add	r3, r1
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d901      	bls.n	800ca2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca2e:	4b11      	ldr	r3, [pc, #68]	; (800ca74 <xTaskIncrementTick+0x168>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d007      	beq.n	800ca46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ca36:	2301      	movs	r3, #1
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e004      	b.n	800ca46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <xTaskIncrementTick+0x16c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3301      	adds	r3, #1
 800ca42:	4a0d      	ldr	r2, [pc, #52]	; (800ca78 <xTaskIncrementTick+0x16c>)
 800ca44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca46:	697b      	ldr	r3, [r7, #20]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20000840 	.word	0x20000840
 800ca54:	2000081c 	.word	0x2000081c
 800ca58:	200007d0 	.word	0x200007d0
 800ca5c:	200007d4 	.word	0x200007d4
 800ca60:	20000830 	.word	0x20000830
 800ca64:	20000838 	.word	0x20000838
 800ca68:	20000820 	.word	0x20000820
 800ca6c:	2000071c 	.word	0x2000071c
 800ca70:	20000718 	.word	0x20000718
 800ca74:	2000082c 	.word	0x2000082c
 800ca78:	20000828 	.word	0x20000828

0800ca7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b087      	sub	sp, #28
 800ca80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca82:	4b29      	ldr	r3, [pc, #164]	; (800cb28 <vTaskSwitchContext+0xac>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca8a:	4b28      	ldr	r3, [pc, #160]	; (800cb2c <vTaskSwitchContext+0xb0>)
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca90:	e044      	b.n	800cb1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ca92:	4b26      	ldr	r3, [pc, #152]	; (800cb2c <vTaskSwitchContext+0xb0>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca98:	4b25      	ldr	r3, [pc, #148]	; (800cb30 <vTaskSwitchContext+0xb4>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	fab3 f383 	clz	r3, r3
 800caa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800caa6:	7afb      	ldrb	r3, [r7, #11]
 800caa8:	f1c3 031f 	rsb	r3, r3, #31
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	4921      	ldr	r1, [pc, #132]	; (800cb34 <vTaskSwitchContext+0xb8>)
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	440b      	add	r3, r1
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10a      	bne.n	800cad8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	607b      	str	r3, [r7, #4]
}
 800cad4:	bf00      	nop
 800cad6:	e7fe      	b.n	800cad6 <vTaskSwitchContext+0x5a>
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4a14      	ldr	r2, [pc, #80]	; (800cb34 <vTaskSwitchContext+0xb8>)
 800cae4:	4413      	add	r3, r2
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	685a      	ldr	r2, [r3, #4]
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	605a      	str	r2, [r3, #4]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	3308      	adds	r3, #8
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d104      	bne.n	800cb08 <vTaskSwitchContext+0x8c>
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	605a      	str	r2, [r3, #4]
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <vTaskSwitchContext+0xbc>)
 800cb10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb12:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <vTaskSwitchContext+0xbc>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	334c      	adds	r3, #76	; 0x4c
 800cb18:	4a08      	ldr	r2, [pc, #32]	; (800cb3c <vTaskSwitchContext+0xc0>)
 800cb1a:	6013      	str	r3, [r2, #0]
}
 800cb1c:	bf00      	nop
 800cb1e:	371c      	adds	r7, #28
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20000840 	.word	0x20000840
 800cb2c:	2000082c 	.word	0x2000082c
 800cb30:	20000820 	.word	0x20000820
 800cb34:	2000071c 	.word	0x2000071c
 800cb38:	20000718 	.word	0x20000718
 800cb3c:	200002b4 	.word	0x200002b4

0800cb40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb48:	f000 f852 	bl	800cbf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb4c:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <prvIdleTask+0x28>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d9f9      	bls.n	800cb48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <prvIdleTask+0x2c>)
 800cb56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb64:	e7f0      	b.n	800cb48 <prvIdleTask+0x8>
 800cb66:	bf00      	nop
 800cb68:	2000071c 	.word	0x2000071c
 800cb6c:	e000ed04 	.word	0xe000ed04

0800cb70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb76:	2300      	movs	r3, #0
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	e00c      	b.n	800cb96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4a12      	ldr	r2, [pc, #72]	; (800cbd0 <prvInitialiseTaskLists+0x60>)
 800cb88:	4413      	add	r3, r2
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fb18 	bl	800c1c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3301      	adds	r3, #1
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b06      	cmp	r3, #6
 800cb9a:	d9ef      	bls.n	800cb7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb9c:	480d      	ldr	r0, [pc, #52]	; (800cbd4 <prvInitialiseTaskLists+0x64>)
 800cb9e:	f7ff fb0f 	bl	800c1c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cba2:	480d      	ldr	r0, [pc, #52]	; (800cbd8 <prvInitialiseTaskLists+0x68>)
 800cba4:	f7ff fb0c 	bl	800c1c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cba8:	480c      	ldr	r0, [pc, #48]	; (800cbdc <prvInitialiseTaskLists+0x6c>)
 800cbaa:	f7ff fb09 	bl	800c1c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbae:	480c      	ldr	r0, [pc, #48]	; (800cbe0 <prvInitialiseTaskLists+0x70>)
 800cbb0:	f7ff fb06 	bl	800c1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbb4:	480b      	ldr	r0, [pc, #44]	; (800cbe4 <prvInitialiseTaskLists+0x74>)
 800cbb6:	f7ff fb03 	bl	800c1c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <prvInitialiseTaskLists+0x78>)
 800cbbc:	4a05      	ldr	r2, [pc, #20]	; (800cbd4 <prvInitialiseTaskLists+0x64>)
 800cbbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbc0:	4b0a      	ldr	r3, [pc, #40]	; (800cbec <prvInitialiseTaskLists+0x7c>)
 800cbc2:	4a05      	ldr	r2, [pc, #20]	; (800cbd8 <prvInitialiseTaskLists+0x68>)
 800cbc4:	601a      	str	r2, [r3, #0]
}
 800cbc6:	bf00      	nop
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	2000071c 	.word	0x2000071c
 800cbd4:	200007a8 	.word	0x200007a8
 800cbd8:	200007bc 	.word	0x200007bc
 800cbdc:	200007d8 	.word	0x200007d8
 800cbe0:	200007ec 	.word	0x200007ec
 800cbe4:	20000804 	.word	0x20000804
 800cbe8:	200007d0 	.word	0x200007d0
 800cbec:	200007d4 	.word	0x200007d4

0800cbf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbf6:	e019      	b.n	800cc2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbf8:	f000 fa0c 	bl	800d014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbfc:	4b10      	ldr	r3, [pc, #64]	; (800cc40 <prvCheckTasksWaitingTermination+0x50>)
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3304      	adds	r3, #4
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fb63 	bl	800c2d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc0e:	4b0d      	ldr	r3, [pc, #52]	; (800cc44 <prvCheckTasksWaitingTermination+0x54>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3b01      	subs	r3, #1
 800cc14:	4a0b      	ldr	r2, [pc, #44]	; (800cc44 <prvCheckTasksWaitingTermination+0x54>)
 800cc16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc18:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <prvCheckTasksWaitingTermination+0x58>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	4a0a      	ldr	r2, [pc, #40]	; (800cc48 <prvCheckTasksWaitingTermination+0x58>)
 800cc20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc22:	f000 fa27 	bl	800d074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f810 	bl	800cc4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <prvCheckTasksWaitingTermination+0x58>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e1      	bne.n	800cbf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc34:	bf00      	nop
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200007ec 	.word	0x200007ec
 800cc44:	20000818 	.word	0x20000818
 800cc48:	20000800 	.word	0x20000800

0800cc4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	334c      	adds	r3, #76	; 0x4c
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f001 f875 	bl	800dd48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d108      	bne.n	800cc7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 fb7f 	bl	800d370 <vPortFree>
				vPortFree( pxTCB );
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fb7c 	bl	800d370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc78:	e018      	b.n	800ccac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d103      	bne.n	800cc8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fb73 	bl	800d370 <vPortFree>
	}
 800cc8a:	e00f      	b.n	800ccac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d00a      	beq.n	800ccac <prvDeleteTCB+0x60>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	60fb      	str	r3, [r7, #12]
}
 800cca8:	bf00      	nop
 800ccaa:	e7fe      	b.n	800ccaa <prvDeleteTCB+0x5e>
	}
 800ccac:	bf00      	nop
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccba:	4b0c      	ldr	r3, [pc, #48]	; (800ccec <prvResetNextTaskUnblockTime+0x38>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d104      	bne.n	800ccce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccc4:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <prvResetNextTaskUnblockTime+0x3c>)
 800ccc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cccc:	e008      	b.n	800cce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccce:	4b07      	ldr	r3, [pc, #28]	; (800ccec <prvResetNextTaskUnblockTime+0x38>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	4a04      	ldr	r2, [pc, #16]	; (800ccf0 <prvResetNextTaskUnblockTime+0x3c>)
 800ccde:	6013      	str	r3, [r2, #0]
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	200007d0 	.word	0x200007d0
 800ccf0:	20000838 	.word	0x20000838

0800ccf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ccfe:	4b29      	ldr	r3, [pc, #164]	; (800cda4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd04:	4b28      	ldr	r3, [pc, #160]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fae2 	bl	800c2d4 <uxListRemove>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10b      	bne.n	800cd2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cd16:	4b24      	ldr	r3, [pc, #144]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd22:	43da      	mvns	r2, r3
 800cd24:	4b21      	ldr	r3, [pc, #132]	; (800cdac <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4013      	ands	r3, r2
 800cd2a:	4a20      	ldr	r2, [pc, #128]	; (800cdac <prvAddCurrentTaskToDelayedList+0xb8>)
 800cd2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd34:	d10a      	bne.n	800cd4c <prvAddCurrentTaskToDelayedList+0x58>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d007      	beq.n	800cd4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd3c:	4b1a      	ldr	r3, [pc, #104]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4619      	mov	r1, r3
 800cd44:	481a      	ldr	r0, [pc, #104]	; (800cdb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cd46:	f7ff fa68 	bl	800c21a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd4a:	e026      	b.n	800cd9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd54:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d209      	bcs.n	800cd78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd64:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4610      	mov	r0, r2
 800cd72:	f7ff fa76 	bl	800c262 <vListInsert>
}
 800cd76:	e010      	b.n	800cd9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd78:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f7ff fa6c 	bl	800c262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd8a:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d202      	bcs.n	800cd9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cd94:	4a09      	ldr	r2, [pc, #36]	; (800cdbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	6013      	str	r3, [r2, #0]
}
 800cd9a:	bf00      	nop
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2000081c 	.word	0x2000081c
 800cda8:	20000718 	.word	0x20000718
 800cdac:	20000820 	.word	0x20000820
 800cdb0:	20000804 	.word	0x20000804
 800cdb4:	200007d4 	.word	0x200007d4
 800cdb8:	200007d0 	.word	0x200007d0
 800cdbc:	20000838 	.word	0x20000838

0800cdc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3b04      	subs	r3, #4
 800cdd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cdd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3b04      	subs	r3, #4
 800cdde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f023 0201 	bic.w	r2, r3, #1
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3b04      	subs	r3, #4
 800cdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdf0:	4a0c      	ldr	r2, [pc, #48]	; (800ce24 <pxPortInitialiseStack+0x64>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3b14      	subs	r3, #20
 800cdfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	3b04      	subs	r3, #4
 800ce06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f06f 0202 	mvn.w	r2, #2
 800ce0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3b20      	subs	r3, #32
 800ce14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ce16:	68fb      	ldr	r3, [r7, #12]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	0800ce29 	.word	0x0800ce29

0800ce28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce32:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <prvTaskExitError+0x54>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d00a      	beq.n	800ce52 <prvTaskExitError+0x2a>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	60fb      	str	r3, [r7, #12]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <prvTaskExitError+0x28>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	60bb      	str	r3, [r7, #8]
}
 800ce64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce66:	bf00      	nop
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0fc      	beq.n	800ce68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce6e:	bf00      	nop
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	20000258 	.word	0x20000258

0800ce80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <pxCurrentTCBConst2>)
 800ce82:	6819      	ldr	r1, [r3, #0]
 800ce84:	6808      	ldr	r0, [r1, #0]
 800ce86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8a:	f380 8809 	msr	PSP, r0
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f04f 0000 	mov.w	r0, #0
 800ce96:	f380 8811 	msr	BASEPRI, r0
 800ce9a:	4770      	bx	lr
 800ce9c:	f3af 8000 	nop.w

0800cea0 <pxCurrentTCBConst2>:
 800cea0:	20000718 	.word	0x20000718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop

0800cea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cea8:	4808      	ldr	r0, [pc, #32]	; (800cecc <prvPortStartFirstTask+0x24>)
 800ceaa:	6800      	ldr	r0, [r0, #0]
 800ceac:	6800      	ldr	r0, [r0, #0]
 800ceae:	f380 8808 	msr	MSP, r0
 800ceb2:	f04f 0000 	mov.w	r0, #0
 800ceb6:	f380 8814 	msr	CONTROL, r0
 800ceba:	b662      	cpsie	i
 800cebc:	b661      	cpsie	f
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	df00      	svc	0
 800cec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceca:	bf00      	nop
 800cecc:	e000ed08 	.word	0xe000ed08

0800ced0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ced6:	4b46      	ldr	r3, [pc, #280]	; (800cff0 <xPortStartScheduler+0x120>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a46      	ldr	r2, [pc, #280]	; (800cff4 <xPortStartScheduler+0x124>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d10a      	bne.n	800cef6 <xPortStartScheduler+0x26>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	613b      	str	r3, [r7, #16]
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cef6:	4b3e      	ldr	r3, [pc, #248]	; (800cff0 <xPortStartScheduler+0x120>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a3f      	ldr	r2, [pc, #252]	; (800cff8 <xPortStartScheduler+0x128>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d10a      	bne.n	800cf16 <xPortStartScheduler+0x46>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	60fb      	str	r3, [r7, #12]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf16:	4b39      	ldr	r3, [pc, #228]	; (800cffc <xPortStartScheduler+0x12c>)
 800cf18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	22ff      	movs	r2, #255	; 0xff
 800cf26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	4b31      	ldr	r3, [pc, #196]	; (800d000 <xPortStartScheduler+0x130>)
 800cf3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf3e:	4b31      	ldr	r3, [pc, #196]	; (800d004 <xPortStartScheduler+0x134>)
 800cf40:	2207      	movs	r2, #7
 800cf42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf44:	e009      	b.n	800cf5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cf46:	4b2f      	ldr	r3, [pc, #188]	; (800d004 <xPortStartScheduler+0x134>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	4a2d      	ldr	r2, [pc, #180]	; (800d004 <xPortStartScheduler+0x134>)
 800cf4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf5a:	78fb      	ldrb	r3, [r7, #3]
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf62:	2b80      	cmp	r3, #128	; 0x80
 800cf64:	d0ef      	beq.n	800cf46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf66:	4b27      	ldr	r3, [pc, #156]	; (800d004 <xPortStartScheduler+0x134>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f1c3 0307 	rsb	r3, r3, #7
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d00a      	beq.n	800cf88 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	60bb      	str	r3, [r7, #8]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf88:	4b1e      	ldr	r3, [pc, #120]	; (800d004 <xPortStartScheduler+0x134>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	021b      	lsls	r3, r3, #8
 800cf8e:	4a1d      	ldr	r2, [pc, #116]	; (800d004 <xPortStartScheduler+0x134>)
 800cf90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf92:	4b1c      	ldr	r3, [pc, #112]	; (800d004 <xPortStartScheduler+0x134>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf9a:	4a1a      	ldr	r2, [pc, #104]	; (800d004 <xPortStartScheduler+0x134>)
 800cf9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cfa6:	4b18      	ldr	r3, [pc, #96]	; (800d008 <xPortStartScheduler+0x138>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <xPortStartScheduler+0x138>)
 800cfac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cfb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <xPortStartScheduler+0x138>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a14      	ldr	r2, [pc, #80]	; (800d008 <xPortStartScheduler+0x138>)
 800cfb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cfbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cfbe:	f000 f8dd 	bl	800d17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cfc2:	4b12      	ldr	r3, [pc, #72]	; (800d00c <xPortStartScheduler+0x13c>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cfc8:	f000 f8fc 	bl	800d1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cfcc:	4b10      	ldr	r3, [pc, #64]	; (800d010 <xPortStartScheduler+0x140>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a0f      	ldr	r2, [pc, #60]	; (800d010 <xPortStartScheduler+0x140>)
 800cfd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cfd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cfd8:	f7ff ff66 	bl	800cea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cfdc:	f7ff fd4e 	bl	800ca7c <vTaskSwitchContext>
	prvTaskExitError();
 800cfe0:	f7ff ff22 	bl	800ce28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	e000ed00 	.word	0xe000ed00
 800cff4:	410fc271 	.word	0x410fc271
 800cff8:	410fc270 	.word	0x410fc270
 800cffc:	e000e400 	.word	0xe000e400
 800d000:	20000844 	.word	0x20000844
 800d004:	20000848 	.word	0x20000848
 800d008:	e000ed20 	.word	0xe000ed20
 800d00c:	20000258 	.word	0x20000258
 800d010:	e000ef34 	.word	0xe000ef34

0800d014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	607b      	str	r3, [r7, #4]
}
 800d02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <vPortEnterCritical+0x58>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3301      	adds	r3, #1
 800d034:	4a0d      	ldr	r2, [pc, #52]	; (800d06c <vPortEnterCritical+0x58>)
 800d036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <vPortEnterCritical+0x58>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d10f      	bne.n	800d060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d040:	4b0b      	ldr	r3, [pc, #44]	; (800d070 <vPortEnterCritical+0x5c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <vPortEnterCritical+0x4c>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	603b      	str	r3, [r7, #0]
}
 800d05c:	bf00      	nop
 800d05e:	e7fe      	b.n	800d05e <vPortEnterCritical+0x4a>
	}
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	20000258 	.word	0x20000258
 800d070:	e000ed04 	.word	0xe000ed04

0800d074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d07a:	4b12      	ldr	r3, [pc, #72]	; (800d0c4 <vPortExitCritical+0x50>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10a      	bne.n	800d098 <vPortExitCritical+0x24>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	607b      	str	r3, [r7, #4]
}
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d098:	4b0a      	ldr	r3, [pc, #40]	; (800d0c4 <vPortExitCritical+0x50>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	4a09      	ldr	r2, [pc, #36]	; (800d0c4 <vPortExitCritical+0x50>)
 800d0a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d0a2:	4b08      	ldr	r3, [pc, #32]	; (800d0c4 <vPortExitCritical+0x50>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <vPortExitCritical+0x42>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d0b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d0b6:	bf00      	nop
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20000258 	.word	0x20000258
	...

0800d0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d0d0:	f3ef 8009 	mrs	r0, PSP
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	4b15      	ldr	r3, [pc, #84]	; (800d130 <pxCurrentTCBConst>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	f01e 0f10 	tst.w	lr, #16
 800d0e0:	bf08      	it	eq
 800d0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ea:	6010      	str	r0, [r2, #0]
 800d0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d0f4:	f380 8811 	msr	BASEPRI, r0
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f7ff fcbc 	bl	800ca7c <vTaskSwitchContext>
 800d104:	f04f 0000 	mov.w	r0, #0
 800d108:	f380 8811 	msr	BASEPRI, r0
 800d10c:	bc09      	pop	{r0, r3}
 800d10e:	6819      	ldr	r1, [r3, #0]
 800d110:	6808      	ldr	r0, [r1, #0]
 800d112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d116:	f01e 0f10 	tst.w	lr, #16
 800d11a:	bf08      	it	eq
 800d11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d120:	f380 8809 	msr	PSP, r0
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst>:
 800d130:	20000718 	.word	0x20000718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	607b      	str	r3, [r7, #4]
}
 800d150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d152:	f7ff fbdb 	bl	800c90c <xTaskIncrementTick>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d15c:	4b06      	ldr	r3, [pc, #24]	; (800d178 <SysTick_Handler+0x40>)
 800d15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	2300      	movs	r3, #0
 800d166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f383 8811 	msr	BASEPRI, r3
}
 800d16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	e000ed04 	.word	0xe000ed04

0800d17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d180:	4b0b      	ldr	r3, [pc, #44]	; (800d1b0 <vPortSetupTimerInterrupt+0x34>)
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d186:	4b0b      	ldr	r3, [pc, #44]	; (800d1b4 <vPortSetupTimerInterrupt+0x38>)
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <vPortSetupTimerInterrupt+0x3c>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a0a      	ldr	r2, [pc, #40]	; (800d1bc <vPortSetupTimerInterrupt+0x40>)
 800d192:	fba2 2303 	umull	r2, r3, r2, r3
 800d196:	099b      	lsrs	r3, r3, #6
 800d198:	4a09      	ldr	r2, [pc, #36]	; (800d1c0 <vPortSetupTimerInterrupt+0x44>)
 800d19a:	3b01      	subs	r3, #1
 800d19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d19e:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <vPortSetupTimerInterrupt+0x34>)
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	601a      	str	r2, [r3, #0]
}
 800d1a4:	bf00      	nop
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	e000e010 	.word	0xe000e010
 800d1b4:	e000e018 	.word	0xe000e018
 800d1b8:	2000024c 	.word	0x2000024c
 800d1bc:	10624dd3 	.word	0x10624dd3
 800d1c0:	e000e014 	.word	0xe000e014

0800d1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d1d4 <vPortEnableVFP+0x10>
 800d1c8:	6801      	ldr	r1, [r0, #0]
 800d1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d1ce:	6001      	str	r1, [r0, #0]
 800d1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d1d2:	bf00      	nop
 800d1d4:	e000ed88 	.word	0xe000ed88

0800d1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	; 0x28
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1e4:	f7ff fae8 	bl	800c7b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1e8:	4b5b      	ldr	r3, [pc, #364]	; (800d358 <pvPortMalloc+0x180>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d1f0:	f000 f920 	bl	800d434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d1f4:	4b59      	ldr	r3, [pc, #356]	; (800d35c <pvPortMalloc+0x184>)
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 8093 	bne.w	800d328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d01d      	beq.n	800d244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d208:	2208      	movs	r2, #8
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4413      	add	r3, r2
 800d20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b00      	cmp	r3, #0
 800d218:	d014      	beq.n	800d244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f023 0307 	bic.w	r3, r3, #7
 800d220:	3308      	adds	r3, #8
 800d222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f003 0307 	and.w	r3, r3, #7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <pvPortMalloc+0x6c>
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	617b      	str	r3, [r7, #20]
}
 800d240:	bf00      	nop
 800d242:	e7fe      	b.n	800d242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d06e      	beq.n	800d328 <pvPortMalloc+0x150>
 800d24a:	4b45      	ldr	r3, [pc, #276]	; (800d360 <pvPortMalloc+0x188>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d869      	bhi.n	800d328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d254:	4b43      	ldr	r3, [pc, #268]	; (800d364 <pvPortMalloc+0x18c>)
 800d256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d258:	4b42      	ldr	r3, [pc, #264]	; (800d364 <pvPortMalloc+0x18c>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d25e:	e004      	b.n	800d26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d903      	bls.n	800d27c <pvPortMalloc+0xa4>
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1f1      	bne.n	800d260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d27c:	4b36      	ldr	r3, [pc, #216]	; (800d358 <pvPortMalloc+0x180>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d282:	429a      	cmp	r2, r3
 800d284:	d050      	beq.n	800d328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2208      	movs	r2, #8
 800d28c:	4413      	add	r3, r2
 800d28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d91f      	bls.n	800d2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	f003 0307 	and.w	r3, r3, #7
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00a      	beq.n	800d2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	613b      	str	r3, [r7, #16]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	1ad2      	subs	r2, r2, r3
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2e2:	69b8      	ldr	r0, [r7, #24]
 800d2e4:	f000 f908 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <pvPortMalloc+0x188>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	4a1b      	ldr	r2, [pc, #108]	; (800d360 <pvPortMalloc+0x188>)
 800d2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d2f6:	4b1a      	ldr	r3, [pc, #104]	; (800d360 <pvPortMalloc+0x188>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	4b1b      	ldr	r3, [pc, #108]	; (800d368 <pvPortMalloc+0x190>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d203      	bcs.n	800d30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d302:	4b17      	ldr	r3, [pc, #92]	; (800d360 <pvPortMalloc+0x188>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a18      	ldr	r2, [pc, #96]	; (800d368 <pvPortMalloc+0x190>)
 800d308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <pvPortMalloc+0x184>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	431a      	orrs	r2, r3
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <pvPortMalloc+0x194>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	4a11      	ldr	r2, [pc, #68]	; (800d36c <pvPortMalloc+0x194>)
 800d326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d328:	f7ff fa54 	bl	800c7d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <pvPortMalloc+0x174>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	60fb      	str	r3, [r7, #12]
}
 800d348:	bf00      	nop
 800d34a:	e7fe      	b.n	800d34a <pvPortMalloc+0x172>
	return pvReturn;
 800d34c:	69fb      	ldr	r3, [r7, #28]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3728      	adds	r7, #40	; 0x28
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	2000140c 	.word	0x2000140c
 800d35c:	20001420 	.word	0x20001420
 800d360:	20001410 	.word	0x20001410
 800d364:	20001404 	.word	0x20001404
 800d368:	20001414 	.word	0x20001414
 800d36c:	20001418 	.word	0x20001418

0800d370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d04d      	beq.n	800d41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d382:	2308      	movs	r3, #8
 800d384:	425b      	negs	r3, r3
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	4413      	add	r3, r2
 800d38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	4b24      	ldr	r3, [pc, #144]	; (800d428 <vPortFree+0xb8>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4013      	ands	r3, r2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10a      	bne.n	800d3b4 <vPortFree+0x44>
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	60fb      	str	r3, [r7, #12]
}
 800d3b0:	bf00      	nop
 800d3b2:	e7fe      	b.n	800d3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00a      	beq.n	800d3d2 <vPortFree+0x62>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	60bb      	str	r3, [r7, #8]
}
 800d3ce:	bf00      	nop
 800d3d0:	e7fe      	b.n	800d3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <vPortFree+0xb8>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4013      	ands	r3, r2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01e      	beq.n	800d41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d11a      	bne.n	800d41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <vPortFree+0xb8>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	43db      	mvns	r3, r3
 800d3f2:	401a      	ands	r2, r3
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d3f8:	f7ff f9de 	bl	800c7b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vPortFree+0xbc>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4413      	add	r3, r2
 800d406:	4a09      	ldr	r2, [pc, #36]	; (800d42c <vPortFree+0xbc>)
 800d408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f000 f874 	bl	800d4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d410:	4b07      	ldr	r3, [pc, #28]	; (800d430 <vPortFree+0xc0>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3301      	adds	r3, #1
 800d416:	4a06      	ldr	r2, [pc, #24]	; (800d430 <vPortFree+0xc0>)
 800d418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d41a:	f7ff f9db 	bl	800c7d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d41e:	bf00      	nop
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20001420 	.word	0x20001420
 800d42c:	20001410 	.word	0x20001410
 800d430:	2000141c 	.word	0x2000141c

0800d434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d43a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d440:	4b27      	ldr	r3, [pc, #156]	; (800d4e0 <prvHeapInit+0xac>)
 800d442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 0307 	and.w	r3, r3, #7
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00c      	beq.n	800d468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3307      	adds	r3, #7
 800d452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f023 0307 	bic.w	r3, r3, #7
 800d45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	4a1f      	ldr	r2, [pc, #124]	; (800d4e0 <prvHeapInit+0xac>)
 800d464:	4413      	add	r3, r2
 800d466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d46c:	4a1d      	ldr	r2, [pc, #116]	; (800d4e4 <prvHeapInit+0xb0>)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d472:	4b1c      	ldr	r3, [pc, #112]	; (800d4e4 <prvHeapInit+0xb0>)
 800d474:	2200      	movs	r2, #0
 800d476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	4413      	add	r3, r2
 800d47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d480:	2208      	movs	r2, #8
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	1a9b      	subs	r3, r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f023 0307 	bic.w	r3, r3, #7
 800d48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <prvHeapInit+0xb4>)
 800d494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <prvHeapInit+0xb4>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d49e:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	1ad2      	subs	r2, r2, r3
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <prvHeapInit+0xb4>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <prvHeapInit+0xb8>)
 800d4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <prvHeapInit+0xbc>)
 800d4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4cc:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <prvHeapInit+0xc0>)
 800d4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	2000084c 	.word	0x2000084c
 800d4e4:	20001404 	.word	0x20001404
 800d4e8:	2000140c 	.word	0x2000140c
 800d4ec:	20001414 	.word	0x20001414
 800d4f0:	20001410 	.word	0x20001410
 800d4f4:	20001420 	.word	0x20001420

0800d4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d500:	4b28      	ldr	r3, [pc, #160]	; (800d5a4 <prvInsertBlockIntoFreeList+0xac>)
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e002      	b.n	800d50c <prvInsertBlockIntoFreeList+0x14>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	d8f7      	bhi.n	800d506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	4413      	add	r3, r2
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d108      	bne.n	800d53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	441a      	add	r2, r3
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	441a      	add	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d118      	bne.n	800d580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d00d      	beq.n	800d576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	441a      	add	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	e008      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d576:	4b0c      	ldr	r3, [pc, #48]	; (800d5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e003      	b.n	800d588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d002      	beq.n	800d596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d596:	bf00      	nop
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	20001404 	.word	0x20001404
 800d5a8:	2000140c 	.word	0x2000140c

0800d5ac <calloc>:
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <calloc+0xc>)
 800d5ae:	460a      	mov	r2, r1
 800d5b0:	4601      	mov	r1, r0
 800d5b2:	6818      	ldr	r0, [r3, #0]
 800d5b4:	f000 b802 	b.w	800d5bc <_calloc_r>
 800d5b8:	200002b4 	.word	0x200002b4

0800d5bc <_calloc_r>:
 800d5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5be:	fba1 2402 	umull	r2, r4, r1, r2
 800d5c2:	b94c      	cbnz	r4, 800d5d8 <_calloc_r+0x1c>
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	9201      	str	r2, [sp, #4]
 800d5c8:	f000 f836 	bl	800d638 <_malloc_r>
 800d5cc:	9a01      	ldr	r2, [sp, #4]
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b930      	cbnz	r0, 800d5e0 <_calloc_r+0x24>
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	b003      	add	sp, #12
 800d5d6:	bd30      	pop	{r4, r5, pc}
 800d5d8:	220c      	movs	r2, #12
 800d5da:	6002      	str	r2, [r0, #0]
 800d5dc:	2500      	movs	r5, #0
 800d5de:	e7f8      	b.n	800d5d2 <_calloc_r+0x16>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	f000 fb99 	bl	800dd18 <memset>
 800d5e6:	e7f4      	b.n	800d5d2 <_calloc_r+0x16>

0800d5e8 <free>:
 800d5e8:	4b02      	ldr	r3, [pc, #8]	; (800d5f4 <free+0xc>)
 800d5ea:	4601      	mov	r1, r0
 800d5ec:	6818      	ldr	r0, [r3, #0]
 800d5ee:	f000 bc83 	b.w	800def8 <_free_r>
 800d5f2:	bf00      	nop
 800d5f4:	200002b4 	.word	0x200002b4

0800d5f8 <sbrk_aligned>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	4e0e      	ldr	r6, [pc, #56]	; (800d634 <sbrk_aligned+0x3c>)
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	6831      	ldr	r1, [r6, #0]
 800d600:	4605      	mov	r5, r0
 800d602:	b911      	cbnz	r1, 800d60a <sbrk_aligned+0x12>
 800d604:	f000 fc1a 	bl	800de3c <_sbrk_r>
 800d608:	6030      	str	r0, [r6, #0]
 800d60a:	4621      	mov	r1, r4
 800d60c:	4628      	mov	r0, r5
 800d60e:	f000 fc15 	bl	800de3c <_sbrk_r>
 800d612:	1c43      	adds	r3, r0, #1
 800d614:	d00a      	beq.n	800d62c <sbrk_aligned+0x34>
 800d616:	1cc4      	adds	r4, r0, #3
 800d618:	f024 0403 	bic.w	r4, r4, #3
 800d61c:	42a0      	cmp	r0, r4
 800d61e:	d007      	beq.n	800d630 <sbrk_aligned+0x38>
 800d620:	1a21      	subs	r1, r4, r0
 800d622:	4628      	mov	r0, r5
 800d624:	f000 fc0a 	bl	800de3c <_sbrk_r>
 800d628:	3001      	adds	r0, #1
 800d62a:	d101      	bne.n	800d630 <sbrk_aligned+0x38>
 800d62c:	f04f 34ff 	mov.w	r4, #4294967295
 800d630:	4620      	mov	r0, r4
 800d632:	bd70      	pop	{r4, r5, r6, pc}
 800d634:	20001428 	.word	0x20001428

0800d638 <_malloc_r>:
 800d638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d63c:	1ccd      	adds	r5, r1, #3
 800d63e:	f025 0503 	bic.w	r5, r5, #3
 800d642:	3508      	adds	r5, #8
 800d644:	2d0c      	cmp	r5, #12
 800d646:	bf38      	it	cc
 800d648:	250c      	movcc	r5, #12
 800d64a:	2d00      	cmp	r5, #0
 800d64c:	4607      	mov	r7, r0
 800d64e:	db01      	blt.n	800d654 <_malloc_r+0x1c>
 800d650:	42a9      	cmp	r1, r5
 800d652:	d905      	bls.n	800d660 <_malloc_r+0x28>
 800d654:	230c      	movs	r3, #12
 800d656:	603b      	str	r3, [r7, #0]
 800d658:	2600      	movs	r6, #0
 800d65a:	4630      	mov	r0, r6
 800d65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d734 <_malloc_r+0xfc>
 800d664:	f000 f868 	bl	800d738 <__malloc_lock>
 800d668:	f8d8 3000 	ldr.w	r3, [r8]
 800d66c:	461c      	mov	r4, r3
 800d66e:	bb5c      	cbnz	r4, 800d6c8 <_malloc_r+0x90>
 800d670:	4629      	mov	r1, r5
 800d672:	4638      	mov	r0, r7
 800d674:	f7ff ffc0 	bl	800d5f8 <sbrk_aligned>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	4604      	mov	r4, r0
 800d67c:	d155      	bne.n	800d72a <_malloc_r+0xf2>
 800d67e:	f8d8 4000 	ldr.w	r4, [r8]
 800d682:	4626      	mov	r6, r4
 800d684:	2e00      	cmp	r6, #0
 800d686:	d145      	bne.n	800d714 <_malloc_r+0xdc>
 800d688:	2c00      	cmp	r4, #0
 800d68a:	d048      	beq.n	800d71e <_malloc_r+0xe6>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	4631      	mov	r1, r6
 800d690:	4638      	mov	r0, r7
 800d692:	eb04 0903 	add.w	r9, r4, r3
 800d696:	f000 fbd1 	bl	800de3c <_sbrk_r>
 800d69a:	4581      	cmp	r9, r0
 800d69c:	d13f      	bne.n	800d71e <_malloc_r+0xe6>
 800d69e:	6821      	ldr	r1, [r4, #0]
 800d6a0:	1a6d      	subs	r5, r5, r1
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	4638      	mov	r0, r7
 800d6a6:	f7ff ffa7 	bl	800d5f8 <sbrk_aligned>
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	d037      	beq.n	800d71e <_malloc_r+0xe6>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	442b      	add	r3, r5
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d038      	beq.n	800d72e <_malloc_r+0xf6>
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	42a2      	cmp	r2, r4
 800d6c0:	d12b      	bne.n	800d71a <_malloc_r+0xe2>
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	605a      	str	r2, [r3, #4]
 800d6c6:	e00f      	b.n	800d6e8 <_malloc_r+0xb0>
 800d6c8:	6822      	ldr	r2, [r4, #0]
 800d6ca:	1b52      	subs	r2, r2, r5
 800d6cc:	d41f      	bmi.n	800d70e <_malloc_r+0xd6>
 800d6ce:	2a0b      	cmp	r2, #11
 800d6d0:	d917      	bls.n	800d702 <_malloc_r+0xca>
 800d6d2:	1961      	adds	r1, r4, r5
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	6025      	str	r5, [r4, #0]
 800d6d8:	bf18      	it	ne
 800d6da:	6059      	strne	r1, [r3, #4]
 800d6dc:	6863      	ldr	r3, [r4, #4]
 800d6de:	bf08      	it	eq
 800d6e0:	f8c8 1000 	streq.w	r1, [r8]
 800d6e4:	5162      	str	r2, [r4, r5]
 800d6e6:	604b      	str	r3, [r1, #4]
 800d6e8:	4638      	mov	r0, r7
 800d6ea:	f104 060b 	add.w	r6, r4, #11
 800d6ee:	f000 f829 	bl	800d744 <__malloc_unlock>
 800d6f2:	f026 0607 	bic.w	r6, r6, #7
 800d6f6:	1d23      	adds	r3, r4, #4
 800d6f8:	1af2      	subs	r2, r6, r3
 800d6fa:	d0ae      	beq.n	800d65a <_malloc_r+0x22>
 800d6fc:	1b9b      	subs	r3, r3, r6
 800d6fe:	50a3      	str	r3, [r4, r2]
 800d700:	e7ab      	b.n	800d65a <_malloc_r+0x22>
 800d702:	42a3      	cmp	r3, r4
 800d704:	6862      	ldr	r2, [r4, #4]
 800d706:	d1dd      	bne.n	800d6c4 <_malloc_r+0x8c>
 800d708:	f8c8 2000 	str.w	r2, [r8]
 800d70c:	e7ec      	b.n	800d6e8 <_malloc_r+0xb0>
 800d70e:	4623      	mov	r3, r4
 800d710:	6864      	ldr	r4, [r4, #4]
 800d712:	e7ac      	b.n	800d66e <_malloc_r+0x36>
 800d714:	4634      	mov	r4, r6
 800d716:	6876      	ldr	r6, [r6, #4]
 800d718:	e7b4      	b.n	800d684 <_malloc_r+0x4c>
 800d71a:	4613      	mov	r3, r2
 800d71c:	e7cc      	b.n	800d6b8 <_malloc_r+0x80>
 800d71e:	230c      	movs	r3, #12
 800d720:	603b      	str	r3, [r7, #0]
 800d722:	4638      	mov	r0, r7
 800d724:	f000 f80e 	bl	800d744 <__malloc_unlock>
 800d728:	e797      	b.n	800d65a <_malloc_r+0x22>
 800d72a:	6025      	str	r5, [r4, #0]
 800d72c:	e7dc      	b.n	800d6e8 <_malloc_r+0xb0>
 800d72e:	605b      	str	r3, [r3, #4]
 800d730:	deff      	udf	#255	; 0xff
 800d732:	bf00      	nop
 800d734:	20001424 	.word	0x20001424

0800d738 <__malloc_lock>:
 800d738:	4801      	ldr	r0, [pc, #4]	; (800d740 <__malloc_lock+0x8>)
 800d73a:	f000 bbcc 	b.w	800ded6 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	2000156c 	.word	0x2000156c

0800d744 <__malloc_unlock>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__malloc_unlock+0x8>)
 800d746:	f000 bbc7 	b.w	800ded8 <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	2000156c 	.word	0x2000156c

0800d750 <__sflush_r>:
 800d750:	898a      	ldrh	r2, [r1, #12]
 800d752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d756:	4605      	mov	r5, r0
 800d758:	0710      	lsls	r0, r2, #28
 800d75a:	460c      	mov	r4, r1
 800d75c:	d458      	bmi.n	800d810 <__sflush_r+0xc0>
 800d75e:	684b      	ldr	r3, [r1, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	dc05      	bgt.n	800d770 <__sflush_r+0x20>
 800d764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d766:	2b00      	cmp	r3, #0
 800d768:	dc02      	bgt.n	800d770 <__sflush_r+0x20>
 800d76a:	2000      	movs	r0, #0
 800d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d772:	2e00      	cmp	r6, #0
 800d774:	d0f9      	beq.n	800d76a <__sflush_r+0x1a>
 800d776:	2300      	movs	r3, #0
 800d778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d77c:	682f      	ldr	r7, [r5, #0]
 800d77e:	6a21      	ldr	r1, [r4, #32]
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	d032      	beq.n	800d7ea <__sflush_r+0x9a>
 800d784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	075a      	lsls	r2, r3, #29
 800d78a:	d505      	bpl.n	800d798 <__sflush_r+0x48>
 800d78c:	6863      	ldr	r3, [r4, #4]
 800d78e:	1ac0      	subs	r0, r0, r3
 800d790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d792:	b10b      	cbz	r3, 800d798 <__sflush_r+0x48>
 800d794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d796:	1ac0      	subs	r0, r0, r3
 800d798:	2300      	movs	r3, #0
 800d79a:	4602      	mov	r2, r0
 800d79c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d79e:	6a21      	ldr	r1, [r4, #32]
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b0      	blx	r6
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	d106      	bne.n	800d7b8 <__sflush_r+0x68>
 800d7aa:	6829      	ldr	r1, [r5, #0]
 800d7ac:	291d      	cmp	r1, #29
 800d7ae:	d82b      	bhi.n	800d808 <__sflush_r+0xb8>
 800d7b0:	4a29      	ldr	r2, [pc, #164]	; (800d858 <__sflush_r+0x108>)
 800d7b2:	410a      	asrs	r2, r1
 800d7b4:	07d6      	lsls	r6, r2, #31
 800d7b6:	d427      	bmi.n	800d808 <__sflush_r+0xb8>
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	6062      	str	r2, [r4, #4]
 800d7bc:	04d9      	lsls	r1, r3, #19
 800d7be:	6922      	ldr	r2, [r4, #16]
 800d7c0:	6022      	str	r2, [r4, #0]
 800d7c2:	d504      	bpl.n	800d7ce <__sflush_r+0x7e>
 800d7c4:	1c42      	adds	r2, r0, #1
 800d7c6:	d101      	bne.n	800d7cc <__sflush_r+0x7c>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	b903      	cbnz	r3, 800d7ce <__sflush_r+0x7e>
 800d7cc:	6560      	str	r0, [r4, #84]	; 0x54
 800d7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7d0:	602f      	str	r7, [r5, #0]
 800d7d2:	2900      	cmp	r1, #0
 800d7d4:	d0c9      	beq.n	800d76a <__sflush_r+0x1a>
 800d7d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7da:	4299      	cmp	r1, r3
 800d7dc:	d002      	beq.n	800d7e4 <__sflush_r+0x94>
 800d7de:	4628      	mov	r0, r5
 800d7e0:	f000 fb8a 	bl	800def8 <_free_r>
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	6360      	str	r0, [r4, #52]	; 0x34
 800d7e8:	e7c0      	b.n	800d76c <__sflush_r+0x1c>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b0      	blx	r6
 800d7f0:	1c41      	adds	r1, r0, #1
 800d7f2:	d1c8      	bne.n	800d786 <__sflush_r+0x36>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0c5      	beq.n	800d786 <__sflush_r+0x36>
 800d7fa:	2b1d      	cmp	r3, #29
 800d7fc:	d001      	beq.n	800d802 <__sflush_r+0xb2>
 800d7fe:	2b16      	cmp	r3, #22
 800d800:	d101      	bne.n	800d806 <__sflush_r+0xb6>
 800d802:	602f      	str	r7, [r5, #0]
 800d804:	e7b1      	b.n	800d76a <__sflush_r+0x1a>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d80c:	81a3      	strh	r3, [r4, #12]
 800d80e:	e7ad      	b.n	800d76c <__sflush_r+0x1c>
 800d810:	690f      	ldr	r7, [r1, #16]
 800d812:	2f00      	cmp	r7, #0
 800d814:	d0a9      	beq.n	800d76a <__sflush_r+0x1a>
 800d816:	0793      	lsls	r3, r2, #30
 800d818:	680e      	ldr	r6, [r1, #0]
 800d81a:	bf08      	it	eq
 800d81c:	694b      	ldreq	r3, [r1, #20]
 800d81e:	600f      	str	r7, [r1, #0]
 800d820:	bf18      	it	ne
 800d822:	2300      	movne	r3, #0
 800d824:	eba6 0807 	sub.w	r8, r6, r7
 800d828:	608b      	str	r3, [r1, #8]
 800d82a:	f1b8 0f00 	cmp.w	r8, #0
 800d82e:	dd9c      	ble.n	800d76a <__sflush_r+0x1a>
 800d830:	6a21      	ldr	r1, [r4, #32]
 800d832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d834:	4643      	mov	r3, r8
 800d836:	463a      	mov	r2, r7
 800d838:	4628      	mov	r0, r5
 800d83a:	47b0      	blx	r6
 800d83c:	2800      	cmp	r0, #0
 800d83e:	dc06      	bgt.n	800d84e <__sflush_r+0xfe>
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d846:	81a3      	strh	r3, [r4, #12]
 800d848:	f04f 30ff 	mov.w	r0, #4294967295
 800d84c:	e78e      	b.n	800d76c <__sflush_r+0x1c>
 800d84e:	4407      	add	r7, r0
 800d850:	eba8 0800 	sub.w	r8, r8, r0
 800d854:	e7e9      	b.n	800d82a <__sflush_r+0xda>
 800d856:	bf00      	nop
 800d858:	dfbffffe 	.word	0xdfbffffe

0800d85c <_fflush_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	690b      	ldr	r3, [r1, #16]
 800d860:	4605      	mov	r5, r0
 800d862:	460c      	mov	r4, r1
 800d864:	b913      	cbnz	r3, 800d86c <_fflush_r+0x10>
 800d866:	2500      	movs	r5, #0
 800d868:	4628      	mov	r0, r5
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	b118      	cbz	r0, 800d876 <_fflush_r+0x1a>
 800d86e:	6a03      	ldr	r3, [r0, #32]
 800d870:	b90b      	cbnz	r3, 800d876 <_fflush_r+0x1a>
 800d872:	f000 f8bb 	bl	800d9ec <__sinit>
 800d876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0f3      	beq.n	800d866 <_fflush_r+0xa>
 800d87e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d880:	07d0      	lsls	r0, r2, #31
 800d882:	d404      	bmi.n	800d88e <_fflush_r+0x32>
 800d884:	0599      	lsls	r1, r3, #22
 800d886:	d402      	bmi.n	800d88e <_fflush_r+0x32>
 800d888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d88a:	f000 fb24 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800d88e:	4628      	mov	r0, r5
 800d890:	4621      	mov	r1, r4
 800d892:	f7ff ff5d 	bl	800d750 <__sflush_r>
 800d896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d898:	07da      	lsls	r2, r3, #31
 800d89a:	4605      	mov	r5, r0
 800d89c:	d4e4      	bmi.n	800d868 <_fflush_r+0xc>
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	059b      	lsls	r3, r3, #22
 800d8a2:	d4e1      	bmi.n	800d868 <_fflush_r+0xc>
 800d8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8a6:	f000 fb17 	bl	800ded8 <__retarget_lock_release_recursive>
 800d8aa:	e7dd      	b.n	800d868 <_fflush_r+0xc>

0800d8ac <fflush>:
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	b920      	cbnz	r0, 800d8ba <fflush+0xe>
 800d8b0:	4a04      	ldr	r2, [pc, #16]	; (800d8c4 <fflush+0x18>)
 800d8b2:	4905      	ldr	r1, [pc, #20]	; (800d8c8 <fflush+0x1c>)
 800d8b4:	4805      	ldr	r0, [pc, #20]	; (800d8cc <fflush+0x20>)
 800d8b6:	f000 b8b1 	b.w	800da1c <_fwalk_sglue>
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <fflush+0x24>)
 800d8bc:	6818      	ldr	r0, [r3, #0]
 800d8be:	f7ff bfcd 	b.w	800d85c <_fflush_r>
 800d8c2:	bf00      	nop
 800d8c4:	2000025c 	.word	0x2000025c
 800d8c8:	0800d85d 	.word	0x0800d85d
 800d8cc:	20000268 	.word	0x20000268
 800d8d0:	200002b4 	.word	0x200002b4

0800d8d4 <std>:
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	4604      	mov	r4, r0
 800d8da:	e9c0 3300 	strd	r3, r3, [r0]
 800d8de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8e2:	6083      	str	r3, [r0, #8]
 800d8e4:	8181      	strh	r1, [r0, #12]
 800d8e6:	6643      	str	r3, [r0, #100]	; 0x64
 800d8e8:	81c2      	strh	r2, [r0, #14]
 800d8ea:	6183      	str	r3, [r0, #24]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	2208      	movs	r2, #8
 800d8f0:	305c      	adds	r0, #92	; 0x5c
 800d8f2:	f000 fa11 	bl	800dd18 <memset>
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <std+0x58>)
 800d8f8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	; (800d930 <std+0x5c>)
 800d8fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <std+0x60>)
 800d900:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d902:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <std+0x64>)
 800d904:	6323      	str	r3, [r4, #48]	; 0x30
 800d906:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <std+0x68>)
 800d908:	6224      	str	r4, [r4, #32]
 800d90a:	429c      	cmp	r4, r3
 800d90c:	d006      	beq.n	800d91c <std+0x48>
 800d90e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d912:	4294      	cmp	r4, r2
 800d914:	d002      	beq.n	800d91c <std+0x48>
 800d916:	33d0      	adds	r3, #208	; 0xd0
 800d918:	429c      	cmp	r4, r3
 800d91a:	d105      	bne.n	800d928 <std+0x54>
 800d91c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d924:	f000 bad6 	b.w	800ded4 <__retarget_lock_init_recursive>
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	bf00      	nop
 800d92c:	0800db35 	.word	0x0800db35
 800d930:	0800db57 	.word	0x0800db57
 800d934:	0800db8f 	.word	0x0800db8f
 800d938:	0800dbb3 	.word	0x0800dbb3
 800d93c:	2000142c 	.word	0x2000142c

0800d940 <stdio_exit_handler>:
 800d940:	4a02      	ldr	r2, [pc, #8]	; (800d94c <stdio_exit_handler+0xc>)
 800d942:	4903      	ldr	r1, [pc, #12]	; (800d950 <stdio_exit_handler+0x10>)
 800d944:	4803      	ldr	r0, [pc, #12]	; (800d954 <stdio_exit_handler+0x14>)
 800d946:	f000 b869 	b.w	800da1c <_fwalk_sglue>
 800d94a:	bf00      	nop
 800d94c:	2000025c 	.word	0x2000025c
 800d950:	0800d85d 	.word	0x0800d85d
 800d954:	20000268 	.word	0x20000268

0800d958 <cleanup_stdio>:
 800d958:	6841      	ldr	r1, [r0, #4]
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <cleanup_stdio+0x34>)
 800d95c:	4299      	cmp	r1, r3
 800d95e:	b510      	push	{r4, lr}
 800d960:	4604      	mov	r4, r0
 800d962:	d001      	beq.n	800d968 <cleanup_stdio+0x10>
 800d964:	f7ff ff7a 	bl	800d85c <_fflush_r>
 800d968:	68a1      	ldr	r1, [r4, #8]
 800d96a:	4b09      	ldr	r3, [pc, #36]	; (800d990 <cleanup_stdio+0x38>)
 800d96c:	4299      	cmp	r1, r3
 800d96e:	d002      	beq.n	800d976 <cleanup_stdio+0x1e>
 800d970:	4620      	mov	r0, r4
 800d972:	f7ff ff73 	bl	800d85c <_fflush_r>
 800d976:	68e1      	ldr	r1, [r4, #12]
 800d978:	4b06      	ldr	r3, [pc, #24]	; (800d994 <cleanup_stdio+0x3c>)
 800d97a:	4299      	cmp	r1, r3
 800d97c:	d004      	beq.n	800d988 <cleanup_stdio+0x30>
 800d97e:	4620      	mov	r0, r4
 800d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d984:	f7ff bf6a 	b.w	800d85c <_fflush_r>
 800d988:	bd10      	pop	{r4, pc}
 800d98a:	bf00      	nop
 800d98c:	2000142c 	.word	0x2000142c
 800d990:	20001494 	.word	0x20001494
 800d994:	200014fc 	.word	0x200014fc

0800d998 <global_stdio_init.part.0>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4b0b      	ldr	r3, [pc, #44]	; (800d9c8 <global_stdio_init.part.0+0x30>)
 800d99c:	4c0b      	ldr	r4, [pc, #44]	; (800d9cc <global_stdio_init.part.0+0x34>)
 800d99e:	4a0c      	ldr	r2, [pc, #48]	; (800d9d0 <global_stdio_init.part.0+0x38>)
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2104      	movs	r1, #4
 800d9a8:	f7ff ff94 	bl	800d8d4 <std>
 800d9ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	2109      	movs	r1, #9
 800d9b4:	f7ff ff8e 	bl	800d8d4 <std>
 800d9b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d9bc:	2202      	movs	r2, #2
 800d9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c2:	2112      	movs	r1, #18
 800d9c4:	f7ff bf86 	b.w	800d8d4 <std>
 800d9c8:	20001564 	.word	0x20001564
 800d9cc:	2000142c 	.word	0x2000142c
 800d9d0:	0800d941 	.word	0x0800d941

0800d9d4 <__sfp_lock_acquire>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__sfp_lock_acquire+0x8>)
 800d9d6:	f000 ba7e 	b.w	800ded6 <__retarget_lock_acquire_recursive>
 800d9da:	bf00      	nop
 800d9dc:	2000156d 	.word	0x2000156d

0800d9e0 <__sfp_lock_release>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__sfp_lock_release+0x8>)
 800d9e2:	f000 ba79 	b.w	800ded8 <__retarget_lock_release_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	2000156d 	.word	0x2000156d

0800d9ec <__sinit>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	f7ff fff0 	bl	800d9d4 <__sfp_lock_acquire>
 800d9f4:	6a23      	ldr	r3, [r4, #32]
 800d9f6:	b11b      	cbz	r3, 800da00 <__sinit+0x14>
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f7ff bff0 	b.w	800d9e0 <__sfp_lock_release>
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <__sinit+0x28>)
 800da02:	6223      	str	r3, [r4, #32]
 800da04:	4b04      	ldr	r3, [pc, #16]	; (800da18 <__sinit+0x2c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1f5      	bne.n	800d9f8 <__sinit+0xc>
 800da0c:	f7ff ffc4 	bl	800d998 <global_stdio_init.part.0>
 800da10:	e7f2      	b.n	800d9f8 <__sinit+0xc>
 800da12:	bf00      	nop
 800da14:	0800d959 	.word	0x0800d959
 800da18:	20001564 	.word	0x20001564

0800da1c <_fwalk_sglue>:
 800da1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da20:	4607      	mov	r7, r0
 800da22:	4688      	mov	r8, r1
 800da24:	4614      	mov	r4, r2
 800da26:	2600      	movs	r6, #0
 800da28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da2c:	f1b9 0901 	subs.w	r9, r9, #1
 800da30:	d505      	bpl.n	800da3e <_fwalk_sglue+0x22>
 800da32:	6824      	ldr	r4, [r4, #0]
 800da34:	2c00      	cmp	r4, #0
 800da36:	d1f7      	bne.n	800da28 <_fwalk_sglue+0xc>
 800da38:	4630      	mov	r0, r6
 800da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3e:	89ab      	ldrh	r3, [r5, #12]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d907      	bls.n	800da54 <_fwalk_sglue+0x38>
 800da44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da48:	3301      	adds	r3, #1
 800da4a:	d003      	beq.n	800da54 <_fwalk_sglue+0x38>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4638      	mov	r0, r7
 800da50:	47c0      	blx	r8
 800da52:	4306      	orrs	r6, r0
 800da54:	3568      	adds	r5, #104	; 0x68
 800da56:	e7e9      	b.n	800da2c <_fwalk_sglue+0x10>

0800da58 <iprintf>:
 800da58:	b40f      	push	{r0, r1, r2, r3}
 800da5a:	b507      	push	{r0, r1, r2, lr}
 800da5c:	4906      	ldr	r1, [pc, #24]	; (800da78 <iprintf+0x20>)
 800da5e:	ab04      	add	r3, sp, #16
 800da60:	6808      	ldr	r0, [r1, #0]
 800da62:	f853 2b04 	ldr.w	r2, [r3], #4
 800da66:	6881      	ldr	r1, [r0, #8]
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	f000 fabb 	bl	800dfe4 <_vfiprintf_r>
 800da6e:	b003      	add	sp, #12
 800da70:	f85d eb04 	ldr.w	lr, [sp], #4
 800da74:	b004      	add	sp, #16
 800da76:	4770      	bx	lr
 800da78:	200002b4 	.word	0x200002b4

0800da7c <_puts_r>:
 800da7c:	6a03      	ldr	r3, [r0, #32]
 800da7e:	b570      	push	{r4, r5, r6, lr}
 800da80:	6884      	ldr	r4, [r0, #8]
 800da82:	4605      	mov	r5, r0
 800da84:	460e      	mov	r6, r1
 800da86:	b90b      	cbnz	r3, 800da8c <_puts_r+0x10>
 800da88:	f7ff ffb0 	bl	800d9ec <__sinit>
 800da8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da8e:	07db      	lsls	r3, r3, #31
 800da90:	d405      	bmi.n	800da9e <_puts_r+0x22>
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	0598      	lsls	r0, r3, #22
 800da96:	d402      	bmi.n	800da9e <_puts_r+0x22>
 800da98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da9a:	f000 fa1c 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	0719      	lsls	r1, r3, #28
 800daa2:	d513      	bpl.n	800dacc <_puts_r+0x50>
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	b18b      	cbz	r3, 800dacc <_puts_r+0x50>
 800daa8:	3e01      	subs	r6, #1
 800daaa:	68a3      	ldr	r3, [r4, #8]
 800daac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dab0:	3b01      	subs	r3, #1
 800dab2:	60a3      	str	r3, [r4, #8]
 800dab4:	b9e9      	cbnz	r1, 800daf2 <_puts_r+0x76>
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	da2e      	bge.n	800db18 <_puts_r+0x9c>
 800daba:	4622      	mov	r2, r4
 800dabc:	210a      	movs	r1, #10
 800dabe:	4628      	mov	r0, r5
 800dac0:	f000 f87b 	bl	800dbba <__swbuf_r>
 800dac4:	3001      	adds	r0, #1
 800dac6:	d007      	beq.n	800dad8 <_puts_r+0x5c>
 800dac8:	250a      	movs	r5, #10
 800daca:	e007      	b.n	800dadc <_puts_r+0x60>
 800dacc:	4621      	mov	r1, r4
 800dace:	4628      	mov	r0, r5
 800dad0:	f000 f8b0 	bl	800dc34 <__swsetup_r>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d0e7      	beq.n	800daa8 <_puts_r+0x2c>
 800dad8:	f04f 35ff 	mov.w	r5, #4294967295
 800dadc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dade:	07da      	lsls	r2, r3, #31
 800dae0:	d405      	bmi.n	800daee <_puts_r+0x72>
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	059b      	lsls	r3, r3, #22
 800dae6:	d402      	bmi.n	800daee <_puts_r+0x72>
 800dae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daea:	f000 f9f5 	bl	800ded8 <__retarget_lock_release_recursive>
 800daee:	4628      	mov	r0, r5
 800daf0:	bd70      	pop	{r4, r5, r6, pc}
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	da04      	bge.n	800db00 <_puts_r+0x84>
 800daf6:	69a2      	ldr	r2, [r4, #24]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	dc06      	bgt.n	800db0a <_puts_r+0x8e>
 800dafc:	290a      	cmp	r1, #10
 800dafe:	d004      	beq.n	800db0a <_puts_r+0x8e>
 800db00:	6823      	ldr	r3, [r4, #0]
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	6022      	str	r2, [r4, #0]
 800db06:	7019      	strb	r1, [r3, #0]
 800db08:	e7cf      	b.n	800daaa <_puts_r+0x2e>
 800db0a:	4622      	mov	r2, r4
 800db0c:	4628      	mov	r0, r5
 800db0e:	f000 f854 	bl	800dbba <__swbuf_r>
 800db12:	3001      	adds	r0, #1
 800db14:	d1c9      	bne.n	800daaa <_puts_r+0x2e>
 800db16:	e7df      	b.n	800dad8 <_puts_r+0x5c>
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	250a      	movs	r5, #10
 800db1c:	1c5a      	adds	r2, r3, #1
 800db1e:	6022      	str	r2, [r4, #0]
 800db20:	701d      	strb	r5, [r3, #0]
 800db22:	e7db      	b.n	800dadc <_puts_r+0x60>

0800db24 <puts>:
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <puts+0xc>)
 800db26:	4601      	mov	r1, r0
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	f7ff bfa7 	b.w	800da7c <_puts_r>
 800db2e:	bf00      	nop
 800db30:	200002b4 	.word	0x200002b4

0800db34 <__sread>:
 800db34:	b510      	push	{r4, lr}
 800db36:	460c      	mov	r4, r1
 800db38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3c:	f000 f96c 	bl	800de18 <_read_r>
 800db40:	2800      	cmp	r0, #0
 800db42:	bfab      	itete	ge
 800db44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db46:	89a3      	ldrhlt	r3, [r4, #12]
 800db48:	181b      	addge	r3, r3, r0
 800db4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db4e:	bfac      	ite	ge
 800db50:	6563      	strge	r3, [r4, #84]	; 0x54
 800db52:	81a3      	strhlt	r3, [r4, #12]
 800db54:	bd10      	pop	{r4, pc}

0800db56 <__swrite>:
 800db56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db5a:	461f      	mov	r7, r3
 800db5c:	898b      	ldrh	r3, [r1, #12]
 800db5e:	05db      	lsls	r3, r3, #23
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	4616      	mov	r6, r2
 800db66:	d505      	bpl.n	800db74 <__swrite+0x1e>
 800db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6c:	2302      	movs	r3, #2
 800db6e:	2200      	movs	r2, #0
 800db70:	f000 f940 	bl	800ddf4 <_lseek_r>
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db7e:	81a3      	strh	r3, [r4, #12]
 800db80:	4632      	mov	r2, r6
 800db82:	463b      	mov	r3, r7
 800db84:	4628      	mov	r0, r5
 800db86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	f000 b967 	b.w	800de5c <_write_r>

0800db8e <__sseek>:
 800db8e:	b510      	push	{r4, lr}
 800db90:	460c      	mov	r4, r1
 800db92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db96:	f000 f92d 	bl	800ddf4 <_lseek_r>
 800db9a:	1c43      	adds	r3, r0, #1
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	bf15      	itete	ne
 800dba0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbaa:	81a3      	strheq	r3, [r4, #12]
 800dbac:	bf18      	it	ne
 800dbae:	81a3      	strhne	r3, [r4, #12]
 800dbb0:	bd10      	pop	{r4, pc}

0800dbb2 <__sclose>:
 800dbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb6:	f000 b8b7 	b.w	800dd28 <_close_r>

0800dbba <__swbuf_r>:
 800dbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbc:	460e      	mov	r6, r1
 800dbbe:	4614      	mov	r4, r2
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	b118      	cbz	r0, 800dbcc <__swbuf_r+0x12>
 800dbc4:	6a03      	ldr	r3, [r0, #32]
 800dbc6:	b90b      	cbnz	r3, 800dbcc <__swbuf_r+0x12>
 800dbc8:	f7ff ff10 	bl	800d9ec <__sinit>
 800dbcc:	69a3      	ldr	r3, [r4, #24]
 800dbce:	60a3      	str	r3, [r4, #8]
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	071a      	lsls	r2, r3, #28
 800dbd4:	d525      	bpl.n	800dc22 <__swbuf_r+0x68>
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	b31b      	cbz	r3, 800dc22 <__swbuf_r+0x68>
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	6922      	ldr	r2, [r4, #16]
 800dbde:	1a98      	subs	r0, r3, r2
 800dbe0:	6963      	ldr	r3, [r4, #20]
 800dbe2:	b2f6      	uxtb	r6, r6
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	4637      	mov	r7, r6
 800dbe8:	dc04      	bgt.n	800dbf4 <__swbuf_r+0x3a>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff fe35 	bl	800d85c <_fflush_r>
 800dbf2:	b9e0      	cbnz	r0, 800dc2e <__swbuf_r+0x74>
 800dbf4:	68a3      	ldr	r3, [r4, #8]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	60a3      	str	r3, [r4, #8]
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	1c5a      	adds	r2, r3, #1
 800dbfe:	6022      	str	r2, [r4, #0]
 800dc00:	701e      	strb	r6, [r3, #0]
 800dc02:	6962      	ldr	r2, [r4, #20]
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d004      	beq.n	800dc14 <__swbuf_r+0x5a>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	07db      	lsls	r3, r3, #31
 800dc0e:	d506      	bpl.n	800dc1e <__swbuf_r+0x64>
 800dc10:	2e0a      	cmp	r6, #10
 800dc12:	d104      	bne.n	800dc1e <__swbuf_r+0x64>
 800dc14:	4621      	mov	r1, r4
 800dc16:	4628      	mov	r0, r5
 800dc18:	f7ff fe20 	bl	800d85c <_fflush_r>
 800dc1c:	b938      	cbnz	r0, 800dc2e <__swbuf_r+0x74>
 800dc1e:	4638      	mov	r0, r7
 800dc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc22:	4621      	mov	r1, r4
 800dc24:	4628      	mov	r0, r5
 800dc26:	f000 f805 	bl	800dc34 <__swsetup_r>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d0d5      	beq.n	800dbda <__swbuf_r+0x20>
 800dc2e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc32:	e7f4      	b.n	800dc1e <__swbuf_r+0x64>

0800dc34 <__swsetup_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4b2a      	ldr	r3, [pc, #168]	; (800dce0 <__swsetup_r+0xac>)
 800dc38:	4605      	mov	r5, r0
 800dc3a:	6818      	ldr	r0, [r3, #0]
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	b118      	cbz	r0, 800dc48 <__swsetup_r+0x14>
 800dc40:	6a03      	ldr	r3, [r0, #32]
 800dc42:	b90b      	cbnz	r3, 800dc48 <__swsetup_r+0x14>
 800dc44:	f7ff fed2 	bl	800d9ec <__sinit>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc4e:	0718      	lsls	r0, r3, #28
 800dc50:	d422      	bmi.n	800dc98 <__swsetup_r+0x64>
 800dc52:	06d9      	lsls	r1, r3, #27
 800dc54:	d407      	bmi.n	800dc66 <__swsetup_r+0x32>
 800dc56:	2309      	movs	r3, #9
 800dc58:	602b      	str	r3, [r5, #0]
 800dc5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc5e:	81a3      	strh	r3, [r4, #12]
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295
 800dc64:	e034      	b.n	800dcd0 <__swsetup_r+0x9c>
 800dc66:	0758      	lsls	r0, r3, #29
 800dc68:	d512      	bpl.n	800dc90 <__swsetup_r+0x5c>
 800dc6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc6c:	b141      	cbz	r1, 800dc80 <__swsetup_r+0x4c>
 800dc6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc72:	4299      	cmp	r1, r3
 800dc74:	d002      	beq.n	800dc7c <__swsetup_r+0x48>
 800dc76:	4628      	mov	r0, r5
 800dc78:	f000 f93e 	bl	800def8 <_free_r>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	6363      	str	r3, [r4, #52]	; 0x34
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc86:	81a3      	strh	r3, [r4, #12]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	6063      	str	r3, [r4, #4]
 800dc8c:	6923      	ldr	r3, [r4, #16]
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f043 0308 	orr.w	r3, r3, #8
 800dc96:	81a3      	strh	r3, [r4, #12]
 800dc98:	6923      	ldr	r3, [r4, #16]
 800dc9a:	b94b      	cbnz	r3, 800dcb0 <__swsetup_r+0x7c>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dca6:	d003      	beq.n	800dcb0 <__swsetup_r+0x7c>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 fc6a 	bl	800e584 <__smakebuf_r>
 800dcb0:	89a0      	ldrh	r0, [r4, #12]
 800dcb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcb6:	f010 0301 	ands.w	r3, r0, #1
 800dcba:	d00a      	beq.n	800dcd2 <__swsetup_r+0x9e>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60a3      	str	r3, [r4, #8]
 800dcc0:	6963      	ldr	r3, [r4, #20]
 800dcc2:	425b      	negs	r3, r3
 800dcc4:	61a3      	str	r3, [r4, #24]
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	b943      	cbnz	r3, 800dcdc <__swsetup_r+0xa8>
 800dcca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dcce:	d1c4      	bne.n	800dc5a <__swsetup_r+0x26>
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	0781      	lsls	r1, r0, #30
 800dcd4:	bf58      	it	pl
 800dcd6:	6963      	ldrpl	r3, [r4, #20]
 800dcd8:	60a3      	str	r3, [r4, #8]
 800dcda:	e7f4      	b.n	800dcc6 <__swsetup_r+0x92>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e7f7      	b.n	800dcd0 <__swsetup_r+0x9c>
 800dce0:	200002b4 	.word	0x200002b4

0800dce4 <memmove>:
 800dce4:	4288      	cmp	r0, r1
 800dce6:	b510      	push	{r4, lr}
 800dce8:	eb01 0402 	add.w	r4, r1, r2
 800dcec:	d902      	bls.n	800dcf4 <memmove+0x10>
 800dcee:	4284      	cmp	r4, r0
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	d807      	bhi.n	800dd04 <memmove+0x20>
 800dcf4:	1e43      	subs	r3, r0, #1
 800dcf6:	42a1      	cmp	r1, r4
 800dcf8:	d008      	beq.n	800dd0c <memmove+0x28>
 800dcfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd02:	e7f8      	b.n	800dcf6 <memmove+0x12>
 800dd04:	4402      	add	r2, r0
 800dd06:	4601      	mov	r1, r0
 800dd08:	428a      	cmp	r2, r1
 800dd0a:	d100      	bne.n	800dd0e <memmove+0x2a>
 800dd0c:	bd10      	pop	{r4, pc}
 800dd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd16:	e7f7      	b.n	800dd08 <memmove+0x24>

0800dd18 <memset>:
 800dd18:	4402      	add	r2, r0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d100      	bne.n	800dd22 <memset+0xa>
 800dd20:	4770      	bx	lr
 800dd22:	f803 1b01 	strb.w	r1, [r3], #1
 800dd26:	e7f9      	b.n	800dd1c <memset+0x4>

0800dd28 <_close_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d06      	ldr	r5, [pc, #24]	; (800dd44 <_close_r+0x1c>)
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4608      	mov	r0, r1
 800dd32:	602b      	str	r3, [r5, #0]
 800dd34:	f7fa f987 	bl	8008046 <_close>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_close_r+0x1a>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_close_r+0x1a>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	20001568 	.word	0x20001568

0800dd48 <_reclaim_reent>:
 800dd48:	4b29      	ldr	r3, [pc, #164]	; (800ddf0 <_reclaim_reent+0xa8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4283      	cmp	r3, r0
 800dd4e:	b570      	push	{r4, r5, r6, lr}
 800dd50:	4604      	mov	r4, r0
 800dd52:	d04b      	beq.n	800ddec <_reclaim_reent+0xa4>
 800dd54:	69c3      	ldr	r3, [r0, #28]
 800dd56:	b143      	cbz	r3, 800dd6a <_reclaim_reent+0x22>
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d144      	bne.n	800dde8 <_reclaim_reent+0xa0>
 800dd5e:	69e3      	ldr	r3, [r4, #28]
 800dd60:	6819      	ldr	r1, [r3, #0]
 800dd62:	b111      	cbz	r1, 800dd6a <_reclaim_reent+0x22>
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 f8c7 	bl	800def8 <_free_r>
 800dd6a:	6961      	ldr	r1, [r4, #20]
 800dd6c:	b111      	cbz	r1, 800dd74 <_reclaim_reent+0x2c>
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f000 f8c2 	bl	800def8 <_free_r>
 800dd74:	69e1      	ldr	r1, [r4, #28]
 800dd76:	b111      	cbz	r1, 800dd7e <_reclaim_reent+0x36>
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 f8bd 	bl	800def8 <_free_r>
 800dd7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd80:	b111      	cbz	r1, 800dd88 <_reclaim_reent+0x40>
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f8b8 	bl	800def8 <_free_r>
 800dd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd8a:	b111      	cbz	r1, 800dd92 <_reclaim_reent+0x4a>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f000 f8b3 	bl	800def8 <_free_r>
 800dd92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd94:	b111      	cbz	r1, 800dd9c <_reclaim_reent+0x54>
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 f8ae 	bl	800def8 <_free_r>
 800dd9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd9e:	b111      	cbz	r1, 800dda6 <_reclaim_reent+0x5e>
 800dda0:	4620      	mov	r0, r4
 800dda2:	f000 f8a9 	bl	800def8 <_free_r>
 800dda6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dda8:	b111      	cbz	r1, 800ddb0 <_reclaim_reent+0x68>
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 f8a4 	bl	800def8 <_free_r>
 800ddb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ddb2:	b111      	cbz	r1, 800ddba <_reclaim_reent+0x72>
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 f89f 	bl	800def8 <_free_r>
 800ddba:	6a23      	ldr	r3, [r4, #32]
 800ddbc:	b1b3      	cbz	r3, 800ddec <_reclaim_reent+0xa4>
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddc4:	4718      	bx	r3
 800ddc6:	5949      	ldr	r1, [r1, r5]
 800ddc8:	b941      	cbnz	r1, 800dddc <_reclaim_reent+0x94>
 800ddca:	3504      	adds	r5, #4
 800ddcc:	69e3      	ldr	r3, [r4, #28]
 800ddce:	2d80      	cmp	r5, #128	; 0x80
 800ddd0:	68d9      	ldr	r1, [r3, #12]
 800ddd2:	d1f8      	bne.n	800ddc6 <_reclaim_reent+0x7e>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 f88f 	bl	800def8 <_free_r>
 800ddda:	e7c0      	b.n	800dd5e <_reclaim_reent+0x16>
 800dddc:	680e      	ldr	r6, [r1, #0]
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 f88a 	bl	800def8 <_free_r>
 800dde4:	4631      	mov	r1, r6
 800dde6:	e7ef      	b.n	800ddc8 <_reclaim_reent+0x80>
 800dde8:	2500      	movs	r5, #0
 800ddea:	e7ef      	b.n	800ddcc <_reclaim_reent+0x84>
 800ddec:	bd70      	pop	{r4, r5, r6, pc}
 800ddee:	bf00      	nop
 800ddf0:	200002b4 	.word	0x200002b4

0800ddf4 <_lseek_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d07      	ldr	r5, [pc, #28]	; (800de14 <_lseek_r+0x20>)
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7fa f946 	bl	8008094 <_lseek>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_lseek_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_lseek_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	20001568 	.word	0x20001568

0800de18 <_read_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4d07      	ldr	r5, [pc, #28]	; (800de38 <_read_r+0x20>)
 800de1c:	4604      	mov	r4, r0
 800de1e:	4608      	mov	r0, r1
 800de20:	4611      	mov	r1, r2
 800de22:	2200      	movs	r2, #0
 800de24:	602a      	str	r2, [r5, #0]
 800de26:	461a      	mov	r2, r3
 800de28:	f7fa f8d4 	bl	8007fd4 <_read>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_read_r+0x1e>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	b103      	cbz	r3, 800de36 <_read_r+0x1e>
 800de34:	6023      	str	r3, [r4, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	20001568 	.word	0x20001568

0800de3c <_sbrk_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	4d06      	ldr	r5, [pc, #24]	; (800de58 <_sbrk_r+0x1c>)
 800de40:	2300      	movs	r3, #0
 800de42:	4604      	mov	r4, r0
 800de44:	4608      	mov	r0, r1
 800de46:	602b      	str	r3, [r5, #0]
 800de48:	f7fa f932 	bl	80080b0 <_sbrk>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_sbrk_r+0x1a>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_sbrk_r+0x1a>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	20001568 	.word	0x20001568

0800de5c <_write_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4d07      	ldr	r5, [pc, #28]	; (800de7c <_write_r+0x20>)
 800de60:	4604      	mov	r4, r0
 800de62:	4608      	mov	r0, r1
 800de64:	4611      	mov	r1, r2
 800de66:	2200      	movs	r2, #0
 800de68:	602a      	str	r2, [r5, #0]
 800de6a:	461a      	mov	r2, r3
 800de6c:	f7fa f8cf 	bl	800800e <_write>
 800de70:	1c43      	adds	r3, r0, #1
 800de72:	d102      	bne.n	800de7a <_write_r+0x1e>
 800de74:	682b      	ldr	r3, [r5, #0]
 800de76:	b103      	cbz	r3, 800de7a <_write_r+0x1e>
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	bd38      	pop	{r3, r4, r5, pc}
 800de7c:	20001568 	.word	0x20001568

0800de80 <__errno>:
 800de80:	4b01      	ldr	r3, [pc, #4]	; (800de88 <__errno+0x8>)
 800de82:	6818      	ldr	r0, [r3, #0]
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	200002b4 	.word	0x200002b4

0800de8c <__libc_init_array>:
 800de8c:	b570      	push	{r4, r5, r6, lr}
 800de8e:	4d0d      	ldr	r5, [pc, #52]	; (800dec4 <__libc_init_array+0x38>)
 800de90:	4c0d      	ldr	r4, [pc, #52]	; (800dec8 <__libc_init_array+0x3c>)
 800de92:	1b64      	subs	r4, r4, r5
 800de94:	10a4      	asrs	r4, r4, #2
 800de96:	2600      	movs	r6, #0
 800de98:	42a6      	cmp	r6, r4
 800de9a:	d109      	bne.n	800deb0 <__libc_init_array+0x24>
 800de9c:	4d0b      	ldr	r5, [pc, #44]	; (800decc <__libc_init_array+0x40>)
 800de9e:	4c0c      	ldr	r4, [pc, #48]	; (800ded0 <__libc_init_array+0x44>)
 800dea0:	f000 fbce 	bl	800e640 <_init>
 800dea4:	1b64      	subs	r4, r4, r5
 800dea6:	10a4      	asrs	r4, r4, #2
 800dea8:	2600      	movs	r6, #0
 800deaa:	42a6      	cmp	r6, r4
 800deac:	d105      	bne.n	800deba <__libc_init_array+0x2e>
 800deae:	bd70      	pop	{r4, r5, r6, pc}
 800deb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb4:	4798      	blx	r3
 800deb6:	3601      	adds	r6, #1
 800deb8:	e7ee      	b.n	800de98 <__libc_init_array+0xc>
 800deba:	f855 3b04 	ldr.w	r3, [r5], #4
 800debe:	4798      	blx	r3
 800dec0:	3601      	adds	r6, #1
 800dec2:	e7f2      	b.n	800deaa <__libc_init_array+0x1e>
 800dec4:	0800ec4c 	.word	0x0800ec4c
 800dec8:	0800ec4c 	.word	0x0800ec4c
 800decc:	0800ec4c 	.word	0x0800ec4c
 800ded0:	0800ec50 	.word	0x0800ec50

0800ded4 <__retarget_lock_init_recursive>:
 800ded4:	4770      	bx	lr

0800ded6 <__retarget_lock_acquire_recursive>:
 800ded6:	4770      	bx	lr

0800ded8 <__retarget_lock_release_recursive>:
 800ded8:	4770      	bx	lr

0800deda <memcpy>:
 800deda:	440a      	add	r2, r1
 800dedc:	4291      	cmp	r1, r2
 800dede:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee2:	d100      	bne.n	800dee6 <memcpy+0xc>
 800dee4:	4770      	bx	lr
 800dee6:	b510      	push	{r4, lr}
 800dee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def0:	4291      	cmp	r1, r2
 800def2:	d1f9      	bne.n	800dee8 <memcpy+0xe>
 800def4:	bd10      	pop	{r4, pc}
	...

0800def8 <_free_r>:
 800def8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800defa:	2900      	cmp	r1, #0
 800defc:	d044      	beq.n	800df88 <_free_r+0x90>
 800defe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df02:	9001      	str	r0, [sp, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f1a1 0404 	sub.w	r4, r1, #4
 800df0a:	bfb8      	it	lt
 800df0c:	18e4      	addlt	r4, r4, r3
 800df0e:	f7ff fc13 	bl	800d738 <__malloc_lock>
 800df12:	4a1e      	ldr	r2, [pc, #120]	; (800df8c <_free_r+0x94>)
 800df14:	9801      	ldr	r0, [sp, #4]
 800df16:	6813      	ldr	r3, [r2, #0]
 800df18:	b933      	cbnz	r3, 800df28 <_free_r+0x30>
 800df1a:	6063      	str	r3, [r4, #4]
 800df1c:	6014      	str	r4, [r2, #0]
 800df1e:	b003      	add	sp, #12
 800df20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df24:	f7ff bc0e 	b.w	800d744 <__malloc_unlock>
 800df28:	42a3      	cmp	r3, r4
 800df2a:	d908      	bls.n	800df3e <_free_r+0x46>
 800df2c:	6825      	ldr	r5, [r4, #0]
 800df2e:	1961      	adds	r1, r4, r5
 800df30:	428b      	cmp	r3, r1
 800df32:	bf01      	itttt	eq
 800df34:	6819      	ldreq	r1, [r3, #0]
 800df36:	685b      	ldreq	r3, [r3, #4]
 800df38:	1949      	addeq	r1, r1, r5
 800df3a:	6021      	streq	r1, [r4, #0]
 800df3c:	e7ed      	b.n	800df1a <_free_r+0x22>
 800df3e:	461a      	mov	r2, r3
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	b10b      	cbz	r3, 800df48 <_free_r+0x50>
 800df44:	42a3      	cmp	r3, r4
 800df46:	d9fa      	bls.n	800df3e <_free_r+0x46>
 800df48:	6811      	ldr	r1, [r2, #0]
 800df4a:	1855      	adds	r5, r2, r1
 800df4c:	42a5      	cmp	r5, r4
 800df4e:	d10b      	bne.n	800df68 <_free_r+0x70>
 800df50:	6824      	ldr	r4, [r4, #0]
 800df52:	4421      	add	r1, r4
 800df54:	1854      	adds	r4, r2, r1
 800df56:	42a3      	cmp	r3, r4
 800df58:	6011      	str	r1, [r2, #0]
 800df5a:	d1e0      	bne.n	800df1e <_free_r+0x26>
 800df5c:	681c      	ldr	r4, [r3, #0]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	6053      	str	r3, [r2, #4]
 800df62:	440c      	add	r4, r1
 800df64:	6014      	str	r4, [r2, #0]
 800df66:	e7da      	b.n	800df1e <_free_r+0x26>
 800df68:	d902      	bls.n	800df70 <_free_r+0x78>
 800df6a:	230c      	movs	r3, #12
 800df6c:	6003      	str	r3, [r0, #0]
 800df6e:	e7d6      	b.n	800df1e <_free_r+0x26>
 800df70:	6825      	ldr	r5, [r4, #0]
 800df72:	1961      	adds	r1, r4, r5
 800df74:	428b      	cmp	r3, r1
 800df76:	bf04      	itt	eq
 800df78:	6819      	ldreq	r1, [r3, #0]
 800df7a:	685b      	ldreq	r3, [r3, #4]
 800df7c:	6063      	str	r3, [r4, #4]
 800df7e:	bf04      	itt	eq
 800df80:	1949      	addeq	r1, r1, r5
 800df82:	6021      	streq	r1, [r4, #0]
 800df84:	6054      	str	r4, [r2, #4]
 800df86:	e7ca      	b.n	800df1e <_free_r+0x26>
 800df88:	b003      	add	sp, #12
 800df8a:	bd30      	pop	{r4, r5, pc}
 800df8c:	20001424 	.word	0x20001424

0800df90 <__sfputc_r>:
 800df90:	6893      	ldr	r3, [r2, #8]
 800df92:	3b01      	subs	r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	b410      	push	{r4}
 800df98:	6093      	str	r3, [r2, #8]
 800df9a:	da08      	bge.n	800dfae <__sfputc_r+0x1e>
 800df9c:	6994      	ldr	r4, [r2, #24]
 800df9e:	42a3      	cmp	r3, r4
 800dfa0:	db01      	blt.n	800dfa6 <__sfputc_r+0x16>
 800dfa2:	290a      	cmp	r1, #10
 800dfa4:	d103      	bne.n	800dfae <__sfputc_r+0x1e>
 800dfa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfaa:	f7ff be06 	b.w	800dbba <__swbuf_r>
 800dfae:	6813      	ldr	r3, [r2, #0]
 800dfb0:	1c58      	adds	r0, r3, #1
 800dfb2:	6010      	str	r0, [r2, #0]
 800dfb4:	7019      	strb	r1, [r3, #0]
 800dfb6:	4608      	mov	r0, r1
 800dfb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <__sfputs_r>:
 800dfbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	460f      	mov	r7, r1
 800dfc4:	4614      	mov	r4, r2
 800dfc6:	18d5      	adds	r5, r2, r3
 800dfc8:	42ac      	cmp	r4, r5
 800dfca:	d101      	bne.n	800dfd0 <__sfputs_r+0x12>
 800dfcc:	2000      	movs	r0, #0
 800dfce:	e007      	b.n	800dfe0 <__sfputs_r+0x22>
 800dfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd4:	463a      	mov	r2, r7
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f7ff ffda 	bl	800df90 <__sfputc_r>
 800dfdc:	1c43      	adds	r3, r0, #1
 800dfde:	d1f3      	bne.n	800dfc8 <__sfputs_r+0xa>
 800dfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfe4 <_vfiprintf_r>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	460d      	mov	r5, r1
 800dfea:	b09d      	sub	sp, #116	; 0x74
 800dfec:	4614      	mov	r4, r2
 800dfee:	4698      	mov	r8, r3
 800dff0:	4606      	mov	r6, r0
 800dff2:	b118      	cbz	r0, 800dffc <_vfiprintf_r+0x18>
 800dff4:	6a03      	ldr	r3, [r0, #32]
 800dff6:	b90b      	cbnz	r3, 800dffc <_vfiprintf_r+0x18>
 800dff8:	f7ff fcf8 	bl	800d9ec <__sinit>
 800dffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dffe:	07d9      	lsls	r1, r3, #31
 800e000:	d405      	bmi.n	800e00e <_vfiprintf_r+0x2a>
 800e002:	89ab      	ldrh	r3, [r5, #12]
 800e004:	059a      	lsls	r2, r3, #22
 800e006:	d402      	bmi.n	800e00e <_vfiprintf_r+0x2a>
 800e008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e00a:	f7ff ff64 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800e00e:	89ab      	ldrh	r3, [r5, #12]
 800e010:	071b      	lsls	r3, r3, #28
 800e012:	d501      	bpl.n	800e018 <_vfiprintf_r+0x34>
 800e014:	692b      	ldr	r3, [r5, #16]
 800e016:	b99b      	cbnz	r3, 800e040 <_vfiprintf_r+0x5c>
 800e018:	4629      	mov	r1, r5
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7ff fe0a 	bl	800dc34 <__swsetup_r>
 800e020:	b170      	cbz	r0, 800e040 <_vfiprintf_r+0x5c>
 800e022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e024:	07dc      	lsls	r4, r3, #31
 800e026:	d504      	bpl.n	800e032 <_vfiprintf_r+0x4e>
 800e028:	f04f 30ff 	mov.w	r0, #4294967295
 800e02c:	b01d      	add	sp, #116	; 0x74
 800e02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e032:	89ab      	ldrh	r3, [r5, #12]
 800e034:	0598      	lsls	r0, r3, #22
 800e036:	d4f7      	bmi.n	800e028 <_vfiprintf_r+0x44>
 800e038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e03a:	f7ff ff4d 	bl	800ded8 <__retarget_lock_release_recursive>
 800e03e:	e7f3      	b.n	800e028 <_vfiprintf_r+0x44>
 800e040:	2300      	movs	r3, #0
 800e042:	9309      	str	r3, [sp, #36]	; 0x24
 800e044:	2320      	movs	r3, #32
 800e046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e04e:	2330      	movs	r3, #48	; 0x30
 800e050:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e204 <_vfiprintf_r+0x220>
 800e054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e058:	f04f 0901 	mov.w	r9, #1
 800e05c:	4623      	mov	r3, r4
 800e05e:	469a      	mov	sl, r3
 800e060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e064:	b10a      	cbz	r2, 800e06a <_vfiprintf_r+0x86>
 800e066:	2a25      	cmp	r2, #37	; 0x25
 800e068:	d1f9      	bne.n	800e05e <_vfiprintf_r+0x7a>
 800e06a:	ebba 0b04 	subs.w	fp, sl, r4
 800e06e:	d00b      	beq.n	800e088 <_vfiprintf_r+0xa4>
 800e070:	465b      	mov	r3, fp
 800e072:	4622      	mov	r2, r4
 800e074:	4629      	mov	r1, r5
 800e076:	4630      	mov	r0, r6
 800e078:	f7ff ffa1 	bl	800dfbe <__sfputs_r>
 800e07c:	3001      	adds	r0, #1
 800e07e:	f000 80a9 	beq.w	800e1d4 <_vfiprintf_r+0x1f0>
 800e082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e084:	445a      	add	r2, fp
 800e086:	9209      	str	r2, [sp, #36]	; 0x24
 800e088:	f89a 3000 	ldrb.w	r3, [sl]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f000 80a1 	beq.w	800e1d4 <_vfiprintf_r+0x1f0>
 800e092:	2300      	movs	r3, #0
 800e094:	f04f 32ff 	mov.w	r2, #4294967295
 800e098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e09c:	f10a 0a01 	add.w	sl, sl, #1
 800e0a0:	9304      	str	r3, [sp, #16]
 800e0a2:	9307      	str	r3, [sp, #28]
 800e0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0aa:	4654      	mov	r4, sl
 800e0ac:	2205      	movs	r2, #5
 800e0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b2:	4854      	ldr	r0, [pc, #336]	; (800e204 <_vfiprintf_r+0x220>)
 800e0b4:	f7f2 f894 	bl	80001e0 <memchr>
 800e0b8:	9a04      	ldr	r2, [sp, #16]
 800e0ba:	b9d8      	cbnz	r0, 800e0f4 <_vfiprintf_r+0x110>
 800e0bc:	06d1      	lsls	r1, r2, #27
 800e0be:	bf44      	itt	mi
 800e0c0:	2320      	movmi	r3, #32
 800e0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0c6:	0713      	lsls	r3, r2, #28
 800e0c8:	bf44      	itt	mi
 800e0ca:	232b      	movmi	r3, #43	; 0x2b
 800e0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0d6:	d015      	beq.n	800e104 <_vfiprintf_r+0x120>
 800e0d8:	9a07      	ldr	r2, [sp, #28]
 800e0da:	4654      	mov	r4, sl
 800e0dc:	2000      	movs	r0, #0
 800e0de:	f04f 0c0a 	mov.w	ip, #10
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0e8:	3b30      	subs	r3, #48	; 0x30
 800e0ea:	2b09      	cmp	r3, #9
 800e0ec:	d94d      	bls.n	800e18a <_vfiprintf_r+0x1a6>
 800e0ee:	b1b0      	cbz	r0, 800e11e <_vfiprintf_r+0x13a>
 800e0f0:	9207      	str	r2, [sp, #28]
 800e0f2:	e014      	b.n	800e11e <_vfiprintf_r+0x13a>
 800e0f4:	eba0 0308 	sub.w	r3, r0, r8
 800e0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	9304      	str	r3, [sp, #16]
 800e100:	46a2      	mov	sl, r4
 800e102:	e7d2      	b.n	800e0aa <_vfiprintf_r+0xc6>
 800e104:	9b03      	ldr	r3, [sp, #12]
 800e106:	1d19      	adds	r1, r3, #4
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	9103      	str	r1, [sp, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	bfbb      	ittet	lt
 800e110:	425b      	neglt	r3, r3
 800e112:	f042 0202 	orrlt.w	r2, r2, #2
 800e116:	9307      	strge	r3, [sp, #28]
 800e118:	9307      	strlt	r3, [sp, #28]
 800e11a:	bfb8      	it	lt
 800e11c:	9204      	strlt	r2, [sp, #16]
 800e11e:	7823      	ldrb	r3, [r4, #0]
 800e120:	2b2e      	cmp	r3, #46	; 0x2e
 800e122:	d10c      	bne.n	800e13e <_vfiprintf_r+0x15a>
 800e124:	7863      	ldrb	r3, [r4, #1]
 800e126:	2b2a      	cmp	r3, #42	; 0x2a
 800e128:	d134      	bne.n	800e194 <_vfiprintf_r+0x1b0>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	1d1a      	adds	r2, r3, #4
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	9203      	str	r2, [sp, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	bfb8      	it	lt
 800e136:	f04f 33ff 	movlt.w	r3, #4294967295
 800e13a:	3402      	adds	r4, #2
 800e13c:	9305      	str	r3, [sp, #20]
 800e13e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e214 <_vfiprintf_r+0x230>
 800e142:	7821      	ldrb	r1, [r4, #0]
 800e144:	2203      	movs	r2, #3
 800e146:	4650      	mov	r0, sl
 800e148:	f7f2 f84a 	bl	80001e0 <memchr>
 800e14c:	b138      	cbz	r0, 800e15e <_vfiprintf_r+0x17a>
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	eba0 000a 	sub.w	r0, r0, sl
 800e154:	2240      	movs	r2, #64	; 0x40
 800e156:	4082      	lsls	r2, r0
 800e158:	4313      	orrs	r3, r2
 800e15a:	3401      	adds	r4, #1
 800e15c:	9304      	str	r3, [sp, #16]
 800e15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e162:	4829      	ldr	r0, [pc, #164]	; (800e208 <_vfiprintf_r+0x224>)
 800e164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e168:	2206      	movs	r2, #6
 800e16a:	f7f2 f839 	bl	80001e0 <memchr>
 800e16e:	2800      	cmp	r0, #0
 800e170:	d03f      	beq.n	800e1f2 <_vfiprintf_r+0x20e>
 800e172:	4b26      	ldr	r3, [pc, #152]	; (800e20c <_vfiprintf_r+0x228>)
 800e174:	bb1b      	cbnz	r3, 800e1be <_vfiprintf_r+0x1da>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	3307      	adds	r3, #7
 800e17a:	f023 0307 	bic.w	r3, r3, #7
 800e17e:	3308      	adds	r3, #8
 800e180:	9303      	str	r3, [sp, #12]
 800e182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e184:	443b      	add	r3, r7
 800e186:	9309      	str	r3, [sp, #36]	; 0x24
 800e188:	e768      	b.n	800e05c <_vfiprintf_r+0x78>
 800e18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e18e:	460c      	mov	r4, r1
 800e190:	2001      	movs	r0, #1
 800e192:	e7a6      	b.n	800e0e2 <_vfiprintf_r+0xfe>
 800e194:	2300      	movs	r3, #0
 800e196:	3401      	adds	r4, #1
 800e198:	9305      	str	r3, [sp, #20]
 800e19a:	4619      	mov	r1, r3
 800e19c:	f04f 0c0a 	mov.w	ip, #10
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1a6:	3a30      	subs	r2, #48	; 0x30
 800e1a8:	2a09      	cmp	r2, #9
 800e1aa:	d903      	bls.n	800e1b4 <_vfiprintf_r+0x1d0>
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d0c6      	beq.n	800e13e <_vfiprintf_r+0x15a>
 800e1b0:	9105      	str	r1, [sp, #20]
 800e1b2:	e7c4      	b.n	800e13e <_vfiprintf_r+0x15a>
 800e1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e7f0      	b.n	800e1a0 <_vfiprintf_r+0x1bc>
 800e1be:	ab03      	add	r3, sp, #12
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	462a      	mov	r2, r5
 800e1c4:	4b12      	ldr	r3, [pc, #72]	; (800e210 <_vfiprintf_r+0x22c>)
 800e1c6:	a904      	add	r1, sp, #16
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f3af 8000 	nop.w
 800e1ce:	4607      	mov	r7, r0
 800e1d0:	1c78      	adds	r0, r7, #1
 800e1d2:	d1d6      	bne.n	800e182 <_vfiprintf_r+0x19e>
 800e1d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1d6:	07d9      	lsls	r1, r3, #31
 800e1d8:	d405      	bmi.n	800e1e6 <_vfiprintf_r+0x202>
 800e1da:	89ab      	ldrh	r3, [r5, #12]
 800e1dc:	059a      	lsls	r2, r3, #22
 800e1de:	d402      	bmi.n	800e1e6 <_vfiprintf_r+0x202>
 800e1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1e2:	f7ff fe79 	bl	800ded8 <__retarget_lock_release_recursive>
 800e1e6:	89ab      	ldrh	r3, [r5, #12]
 800e1e8:	065b      	lsls	r3, r3, #25
 800e1ea:	f53f af1d 	bmi.w	800e028 <_vfiprintf_r+0x44>
 800e1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1f0:	e71c      	b.n	800e02c <_vfiprintf_r+0x48>
 800e1f2:	ab03      	add	r3, sp, #12
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	462a      	mov	r2, r5
 800e1f8:	4b05      	ldr	r3, [pc, #20]	; (800e210 <_vfiprintf_r+0x22c>)
 800e1fa:	a904      	add	r1, sp, #16
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f000 f879 	bl	800e2f4 <_printf_i>
 800e202:	e7e4      	b.n	800e1ce <_vfiprintf_r+0x1ea>
 800e204:	0800ec10 	.word	0x0800ec10
 800e208:	0800ec1a 	.word	0x0800ec1a
 800e20c:	00000000 	.word	0x00000000
 800e210:	0800dfbf 	.word	0x0800dfbf
 800e214:	0800ec16 	.word	0x0800ec16

0800e218 <_printf_common>:
 800e218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21c:	4616      	mov	r6, r2
 800e21e:	4699      	mov	r9, r3
 800e220:	688a      	ldr	r2, [r1, #8]
 800e222:	690b      	ldr	r3, [r1, #16]
 800e224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e228:	4293      	cmp	r3, r2
 800e22a:	bfb8      	it	lt
 800e22c:	4613      	movlt	r3, r2
 800e22e:	6033      	str	r3, [r6, #0]
 800e230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e234:	4607      	mov	r7, r0
 800e236:	460c      	mov	r4, r1
 800e238:	b10a      	cbz	r2, 800e23e <_printf_common+0x26>
 800e23a:	3301      	adds	r3, #1
 800e23c:	6033      	str	r3, [r6, #0]
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	0699      	lsls	r1, r3, #26
 800e242:	bf42      	ittt	mi
 800e244:	6833      	ldrmi	r3, [r6, #0]
 800e246:	3302      	addmi	r3, #2
 800e248:	6033      	strmi	r3, [r6, #0]
 800e24a:	6825      	ldr	r5, [r4, #0]
 800e24c:	f015 0506 	ands.w	r5, r5, #6
 800e250:	d106      	bne.n	800e260 <_printf_common+0x48>
 800e252:	f104 0a19 	add.w	sl, r4, #25
 800e256:	68e3      	ldr	r3, [r4, #12]
 800e258:	6832      	ldr	r2, [r6, #0]
 800e25a:	1a9b      	subs	r3, r3, r2
 800e25c:	42ab      	cmp	r3, r5
 800e25e:	dc26      	bgt.n	800e2ae <_printf_common+0x96>
 800e260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e264:	1e13      	subs	r3, r2, #0
 800e266:	6822      	ldr	r2, [r4, #0]
 800e268:	bf18      	it	ne
 800e26a:	2301      	movne	r3, #1
 800e26c:	0692      	lsls	r2, r2, #26
 800e26e:	d42b      	bmi.n	800e2c8 <_printf_common+0xb0>
 800e270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e274:	4649      	mov	r1, r9
 800e276:	4638      	mov	r0, r7
 800e278:	47c0      	blx	r8
 800e27a:	3001      	adds	r0, #1
 800e27c:	d01e      	beq.n	800e2bc <_printf_common+0xa4>
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	6922      	ldr	r2, [r4, #16]
 800e282:	f003 0306 	and.w	r3, r3, #6
 800e286:	2b04      	cmp	r3, #4
 800e288:	bf02      	ittt	eq
 800e28a:	68e5      	ldreq	r5, [r4, #12]
 800e28c:	6833      	ldreq	r3, [r6, #0]
 800e28e:	1aed      	subeq	r5, r5, r3
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	bf0c      	ite	eq
 800e294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e298:	2500      	movne	r5, #0
 800e29a:	4293      	cmp	r3, r2
 800e29c:	bfc4      	itt	gt
 800e29e:	1a9b      	subgt	r3, r3, r2
 800e2a0:	18ed      	addgt	r5, r5, r3
 800e2a2:	2600      	movs	r6, #0
 800e2a4:	341a      	adds	r4, #26
 800e2a6:	42b5      	cmp	r5, r6
 800e2a8:	d11a      	bne.n	800e2e0 <_printf_common+0xc8>
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	e008      	b.n	800e2c0 <_printf_common+0xa8>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	4652      	mov	r2, sl
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	47c0      	blx	r8
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	d103      	bne.n	800e2c4 <_printf_common+0xac>
 800e2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	e7c6      	b.n	800e256 <_printf_common+0x3e>
 800e2c8:	18e1      	adds	r1, r4, r3
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	2030      	movs	r0, #48	; 0x30
 800e2ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2d2:	4422      	add	r2, r4
 800e2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2dc:	3302      	adds	r3, #2
 800e2de:	e7c7      	b.n	800e270 <_printf_common+0x58>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	4649      	mov	r1, r9
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	47c0      	blx	r8
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d0e6      	beq.n	800e2bc <_printf_common+0xa4>
 800e2ee:	3601      	adds	r6, #1
 800e2f0:	e7d9      	b.n	800e2a6 <_printf_common+0x8e>
	...

0800e2f4 <_printf_i>:
 800e2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f8:	7e0f      	ldrb	r7, [r1, #24]
 800e2fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2fc:	2f78      	cmp	r7, #120	; 0x78
 800e2fe:	4691      	mov	r9, r2
 800e300:	4680      	mov	r8, r0
 800e302:	460c      	mov	r4, r1
 800e304:	469a      	mov	sl, r3
 800e306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e30a:	d807      	bhi.n	800e31c <_printf_i+0x28>
 800e30c:	2f62      	cmp	r7, #98	; 0x62
 800e30e:	d80a      	bhi.n	800e326 <_printf_i+0x32>
 800e310:	2f00      	cmp	r7, #0
 800e312:	f000 80d4 	beq.w	800e4be <_printf_i+0x1ca>
 800e316:	2f58      	cmp	r7, #88	; 0x58
 800e318:	f000 80c0 	beq.w	800e49c <_printf_i+0x1a8>
 800e31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e324:	e03a      	b.n	800e39c <_printf_i+0xa8>
 800e326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e32a:	2b15      	cmp	r3, #21
 800e32c:	d8f6      	bhi.n	800e31c <_printf_i+0x28>
 800e32e:	a101      	add	r1, pc, #4	; (adr r1, 800e334 <_printf_i+0x40>)
 800e330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e334:	0800e38d 	.word	0x0800e38d
 800e338:	0800e3a1 	.word	0x0800e3a1
 800e33c:	0800e31d 	.word	0x0800e31d
 800e340:	0800e31d 	.word	0x0800e31d
 800e344:	0800e31d 	.word	0x0800e31d
 800e348:	0800e31d 	.word	0x0800e31d
 800e34c:	0800e3a1 	.word	0x0800e3a1
 800e350:	0800e31d 	.word	0x0800e31d
 800e354:	0800e31d 	.word	0x0800e31d
 800e358:	0800e31d 	.word	0x0800e31d
 800e35c:	0800e31d 	.word	0x0800e31d
 800e360:	0800e4a5 	.word	0x0800e4a5
 800e364:	0800e3cd 	.word	0x0800e3cd
 800e368:	0800e45f 	.word	0x0800e45f
 800e36c:	0800e31d 	.word	0x0800e31d
 800e370:	0800e31d 	.word	0x0800e31d
 800e374:	0800e4c7 	.word	0x0800e4c7
 800e378:	0800e31d 	.word	0x0800e31d
 800e37c:	0800e3cd 	.word	0x0800e3cd
 800e380:	0800e31d 	.word	0x0800e31d
 800e384:	0800e31d 	.word	0x0800e31d
 800e388:	0800e467 	.word	0x0800e467
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	1d1a      	adds	r2, r3, #4
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	602a      	str	r2, [r5, #0]
 800e394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e39c:	2301      	movs	r3, #1
 800e39e:	e09f      	b.n	800e4e0 <_printf_i+0x1ec>
 800e3a0:	6820      	ldr	r0, [r4, #0]
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	0607      	lsls	r7, r0, #24
 800e3a6:	f103 0104 	add.w	r1, r3, #4
 800e3aa:	6029      	str	r1, [r5, #0]
 800e3ac:	d501      	bpl.n	800e3b2 <_printf_i+0xbe>
 800e3ae:	681e      	ldr	r6, [r3, #0]
 800e3b0:	e003      	b.n	800e3ba <_printf_i+0xc6>
 800e3b2:	0646      	lsls	r6, r0, #25
 800e3b4:	d5fb      	bpl.n	800e3ae <_printf_i+0xba>
 800e3b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e3ba:	2e00      	cmp	r6, #0
 800e3bc:	da03      	bge.n	800e3c6 <_printf_i+0xd2>
 800e3be:	232d      	movs	r3, #45	; 0x2d
 800e3c0:	4276      	negs	r6, r6
 800e3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3c6:	485a      	ldr	r0, [pc, #360]	; (800e530 <_printf_i+0x23c>)
 800e3c8:	230a      	movs	r3, #10
 800e3ca:	e012      	b.n	800e3f2 <_printf_i+0xfe>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	6820      	ldr	r0, [r4, #0]
 800e3d0:	1d19      	adds	r1, r3, #4
 800e3d2:	6029      	str	r1, [r5, #0]
 800e3d4:	0605      	lsls	r5, r0, #24
 800e3d6:	d501      	bpl.n	800e3dc <_printf_i+0xe8>
 800e3d8:	681e      	ldr	r6, [r3, #0]
 800e3da:	e002      	b.n	800e3e2 <_printf_i+0xee>
 800e3dc:	0641      	lsls	r1, r0, #25
 800e3de:	d5fb      	bpl.n	800e3d8 <_printf_i+0xe4>
 800e3e0:	881e      	ldrh	r6, [r3, #0]
 800e3e2:	4853      	ldr	r0, [pc, #332]	; (800e530 <_printf_i+0x23c>)
 800e3e4:	2f6f      	cmp	r7, #111	; 0x6f
 800e3e6:	bf0c      	ite	eq
 800e3e8:	2308      	moveq	r3, #8
 800e3ea:	230a      	movne	r3, #10
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3f2:	6865      	ldr	r5, [r4, #4]
 800e3f4:	60a5      	str	r5, [r4, #8]
 800e3f6:	2d00      	cmp	r5, #0
 800e3f8:	bfa2      	ittt	ge
 800e3fa:	6821      	ldrge	r1, [r4, #0]
 800e3fc:	f021 0104 	bicge.w	r1, r1, #4
 800e400:	6021      	strge	r1, [r4, #0]
 800e402:	b90e      	cbnz	r6, 800e408 <_printf_i+0x114>
 800e404:	2d00      	cmp	r5, #0
 800e406:	d04b      	beq.n	800e4a0 <_printf_i+0x1ac>
 800e408:	4615      	mov	r5, r2
 800e40a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e40e:	fb03 6711 	mls	r7, r3, r1, r6
 800e412:	5dc7      	ldrb	r7, [r0, r7]
 800e414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e418:	4637      	mov	r7, r6
 800e41a:	42bb      	cmp	r3, r7
 800e41c:	460e      	mov	r6, r1
 800e41e:	d9f4      	bls.n	800e40a <_printf_i+0x116>
 800e420:	2b08      	cmp	r3, #8
 800e422:	d10b      	bne.n	800e43c <_printf_i+0x148>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	07de      	lsls	r6, r3, #31
 800e428:	d508      	bpl.n	800e43c <_printf_i+0x148>
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	6861      	ldr	r1, [r4, #4]
 800e42e:	4299      	cmp	r1, r3
 800e430:	bfde      	ittt	le
 800e432:	2330      	movle	r3, #48	; 0x30
 800e434:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e43c:	1b52      	subs	r2, r2, r5
 800e43e:	6122      	str	r2, [r4, #16]
 800e440:	f8cd a000 	str.w	sl, [sp]
 800e444:	464b      	mov	r3, r9
 800e446:	aa03      	add	r2, sp, #12
 800e448:	4621      	mov	r1, r4
 800e44a:	4640      	mov	r0, r8
 800e44c:	f7ff fee4 	bl	800e218 <_printf_common>
 800e450:	3001      	adds	r0, #1
 800e452:	d14a      	bne.n	800e4ea <_printf_i+0x1f6>
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	b004      	add	sp, #16
 800e45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	f043 0320 	orr.w	r3, r3, #32
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	4833      	ldr	r0, [pc, #204]	; (800e534 <_printf_i+0x240>)
 800e468:	2778      	movs	r7, #120	; 0x78
 800e46a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	6829      	ldr	r1, [r5, #0]
 800e472:	061f      	lsls	r7, r3, #24
 800e474:	f851 6b04 	ldr.w	r6, [r1], #4
 800e478:	d402      	bmi.n	800e480 <_printf_i+0x18c>
 800e47a:	065f      	lsls	r7, r3, #25
 800e47c:	bf48      	it	mi
 800e47e:	b2b6      	uxthmi	r6, r6
 800e480:	07df      	lsls	r7, r3, #31
 800e482:	bf48      	it	mi
 800e484:	f043 0320 	orrmi.w	r3, r3, #32
 800e488:	6029      	str	r1, [r5, #0]
 800e48a:	bf48      	it	mi
 800e48c:	6023      	strmi	r3, [r4, #0]
 800e48e:	b91e      	cbnz	r6, 800e498 <_printf_i+0x1a4>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	f023 0320 	bic.w	r3, r3, #32
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	2310      	movs	r3, #16
 800e49a:	e7a7      	b.n	800e3ec <_printf_i+0xf8>
 800e49c:	4824      	ldr	r0, [pc, #144]	; (800e530 <_printf_i+0x23c>)
 800e49e:	e7e4      	b.n	800e46a <_printf_i+0x176>
 800e4a0:	4615      	mov	r5, r2
 800e4a2:	e7bd      	b.n	800e420 <_printf_i+0x12c>
 800e4a4:	682b      	ldr	r3, [r5, #0]
 800e4a6:	6826      	ldr	r6, [r4, #0]
 800e4a8:	6961      	ldr	r1, [r4, #20]
 800e4aa:	1d18      	adds	r0, r3, #4
 800e4ac:	6028      	str	r0, [r5, #0]
 800e4ae:	0635      	lsls	r5, r6, #24
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	d501      	bpl.n	800e4b8 <_printf_i+0x1c4>
 800e4b4:	6019      	str	r1, [r3, #0]
 800e4b6:	e002      	b.n	800e4be <_printf_i+0x1ca>
 800e4b8:	0670      	lsls	r0, r6, #25
 800e4ba:	d5fb      	bpl.n	800e4b4 <_printf_i+0x1c0>
 800e4bc:	8019      	strh	r1, [r3, #0]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	6123      	str	r3, [r4, #16]
 800e4c2:	4615      	mov	r5, r2
 800e4c4:	e7bc      	b.n	800e440 <_printf_i+0x14c>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	1d1a      	adds	r2, r3, #4
 800e4ca:	602a      	str	r2, [r5, #0]
 800e4cc:	681d      	ldr	r5, [r3, #0]
 800e4ce:	6862      	ldr	r2, [r4, #4]
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f7f1 fe84 	bl	80001e0 <memchr>
 800e4d8:	b108      	cbz	r0, 800e4de <_printf_i+0x1ea>
 800e4da:	1b40      	subs	r0, r0, r5
 800e4dc:	6060      	str	r0, [r4, #4]
 800e4de:	6863      	ldr	r3, [r4, #4]
 800e4e0:	6123      	str	r3, [r4, #16]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4e8:	e7aa      	b.n	800e440 <_printf_i+0x14c>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	462a      	mov	r2, r5
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	4640      	mov	r0, r8
 800e4f2:	47d0      	blx	sl
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d0ad      	beq.n	800e454 <_printf_i+0x160>
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	079b      	lsls	r3, r3, #30
 800e4fc:	d413      	bmi.n	800e526 <_printf_i+0x232>
 800e4fe:	68e0      	ldr	r0, [r4, #12]
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	4298      	cmp	r0, r3
 800e504:	bfb8      	it	lt
 800e506:	4618      	movlt	r0, r3
 800e508:	e7a6      	b.n	800e458 <_printf_i+0x164>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4632      	mov	r2, r6
 800e50e:	4649      	mov	r1, r9
 800e510:	4640      	mov	r0, r8
 800e512:	47d0      	blx	sl
 800e514:	3001      	adds	r0, #1
 800e516:	d09d      	beq.n	800e454 <_printf_i+0x160>
 800e518:	3501      	adds	r5, #1
 800e51a:	68e3      	ldr	r3, [r4, #12]
 800e51c:	9903      	ldr	r1, [sp, #12]
 800e51e:	1a5b      	subs	r3, r3, r1
 800e520:	42ab      	cmp	r3, r5
 800e522:	dcf2      	bgt.n	800e50a <_printf_i+0x216>
 800e524:	e7eb      	b.n	800e4fe <_printf_i+0x20a>
 800e526:	2500      	movs	r5, #0
 800e528:	f104 0619 	add.w	r6, r4, #25
 800e52c:	e7f5      	b.n	800e51a <_printf_i+0x226>
 800e52e:	bf00      	nop
 800e530:	0800ec21 	.word	0x0800ec21
 800e534:	0800ec32 	.word	0x0800ec32

0800e538 <__swhatbuf_r>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	460c      	mov	r4, r1
 800e53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e540:	2900      	cmp	r1, #0
 800e542:	b096      	sub	sp, #88	; 0x58
 800e544:	4615      	mov	r5, r2
 800e546:	461e      	mov	r6, r3
 800e548:	da0d      	bge.n	800e566 <__swhatbuf_r+0x2e>
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e550:	f04f 0100 	mov.w	r1, #0
 800e554:	bf0c      	ite	eq
 800e556:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e55a:	2340      	movne	r3, #64	; 0x40
 800e55c:	2000      	movs	r0, #0
 800e55e:	6031      	str	r1, [r6, #0]
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	b016      	add	sp, #88	; 0x58
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	466a      	mov	r2, sp
 800e568:	f000 f848 	bl	800e5fc <_fstat_r>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	dbec      	blt.n	800e54a <__swhatbuf_r+0x12>
 800e570:	9901      	ldr	r1, [sp, #4]
 800e572:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e576:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e57a:	4259      	negs	r1, r3
 800e57c:	4159      	adcs	r1, r3
 800e57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e582:	e7eb      	b.n	800e55c <__swhatbuf_r+0x24>

0800e584 <__smakebuf_r>:
 800e584:	898b      	ldrh	r3, [r1, #12]
 800e586:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e588:	079d      	lsls	r5, r3, #30
 800e58a:	4606      	mov	r6, r0
 800e58c:	460c      	mov	r4, r1
 800e58e:	d507      	bpl.n	800e5a0 <__smakebuf_r+0x1c>
 800e590:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e594:	6023      	str	r3, [r4, #0]
 800e596:	6123      	str	r3, [r4, #16]
 800e598:	2301      	movs	r3, #1
 800e59a:	6163      	str	r3, [r4, #20]
 800e59c:	b002      	add	sp, #8
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
 800e5a0:	ab01      	add	r3, sp, #4
 800e5a2:	466a      	mov	r2, sp
 800e5a4:	f7ff ffc8 	bl	800e538 <__swhatbuf_r>
 800e5a8:	9900      	ldr	r1, [sp, #0]
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f7ff f843 	bl	800d638 <_malloc_r>
 800e5b2:	b948      	cbnz	r0, 800e5c8 <__smakebuf_r+0x44>
 800e5b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b8:	059a      	lsls	r2, r3, #22
 800e5ba:	d4ef      	bmi.n	800e59c <__smakebuf_r+0x18>
 800e5bc:	f023 0303 	bic.w	r3, r3, #3
 800e5c0:	f043 0302 	orr.w	r3, r3, #2
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	e7e3      	b.n	800e590 <__smakebuf_r+0xc>
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	6020      	str	r0, [r4, #0]
 800e5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5d0:	81a3      	strh	r3, [r4, #12]
 800e5d2:	9b00      	ldr	r3, [sp, #0]
 800e5d4:	6163      	str	r3, [r4, #20]
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	6120      	str	r0, [r4, #16]
 800e5da:	b15b      	cbz	r3, 800e5f4 <__smakebuf_r+0x70>
 800e5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f000 f81d 	bl	800e620 <_isatty_r>
 800e5e6:	b128      	cbz	r0, 800e5f4 <__smakebuf_r+0x70>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f023 0303 	bic.w	r3, r3, #3
 800e5ee:	f043 0301 	orr.w	r3, r3, #1
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	89a3      	ldrh	r3, [r4, #12]
 800e5f6:	431d      	orrs	r5, r3
 800e5f8:	81a5      	strh	r5, [r4, #12]
 800e5fa:	e7cf      	b.n	800e59c <__smakebuf_r+0x18>

0800e5fc <_fstat_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4d07      	ldr	r5, [pc, #28]	; (800e61c <_fstat_r+0x20>)
 800e600:	2300      	movs	r3, #0
 800e602:	4604      	mov	r4, r0
 800e604:	4608      	mov	r0, r1
 800e606:	4611      	mov	r1, r2
 800e608:	602b      	str	r3, [r5, #0]
 800e60a:	f7f9 fd28 	bl	800805e <_fstat>
 800e60e:	1c43      	adds	r3, r0, #1
 800e610:	d102      	bne.n	800e618 <_fstat_r+0x1c>
 800e612:	682b      	ldr	r3, [r5, #0]
 800e614:	b103      	cbz	r3, 800e618 <_fstat_r+0x1c>
 800e616:	6023      	str	r3, [r4, #0]
 800e618:	bd38      	pop	{r3, r4, r5, pc}
 800e61a:	bf00      	nop
 800e61c:	20001568 	.word	0x20001568

0800e620 <_isatty_r>:
 800e620:	b538      	push	{r3, r4, r5, lr}
 800e622:	4d06      	ldr	r5, [pc, #24]	; (800e63c <_isatty_r+0x1c>)
 800e624:	2300      	movs	r3, #0
 800e626:	4604      	mov	r4, r0
 800e628:	4608      	mov	r0, r1
 800e62a:	602b      	str	r3, [r5, #0]
 800e62c:	f7f9 fd27 	bl	800807e <_isatty>
 800e630:	1c43      	adds	r3, r0, #1
 800e632:	d102      	bne.n	800e63a <_isatty_r+0x1a>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	b103      	cbz	r3, 800e63a <_isatty_r+0x1a>
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	bd38      	pop	{r3, r4, r5, pc}
 800e63c:	20001568 	.word	0x20001568

0800e640 <_init>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	bf00      	nop
 800e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e646:	bc08      	pop	{r3}
 800e648:	469e      	mov	lr, r3
 800e64a:	4770      	bx	lr

0800e64c <_fini>:
 800e64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64e:	bf00      	nop
 800e650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e652:	bc08      	pop	{r3}
 800e654:	469e      	mov	lr, r3
 800e656:	4770      	bx	lr
